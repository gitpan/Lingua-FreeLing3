/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIG_CASTRANK_MODE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Add in functionality missing in older versions of Perl. Much of this is based on Devel-PPPort on cpan. */

/* Add PERL_REVISION, PERL_VERSION, PERL_SUBVERSION if missing */
#ifndef PERL_REVISION
#  if !defined(__PATCHLEVEL_H_INCLUDED__) && !(defined(PATCHLEVEL) && defined(SUBVERSION))
#    define PERL_PATCHLEVEL_H_IMPLICIT
#    include <patchlevel.h>
#  endif
#  if !(defined(PERL_VERSION) || (defined(SUBVERSION) && defined(PATCHLEVEL)))
#    include <could_not_find_Perl_patchlevel.h>
#  endif
#  ifndef PERL_REVISION
#    define PERL_REVISION       (5)
#    define PERL_VERSION        PATCHLEVEL
#    define PERL_SUBVERSION     SUBVERSION
#  endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

#ifndef SvIOK_UV
# define SvIOK_UV(sv)       (SvIOK(sv) && (SvUVX(sv) == SvIVX(sv)))
#endif

#ifndef SvUOK
# define SvUOK(sv)           SvIOK_UV(sv)
#endif

#if ((PERL_VERSION < 4) || ((PERL_VERSION == 4) && (PERL_SUBVERSION <= 5)))
#  define PL_sv_undef               sv_undef
#  define PL_na	                    na
#  define PL_errgv                  errgv
#  define PL_sv_no                  sv_no
#  define PL_sv_yes                 sv_yes
#  define PL_markstack_ptr          markstack_ptr
#endif

#ifndef IVSIZE
#  ifdef LONGSIZE
#    define IVSIZE LONGSIZE
#  else
#    define IVSIZE 4 /* A bold guess, but the best we can make. */
#  endif
#endif

#ifndef INT2PTR
#  if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#    define PTRV                  UV
#    define INT2PTR(any,d)        (any)(d)
#  else
#    if PTRSIZE == LONGSIZE
#      define PTRV                unsigned long
#    else
#      define PTRV                unsigned
#    endif
#    define INT2PTR(any,d)        (any)(PTRV)(d)
#  endif

#  define NUM2PTR(any,d)  (any)(PTRV)(d)
#  define PTR2IV(p)       INT2PTR(IV,p)
#  define PTR2UV(p)       INT2PTR(UV,p)
#  define PTR2NV(p)       NUM2PTR(NV,p)

#  if PTRSIZE == LONGSIZE
#    define PTR2ul(p)     (unsigned long)(p)
#  else
#    define PTR2ul(p)     INT2PTR(unsigned long,p)
#  endif
#endif /* !INT2PTR */

#ifndef SvPV_nolen
# define SvPV_nolen(x) SvPV(x,PL_na)
#endif

#ifndef get_sv
#  define get_sv perl_get_sv
#endif

#ifndef ERRSV
#  define ERRSV get_sv("@",FALSE)
#endif

#ifndef pTHX_
#define pTHX_
#endif   

#include <string.h>
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Perl_ErrorType(int code) {
  switch(code) {
  case SWIG_MemoryError:
    return "MemoryError";
  case SWIG_IOError:
    return "IOError";
  case SWIG_RuntimeError:
    return "RuntimeError";
  case SWIG_IndexError:
    return "IndexError";
  case SWIG_TypeError:
    return "TypeError";
  case SWIG_DivisionByZero:
    return "ZeroDivisionError";
  case SWIG_OverflowError:
    return "OverflowError";
  case SWIG_SyntaxError:
    return "SyntaxError";
  case SWIG_ValueError:
    return "ValueError";
  case SWIG_SystemError:
    return "SystemError";
  case SWIG_AttributeError:
    return "AttributeError";
  default:
    return "RuntimeError";
  }
}


/* -----------------------------------------------------------------------------
 * perlrun.swg
 *
 * This file contains the runtime support for Perl modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef PERL_OBJECT
#define SWIG_PERL_OBJECT_DECL CPerlObj *SWIGUNUSEDPARM(pPerl),
#define SWIG_PERL_OBJECT_CALL pPerl,
#else
#define SWIG_PERL_OBJECT_DECL
#define SWIG_PERL_OBJECT_CALL
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pp, type, flags)           SWIG_Perl_ConvertPtr(SWIG_PERL_OBJECT_CALL obj, pp, type, flags)
#define SWIG_ConvertPtrAndOwn(obj, pp, type, flags,own) SWIG_Perl_ConvertPtrAndOwn(SWIG_PERL_OBJECT_CALL obj, pp, type, flags, own)
#define SWIG_NewPointerObj(p, type, flags)              SWIG_Perl_NewPointerObj(SWIG_PERL_OBJECT_CALL p, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, p, s, type)             SWIG_Perl_ConvertPacked(SWIG_PERL_OBJECT_CALL obj, p, s, type)
#define SWIG_NewPackedObj(p, s, type)	                SWIG_Perl_NewPackedObj(SWIG_PERL_OBJECT_CALL p, s, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Perl_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Perl_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Perl_ErrorType(code)               
#define SWIG_Error(code, msg)            		sv_setpvf(get_sv("@", GV_ADD), "%s %s", SWIG_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    

/* Perl-specific SWIG API */

#define SWIG_MakePtr(sv, ptr, type, flags)              SWIG_Perl_MakePtr(SWIG_PERL_OBJECT_CALL sv, ptr, type, flags)
#define SWIG_MakePackedObj(sv, p, s, type)	        SWIG_Perl_MakePackedObj(SWIG_PERL_OBJECT_CALL sv, p, s, type)
#define SWIG_SetError(str)                              SWIG_Error(SWIG_RuntimeError, str)


#define SWIG_PERL_DECL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_DECL arg1)
#define SWIG_PERL_CALL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_CALL arg1)
#define SWIG_PERL_DECL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_DECL arg1, arg2)
#define SWIG_PERL_CALL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_CALL arg1, arg2)

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER   SWIG_POINTER_OWN
#define SWIG_SHADOW  SWIG_OWNER << 1

#define SWIG_MAYBE_PERL_OBJECT SWIG_PERL_OBJECT_DECL

/* SWIG Perl macros */

/* Macro to declare an XS function */
#ifndef XSPROTO
#   define XSPROTO(name) void name(pTHX_ CV* cv)
#endif

/* Macro to call an XS function */
#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC

#else /* PERL_OBJECT */

#define MAGIC_PPERL
#define SWIGCLASS_STATIC static SWIGUNUSED

#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#else /* MULTIPLICITY */

#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif /* MULTIPLICITY */
#endif /* PERL_OBJECT */

#  ifdef PERL_OBJECT
#    define SWIG_croak_null() SWIG_Perl_croak_null(pPerl)
static void SWIG_Perl_croak_null(CPerlObj *pPerl)
#  else
static void SWIG_croak_null()
#  endif
{
  SV *err = get_sv("@", GV_ADD);
#  if (PERL_VERSION < 6)
  croak("%_", err);
#  else
  if (sv_isobject(err))
    croak(0);
  else
    croak("%s", SvPV_nolen(err));
#  endif
}


/* 
   Define how strict is the cast between strings and integers/doubles
   when overloading between these types occurs.
   
   The default is making it as strict as possible by using SWIG_AddCast
   when needed.
   
   You can use -DSWIG_PERL_NO_STRICT_STR2NUM at compilation time to
   disable the SWIG_AddCast, making the casting between string and
   numbers less strict.

   In the end, we try to solve the overloading between strings and
   numerical types in the more natural way, but if you can avoid it,
   well, avoid it using %rename, for example.
*/
#ifndef SWIG_PERL_NO_STRICT_STR2NUM
# ifndef SWIG_PERL_STRICT_STR2NUM
#  define SWIG_PERL_STRICT_STR2NUM
# endif
#endif
#ifdef SWIG_PERL_STRICT_STR2NUM
/* string takes precedence */
#define SWIG_Str2NumCast(x) SWIG_AddCast(x)  
#else
/* number takes precedence */
#define SWIG_Str2NumCast(x) x
#endif



#include <stdlib.h>

SWIGRUNTIME const char *
SWIG_Perl_TypeProxyName(const swig_type_info *type) {
  if (!type) return NULL;
  if (type->clientdata != NULL) {
    return (const char*) type->clientdata;
  } 
  else {
    return type->name;
  }
}

/* Identical to SWIG_TypeCheck, except for strcmp comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeProxyCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(SWIG_Perl_TypeProxyName(iter->type), c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* Function for getting a pointer value */

SWIGRUNTIME int
SWIG_Perl_ConvertPtrAndOwn(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags, int *own) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;
  SV *tsv = 0;

  if (own)
    *own = 0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    IV tmp = 0;
    tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
	    tsv = (SV*)SvRV(sv);
            tmp = SvIV(tsv);
          }
        }
      } else {
        return SWIG_ERROR;
      }
    } else {
      tmp = SvIV(tsv);
    }
    voidptr = INT2PTR(void *,tmp);
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return SWIG_OK;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    if (!SvROK(sv)) {
      /* In Perl 5.12 and later, SVt_RV == SVt_IV, so sv could be a valid integer value.  */
      if (SvIOK(sv)) {
        return SWIG_ERROR;
      } else {
        /* NULL pointer (reference to undef). */
        *(ptr) = (void *) 0;
        return SWIG_OK;
      }
    } else {
      return SWIG_ERROR;
    }
  } else {                            /* Don't know what it is */
    return SWIG_ERROR;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeProxyCheck(_c,_t);
    if (!tc) {
      return SWIG_ERROR;
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,voidptr,&newmemory);
      if (newmemory == SWIG_CAST_NEW_MEMORY) {
        assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
        if (own)
          *own = *own | SWIG_CAST_NEW_MEMORY;
      }
    }
  } else {
    *ptr = voidptr;
  }

  /* 
   *  DISOWN implementation: we need a perl guru to check this one.
   */
  if (tsv && (flags & SWIG_POINTER_DISOWN)) {
    /* 
     *  almost copy paste code from below SWIG_POINTER_OWN setting
     */
    SV *obj = sv;
    HV *stash = SvSTASH(SvRV(obj));
    GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
    if (isGV(gv)) {
      HV *hv = GvHVn(gv);
      /*
       * To set ownership (see below), a newSViv(1) entry is added. 
       * Hence, to remove ownership, we delete the entry.
       */
      if (hv_exists_ent(hv, obj, 0)) {
	hv_delete_ent(hv, obj, 0, 0);
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  return SWIG_Perl_ConvertPtrAndOwn(sv, ptr, _t, flags, 0);
}

SWIGRUNTIME void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & (SWIG_SHADOW | SWIG_POINTER_OWN))) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, SWIG_Perl_TypeProxyName(t), ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_POINTER_OWN) {
      HV *hv;
      GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, SWIG_Perl_TypeProxyName(t), ptr);
  }
}

SWIGRUNTIMEINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME void
SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(SWIG_Perl_TypeProxyName(type))) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,SWIG_Perl_TypeProxyName(type));
  sv_setpv(sv, result);
}

SWIGRUNTIME SV *
SWIG_Perl_NewPackedObj(SWIG_MAYBE_PERL_OBJECT void *ptr, int sz, swig_type_info *type) {
  SV *result = sv_newmortal();
  SWIG_Perl_MakePackedObj(result, ptr, sz, type);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return SWIG_ERROR;
  c = SvPV_nolen(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return SWIG_ERROR;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return SWIG_ERROR;
  }
  return SWIG_OK;
}


/* Macros for low-level exception handling */
#define SWIG_croak(x)    { SWIG_Error(SWIG_RuntimeError, x); SWIG_fail; }


typedef XSPROTO(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;


/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
# ifdef __cplusplus
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,const_cast<char*>(a),b,c)
# else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,(char*)(a),b,c)
# endif
# ifndef MULTIPLICITY
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) 
# else
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) 
# endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
SWIGRUNTIME void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) 
#endif
{
  MAGIC *mg;
  sv_magic(sv,sv,'U',name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFunc) get;
  mg->mg_virtual->svt_set = (SwigMagicFunc) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


SWIGRUNTIME swig_module_info *
SWIG_Perl_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE | GV_ADDMULTI);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE | GV_ADDMULTI);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef __cplusplus
}
#endif

/* Workaround perl5 global namespace pollution. Note that undefining library
 * functions like fopen will not solve the problem on all platforms as fopen
 * might be a macro on Windows but not necessarily on other operating systems. */
#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef do_exec
  #undef do_exec
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif
#ifdef free
  #undef free
#endif
#ifdef malloc
  #undef malloc
#endif
#ifdef calloc
  #undef calloc
#endif
#ifdef Stat
  #undef Stat
#endif
#ifdef check
  #undef check
#endif
#ifdef seekdir
  #undef seekdir
#endif
#ifdef open
  #undef open
#endif
#ifdef readdir
  #undef readdir
#endif
#ifdef bind
  #undef bind
#endif
#ifdef access
  #undef access
#endif
#ifdef stat
  #undef stat
#endif

#ifdef bool
  /* Leave if macro is from C99 stdbool.h */
  #ifndef __bool_true_false_are_defined
    #undef bool
  #endif
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_boost__u32regex swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_const_iterator swig_types[2]
#define SWIGTYPE_p_const_preorder_iterator swig_types[3]
#define SWIGTYPE_p_const_sibling_iterator swig_types[4]
#define SWIGTYPE_p_freeling__RE_map swig_types[5]
#define SWIGTYPE_p_freeling__analysis swig_types[6]
#define SWIGTYPE_p_freeling__chart_parser swig_types[7]
#define SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t swig_types[8]
#define SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t swig_types[9]
#define SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t swig_types[10]
#define SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t swig_types[11]
#define SWIGTYPE_p_freeling__dates swig_types[12]
#define SWIGTYPE_p_freeling__dep_tree swig_types[13]
#define SWIGTYPE_p_freeling__dep_txala swig_types[14]
#define SWIGTYPE_p_freeling__depnode swig_types[15]
#define SWIGTYPE_p_freeling__dictionary swig_types[16]
#define SWIGTYPE_p_freeling__document swig_types[17]
#define SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t swig_types[18]
#define SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t swig_types[19]
#define SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t swig_types[20]
#define SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t swig_types[21]
#define SWIGTYPE_p_freeling__hmm_tagger swig_types[22]
#define SWIGTYPE_p_freeling__lang_ident swig_types[23]
#define SWIGTYPE_p_freeling__locutions swig_types[24]
#define SWIGTYPE_p_freeling__maco swig_types[25]
#define SWIGTYPE_p_freeling__maco_options swig_types[26]
#define SWIGTYPE_p_freeling__nec swig_types[27]
#define SWIGTYPE_p_freeling__ner swig_types[28]
#define SWIGTYPE_p_freeling__node swig_types[29]
#define SWIGTYPE_p_freeling__numbers swig_types[30]
#define SWIGTYPE_p_freeling__paragraph swig_types[31]
#define SWIGTYPE_p_freeling__parse_tree swig_types[32]
#define SWIGTYPE_p_freeling__phonetics swig_types[33]
#define SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t swig_types[34]
#define SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t swig_types[35]
#define SWIGTYPE_p_freeling__probabilities swig_types[36]
#define SWIGTYPE_p_freeling__punts swig_types[37]
#define SWIGTYPE_p_freeling__quantities swig_types[38]
#define SWIGTYPE_p_freeling__relax_tagger swig_types[39]
#define SWIGTYPE_p_freeling__semanticDB swig_types[40]
#define SWIGTYPE_p_freeling__sense_info swig_types[41]
#define SWIGTYPE_p_freeling__senses swig_types[42]
#define SWIGTYPE_p_freeling__sentence swig_types[43]
#define SWIGTYPE_p_freeling__sentence__const_iterator swig_types[44]
#define SWIGTYPE_p_freeling__sentence__iterator swig_types[45]
#define SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t swig_types[46]
#define SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t swig_types[47]
#define SWIGTYPE_p_freeling__splitter swig_types[48]
#define SWIGTYPE_p_freeling__tagset swig_types[49]
#define SWIGTYPE_p_freeling__tokenizer swig_types[50]
#define SWIGTYPE_p_freeling__traces swig_types[51]
#define SWIGTYPE_p_freeling__treeT_freeling__depnode_t swig_types[52]
#define SWIGTYPE_p_freeling__treeT_freeling__node_t swig_types[53]
#define SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t swig_types[54]
#define SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t swig_types[55]
#define SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t swig_types[56]
#define SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t swig_types[57]
#define SWIGTYPE_p_freeling__ukb_wrap swig_types[58]
#define SWIGTYPE_p_freeling__util swig_types[59]
#define SWIGTYPE_p_freeling__word swig_types[60]
#define SWIGTYPE_p_freeling__word__const_iterator swig_types[61]
#define SWIGTYPE_p_freeling__word__iterator swig_types[62]
#define SWIGTYPE_p_iterator swig_types[63]
#define SWIGTYPE_p_long_double swig_types[64]
#define SWIGTYPE_p_preorder_iterator swig_types[65]
#define SWIGTYPE_p_sibling_iterator swig_types[66]
#define SWIGTYPE_p_std__listT_freeling__analysis_t swig_types[67]
#define SWIGTYPE_p_std__listT_freeling__paragraph_t swig_types[68]
#define SWIGTYPE_p_std__listT_freeling__sentence_t swig_types[69]
#define SWIGTYPE_p_std__listT_freeling__word_t swig_types[70]
#define SWIGTYPE_p_std__listT_int_t swig_types[71]
#define SWIGTYPE_p_std__listT_std__pairT_freeling__word_double_t_t swig_types[72]
#define SWIGTYPE_p_std__listT_std__pairT_freeling__word_double_t_t__iterator swig_types[73]
#define SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t swig_types[74]
#define SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_t swig_types[75]
#define SWIGTYPE_p_std__listT_std__wstring_t swig_types[76]
#define SWIGTYPE_p_std__out_of_range swig_types[77]
#define SWIGTYPE_p_std__pairT_double_std__wstring_t swig_types[78]
#define SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t swig_types[79]
#define SWIGTYPE_p_std__setT_std__wstring_t swig_types[80]
#define SWIGTYPE_p_std__vectorT_freeling__word_t swig_types[81]
#define SWIGTYPE_p_std__vectorT_std__listT_int_t_t swig_types[82]
#define SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t swig_types[83]
#define SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t swig_types[85]
#define SWIGTYPE_p_std__vectorT_std__wstring_t swig_types[86]
#define SWIGTYPE_p_std__wstring swig_types[87]
#define SWIGTYPE_p_unsigned_long swig_types[88]
static swig_type_info *swig_types[90];
static swig_module_info swig_module = {swig_types, 89, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_Lingua__FreeLing3__Bindings

#define SWIG_name   "Lingua::FreeLing3::Bindingsc::boot_Lingua__FreeLing3__Bindings"
#define SWIG_prefix "Lingua::FreeLing3::Bindingsc::"

#define SWIGVERSION 0x020009 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


 #include "freeling.h"
 #include "freeling/tree.h"
 #include "freeling/morfo/traces.h"
 using namespace std;


#include <stdexcept>


#include <string>

double SwigSvToNumber(SV* sv) {
    return SvIOK(sv) ? double(SvIVX(sv)) : SvNVX(sv);
}
std::string SwigSvToString(SV* sv) {
    STRLEN len;
    char *ptr = SvPV(sv, len);
    return std::string(ptr, len);
}
void SwigSvFromString(SV* sv, const std::string& s) {
    sv_setpvn(sv,s.data(),s.size());
}


#include <list>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double SWIG_PERL_DECL_ARGS_2(SV *obj, double *val)
{
  if (SvNIOK(obj)) {
    if (val) *val = SvNV(obj);
    return SWIG_OK;
  } else if (SvIOK(obj)) {
    if (val) *val = (double) SvIV(obj);
    return SWIG_AddCast(SWIG_OK);
  } else {
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      double v;
      errno = 0;
      v = strtod(nptr, &endptr);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long *val) 
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (v <= ULONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= 0 && v <= ULONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long v;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long value)
{
  SV *sv;
  if (value <= UV_MAX)
    sv = newSVuv(value);
  else
    sv = newSVpvf("%lu", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_int  SWIG_PERL_DECL_ARGS_1(unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_From_bool  SWIG_PERL_DECL_ARGS_1(bool value)
{
  return boolSV(value);
}

SWIGINTERN freeling::word std_vector_Sl_freeling_word_Sg__pop(std::vector< freeling::word > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                freeling::word x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERN int
SWIG_AsVal_long SWIG_PERL_DECL_ARGS_2(SV *obj, long* val)
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (v <= LONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= LONG_MIN && v <= LONG_MAX) {
      if(val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long v;
      errno = 0;
      v = strtol(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_PERL_DECL_ARGS_2(SV * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN freeling::word &std_vector_Sl_freeling_word_Sg__get(std::vector< freeling::word > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_freeling_word_Sg__set(std::vector< freeling::word > *self,int i,freeling::word const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::list< freeling::word > std_list_Sl_freeling_word_Sg__elements(std::list< freeling::word > *self){
                return *self;
            }
SWIGINTERN freeling::word &std_list_Sl_freeling_word_Sg__get(std::list< freeling::word > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size) {
                    list<freeling::word>::iterator it = self->begin();
                    while(i) { it++; i--; }
                    return *it;
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< freeling::analysis > std_list_Sl_freeling_analysis_Sg__elements(std::list< freeling::analysis > *self){
                return *self;
            }
SWIGINTERN freeling::analysis &std_list_Sl_freeling_analysis_Sg__get(std::list< freeling::analysis > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size) {
                    list<freeling::analysis>::iterator it = self->begin();
                    while(i) { it++; i--; }
                    return *it;
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< freeling::sentence > std_list_Sl_freeling_sentence_Sg__elements(std::list< freeling::sentence > *self){
                return *self;
            }
SWIGINTERN freeling::sentence &std_list_Sl_freeling_sentence_Sg__get(std::list< freeling::sentence > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size) {
                    list<freeling::sentence>::iterator it = self->begin();
                    while(i) { it++; i--; }
                    return *it;
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< freeling::paragraph > std_list_Sl_freeling_paragraph_Sg__elements(std::list< freeling::paragraph > *self){
                return *self;
            }
SWIGINTERN freeling::paragraph &std_list_Sl_freeling_paragraph_Sg__get(std::list< freeling::paragraph > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size) {
                    list<freeling::paragraph>::iterator it = self->begin();
                    while(i) { it++; i--; }
                    return *it;
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< std::wstring > std_list_Sl_std_wstring_Sg__elements(std::list< std::wstring > *self){
                return *self;
            }
SWIGINTERN std::wstring &std_list_Sl_std_wstring_Sg__get(std::list< std::wstring > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size) {
                    list<std::wstring>::iterator it = self->begin();
                    while(i) { it++; i--; }
                    return *it;
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< int > std_list_Sl_int_Sg__elements(std::list< int > *self){
                return *self;
            }
SWIGINTERN int std_list_Sl_int_Sg__get(std::list< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size) {
                    list<int>::iterator it = self->begin();
                    while(i) { it++; i--; }
                    return *it;
                }
                else
                    throw std::out_of_range("list index out of range");
            }

SWIGINTERNINLINE SV *
SWIG_From_long  SWIG_PERL_DECL_ARGS_1(long value)
{
  SV *sv;
  if (value >= IV_MIN && value <= IV_MAX)
    sv = newSViv(value);
  else
    sv = newSVpvf("%ld", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_int  SWIG_PERL_DECL_ARGS_1(int value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}

SWIGINTERN std::list< int > std_vector_Sl_std_list_Sl_int_Sg__Sg__pop(std::vector< std::list< int > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::list< int > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::list< int > &std_vector_Sl_std_list_Sl_int_Sg__Sg__get(std::vector< std::list< int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg__set(std::vector< std::list< int > > *self,int i,std::list< int > const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::list< std::wstring > std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__pop(std::vector< std::list< std::wstring > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::list< std::wstring > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::list< std::wstring > &std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__get(std::vector< std::list< std::wstring > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__set(std::vector< std::list< std::wstring > > *self,int i,std::list< std::wstring > const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::wstring std_vector_Sl_std_wstring_Sg__pop(std::vector< std::wstring > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::wstring x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::wstring &std_vector_Sl_std_wstring_Sg__get(std::vector< std::wstring > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_wstring_Sg__set(std::vector< std::wstring > *self,int i,std::wstring const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERNINLINE SV *
SWIG_From_double  SWIG_PERL_DECL_ARGS_1(double value)
{
  return sv_2mortal(newSVnv(value));
}

SWIGINTERN std::pair< double,std::wstring > std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__pop(std::vector< std::pair< double,std::wstring > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::pair< double,std::wstring > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::pair< double,std::wstring > &std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__get(std::vector< std::pair< double,std::wstring > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__set(std::vector< std::pair< double,std::wstring > > *self,int i,std::pair< double,std::wstring > const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::pair< std::wstring,std::wstring > std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__pop(std::vector< std::pair< std::wstring,std::wstring > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::pair< std::wstring,std::wstring > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::pair< std::wstring,std::wstring > &std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__get(std::vector< std::pair< std::wstring,std::wstring > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__set(std::vector< std::pair< std::wstring,std::wstring > > *self,int i,std::pair< std::wstring,std::wstring > const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsVal_bool SWIG_PERL_DECL_ARGS_2(SV *obj, bool* val)
{
  if (obj == &PL_sv_yes) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == &PL_sv_no) { 
    if (val) *val = false;
    return SWIG_OK;
  } else {
    if (val) *val = SvTRUE(obj) ? true : false;
    return SWIG_AddCast(SWIG_OK);    
  }
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SV *obj, char** cptr, size_t* psize, int *alloc)
{
  if (SvMAGICAL(obj)) {
     SV *tmp = sv_newmortal();
     SvSetSV(tmp, obj);
     obj = tmp;
  }
  if (SvPOK(obj)) {
    STRLEN len = 0;
    char *cstr = SvPV(obj, len); 
    size_t size = len + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      char* vptr = 0; 
      if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = vptr;
	if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}




#ifdef __cplusplus
extern "C" {
#endif

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_Lingua__FreeLing3__Bindings_var::
class _wrap_Lingua__FreeLing3__Bindings_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *SWIGUNUSEDPARM(sv), MAGIC *SWIGUNUSEDPARM(mg)) {
    MAGIC_PPERL
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_traces_TraceLevel_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""freeling::traces::TraceLevel""' of type '""int""'");
    }
    freeling::traces::TraceLevel = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_traces_TraceLevel_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(freeling::traces::TraceLevel)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_traces_TraceModule_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    unsigned long val;
    int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""freeling::traces::TraceModule""' of type '""unsigned long""'");
    }
    freeling::traces::TraceModule = static_cast< unsigned long >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_traces_TraceModule_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(freeling::traces::TraceModule)))  ;
  return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_new_VectorWord__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< freeling::word > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorWord(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorWord" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (std::vector< freeling::word > *)new std::vector< freeling::word >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorWord__SWIG_1) {
  {
    int argvi = 0;
    std::vector< freeling::word > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_VectorWord();");
    }
    result = (std::vector< freeling::word > *)new std::vector< freeling::word >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorWord__SWIG_2) {
  {
    unsigned int arg1 ;
    freeling::word *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< freeling::word > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_VectorWord(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorWord" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorWord" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorWord" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    result = (std::vector< freeling::word > *)new std::vector< freeling::word >(arg1,(freeling::word const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorWord__SWIG_3) {
  {
    std::vector< freeling::word > *arg1 = 0 ;
    std::vector< freeling::word > temp1 ;
    std::vector< freeling::word > *v1 ;
    int argvi = 0;
    std::vector< freeling::word > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorWord(std::vector< freeling::word > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_freeling__word_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_VectorWord. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_VectorWord. "
              "Expected an array of " "freeling::word");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_VectorWord. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (std::vector< freeling::word > *)new std::vector< freeling::word >((std::vector< freeling::word > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorWord) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector<freeling::word >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_freeling__word_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::word* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__word,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorWord__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorWord__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorWord__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorWord__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_VectorWord'");
  XSRETURN(0);
}


XS(_wrap_VectorWord_size) {
  {
    std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
    std::vector< freeling::word > temp1 ;
    std::vector< freeling::word > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorWord_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_freeling__word_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorWord_size. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorWord_size. "
              "Expected an array of " "freeling::word");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorWord_size. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (unsigned int)((std::vector< freeling::word > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorWord_empty) {
  {
    std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
    std::vector< freeling::word > temp1 ;
    std::vector< freeling::word > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorWord_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_freeling__word_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorWord_empty. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorWord_empty. "
              "Expected an array of " "freeling::word");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorWord_empty. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (bool)((std::vector< freeling::word > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorWord_clear) {
  {
    std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorWord_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_clear" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorWord_push) {
  {
    std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
    freeling::word *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorWord_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_push" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorWord_push" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_push" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    (arg1)->push_back((freeling::word const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorWord_pop) {
  {
    std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorWord_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_pop" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
    try {
      result = std_vector_Sl_freeling_word_Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj((new freeling::word(static_cast< const freeling::word& >(result))), SWIGTYPE_p_freeling__word, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorWord_get) {
  {
    std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorWord_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_get" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (freeling::word *) &std_vector_Sl_freeling_word_Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorWord_set) {
  {
    std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
    int arg2 ;
    freeling::word *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: VectorWord_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_set" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorWord_set" "', argument " "3"" of type '" "freeling::word const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_set" "', argument " "3"" of type '" "freeling::word const &""'"); 
    }
    arg3 = reinterpret_cast< freeling::word * >(argp3);
    try {
      std_vector_Sl_freeling_word_Sg__set(arg1,arg2,(freeling::word const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_VectorWord) {
  {
    std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_VectorWord(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_freeling__word_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorWord" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListWord__SWIG_0) {
  {
    int argvi = 0;
    std::list< freeling::word > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ListWord();");
    }
    result = (std::list< freeling::word > *)new std::list< freeling::word >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__word_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListWord__SWIG_1) {
  {
    std::list< freeling::word > *arg1 = 0 ;
    std::list< freeling::word > temp1 ;
    std::list< freeling::word > *v1 ;
    int argvi = 0;
    std::list< freeling::word > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ListWord(std::list< freeling::word > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__word_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_ListWord. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_ListWord. "
              "Expected an array of " "freeling::word");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_ListWord. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (std::list< freeling::word > *)new std::list< freeling::word >((std::list< freeling::word > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__word_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListWord) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::word >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__word_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::word* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__word,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListWord__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListWord__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ListWord'");
  XSRETURN(0);
}


XS(_wrap_ListWord_size) {
  {
    std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
    std::list< freeling::word > temp1 ;
    std::list< freeling::word > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListWord_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__word_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListWord_size. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListWord_size. "
              "Expected an array of " "freeling::word");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListWord_size. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (unsigned int)((std::list< freeling::word > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListWord_empty) {
  {
    std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
    std::list< freeling::word > temp1 ;
    std::list< freeling::word > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListWord_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__word_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListWord_empty. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListWord_empty. "
              "Expected an array of " "freeling::word");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListWord_empty. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (bool)((std::list< freeling::word > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListWord_clear) {
  {
    std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListWord_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_clear" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListWord_push) {
  {
    std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
    freeling::word *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListWord_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_push" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListWord_push" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_push" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    (arg1)->push_back((freeling::word const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListWord_elements) {
  {
    std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< freeling::word > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListWord_elements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_elements" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
    result = std_list_Sl_freeling_word_Sg__elements(arg1);
    {
      std::list<freeling::word>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::word* ptr = new freeling::word(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__word, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListWord_get) {
  {
    std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListWord_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__word_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_get" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (freeling::word *) &std_list_Sl_freeling_word_Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ListWord) {
  {
    std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ListWord(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__word_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListWord" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListAnalysis__SWIG_0) {
  {
    int argvi = 0;
    std::list< freeling::analysis > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ListAnalysis();");
    }
    result = (std::list< freeling::analysis > *)new std::list< freeling::analysis >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__analysis_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListAnalysis__SWIG_1) {
  {
    std::list< freeling::analysis > *arg1 = 0 ;
    std::list< freeling::analysis > temp1 ;
    std::list< freeling::analysis > *v1 ;
    int argvi = 0;
    std::list< freeling::analysis > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ListAnalysis(std::list< freeling::analysis > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__analysis_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_ListAnalysis. "
          "Expected an array of " "freeling::analysis");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::analysis* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__analysis,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_ListAnalysis. "
              "Expected an array of " "freeling::analysis");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_ListAnalysis. "
          "Expected an array of " "freeling::analysis");
      }
    }
    result = (std::list< freeling::analysis > *)new std::list< freeling::analysis >((std::list< freeling::analysis > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__analysis_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListAnalysis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::analysis >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__analysis_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::analysis* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__analysis,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListAnalysis__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListAnalysis__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ListAnalysis'");
  XSRETURN(0);
}


XS(_wrap_ListAnalysis_size) {
  {
    std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
    std::list< freeling::analysis > temp1 ;
    std::list< freeling::analysis > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListAnalysis_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__analysis_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListAnalysis_size. "
          "Expected an array of " "freeling::analysis");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::analysis* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__analysis,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListAnalysis_size. "
              "Expected an array of " "freeling::analysis");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListAnalysis_size. "
          "Expected an array of " "freeling::analysis");
      }
    }
    result = (unsigned int)((std::list< freeling::analysis > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListAnalysis_empty) {
  {
    std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
    std::list< freeling::analysis > temp1 ;
    std::list< freeling::analysis > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListAnalysis_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__analysis_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListAnalysis_empty. "
          "Expected an array of " "freeling::analysis");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::analysis* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__analysis,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListAnalysis_empty. "
              "Expected an array of " "freeling::analysis");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListAnalysis_empty. "
          "Expected an array of " "freeling::analysis");
      }
    }
    result = (bool)((std::list< freeling::analysis > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListAnalysis_clear) {
  {
    std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListAnalysis_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__analysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_clear" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListAnalysis_push) {
  {
    std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
    freeling::analysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListAnalysis_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__analysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_push" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__analysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListAnalysis_push" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_push" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::analysis * >(argp2);
    (arg1)->push_back((freeling::analysis const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListAnalysis_elements) {
  {
    std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< freeling::analysis > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListAnalysis_elements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__analysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_elements" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
    result = std_list_Sl_freeling_analysis_Sg__elements(arg1);
    {
      std::list<freeling::analysis>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::analysis* ptr = new freeling::analysis(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__analysis, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListAnalysis_get) {
  {
    std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::analysis *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListAnalysis_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__analysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_get" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (freeling::analysis *) &std_list_Sl_freeling_analysis_Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ListAnalysis) {
  {
    std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ListAnalysis(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__analysis_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListAnalysis" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListSentence__SWIG_0) {
  {
    int argvi = 0;
    std::list< freeling::sentence > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ListSentence();");
    }
    result = (std::list< freeling::sentence > *)new std::list< freeling::sentence >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__sentence_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListSentence__SWIG_1) {
  {
    std::list< freeling::sentence > *arg1 = 0 ;
    std::list< freeling::sentence > temp1 ;
    std::list< freeling::sentence > *v1 ;
    int argvi = 0;
    std::list< freeling::sentence > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ListSentence(std::list< freeling::sentence > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_ListSentence. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_ListSentence. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_ListSentence. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (std::list< freeling::sentence > *)new std::list< freeling::sentence >((std::list< freeling::sentence > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__sentence_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListSentence) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListSentence__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListSentence__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ListSentence'");
  XSRETURN(0);
}


XS(_wrap_ListSentence_size) {
  {
    std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
    std::list< freeling::sentence > temp1 ;
    std::list< freeling::sentence > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListSentence_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListSentence_size. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListSentence_size. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListSentence_size. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (unsigned int)((std::list< freeling::sentence > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListSentence_empty) {
  {
    std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
    std::list< freeling::sentence > temp1 ;
    std::list< freeling::sentence > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListSentence_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListSentence_empty. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListSentence_empty. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListSentence_empty. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (bool)((std::list< freeling::sentence > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListSentence_clear) {
  {
    std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListSentence_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__sentence_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_clear" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListSentence_push) {
  {
    std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListSentence_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__sentence_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_push" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListSentence_push" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_push" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    (arg1)->push_back((freeling::sentence const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListSentence_elements) {
  {
    std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListSentence_elements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__sentence_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_elements" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
    result = std_list_Sl_freeling_sentence_Sg__elements(arg1);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListSentence_get) {
  {
    std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::sentence *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListSentence_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__sentence_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_get" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (freeling::sentence *) &std_list_Sl_freeling_sentence_Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ListSentence) {
  {
    std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ListSentence(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__sentence_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListSentence" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListParagraph__SWIG_0) {
  {
    int argvi = 0;
    std::list< freeling::paragraph > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ListParagraph();");
    }
    result = (std::list< freeling::paragraph > *)new std::list< freeling::paragraph >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__paragraph_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListParagraph__SWIG_1) {
  {
    std::list< freeling::paragraph > *arg1 = 0 ;
    std::list< freeling::paragraph > temp1 ;
    std::list< freeling::paragraph > *v1 ;
    int argvi = 0;
    std::list< freeling::paragraph > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ListParagraph(std::list< freeling::paragraph > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__paragraph_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_ListParagraph. "
          "Expected an array of " "freeling::paragraph");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::paragraph* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__paragraph,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_ListParagraph. "
              "Expected an array of " "freeling::paragraph");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_ListParagraph. "
          "Expected an array of " "freeling::paragraph");
      }
    }
    result = (std::list< freeling::paragraph > *)new std::list< freeling::paragraph >((std::list< freeling::paragraph > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__paragraph_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListParagraph) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::paragraph >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__paragraph_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::paragraph* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__paragraph,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListParagraph__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListParagraph__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ListParagraph'");
  XSRETURN(0);
}


XS(_wrap_ListParagraph_size) {
  {
    std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
    std::list< freeling::paragraph > temp1 ;
    std::list< freeling::paragraph > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListParagraph_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__paragraph_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListParagraph_size. "
          "Expected an array of " "freeling::paragraph");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::paragraph* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__paragraph,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListParagraph_size. "
              "Expected an array of " "freeling::paragraph");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListParagraph_size. "
          "Expected an array of " "freeling::paragraph");
      }
    }
    result = (unsigned int)((std::list< freeling::paragraph > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListParagraph_empty) {
  {
    std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
    std::list< freeling::paragraph > temp1 ;
    std::list< freeling::paragraph > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListParagraph_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__paragraph_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListParagraph_empty. "
          "Expected an array of " "freeling::paragraph");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::paragraph* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__paragraph,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListParagraph_empty. "
              "Expected an array of " "freeling::paragraph");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListParagraph_empty. "
          "Expected an array of " "freeling::paragraph");
      }
    }
    result = (bool)((std::list< freeling::paragraph > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListParagraph_clear) {
  {
    std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListParagraph_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_clear" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListParagraph_push) {
  {
    std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
    freeling::paragraph *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListParagraph_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_push" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__paragraph,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListParagraph_push" "', argument " "2"" of type '" "freeling::paragraph const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_push" "', argument " "2"" of type '" "freeling::paragraph const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::paragraph * >(argp2);
    (arg1)->push_back((freeling::paragraph const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListParagraph_elements) {
  {
    std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< freeling::paragraph > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListParagraph_elements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_elements" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
    result = std_list_Sl_freeling_paragraph_Sg__elements(arg1);
    {
      std::list<freeling::paragraph>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::paragraph* ptr = new freeling::paragraph(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__paragraph, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListParagraph_get) {
  {
    std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::paragraph *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListParagraph_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_get" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (freeling::paragraph *) &std_list_Sl_freeling_paragraph_Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__paragraph, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ListParagraph) {
  {
    std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ListParagraph(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListParagraph" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListString__SWIG_0) {
  {
    int argvi = 0;
    std::list< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ListString();");
    }
    result = (std::list< std::wstring > *)new std::list< std::wstring >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListString__SWIG_1) {
  {
    std::list< std::wstring > *arg1 = 0 ;
    std::list< std::wstring > temp1 ;
    std::list< std::wstring > *v1 ;
    int argvi = 0;
    std::list< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ListString(std::list< std::wstring > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_std__wstring_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_ListString. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_ListString. "
              "Expected an array of " "std::wstring");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_ListString. "
          "Expected an array of " "std::wstring");
      }
    }
    result = (std::list< std::wstring > *)new std::list< std::wstring >((std::list< std::wstring > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListString) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped list? */
            std::list<std::wstring >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__listT_std__wstring_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::wstring* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__wstring,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListString__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListString__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ListString'");
  XSRETURN(0);
}


XS(_wrap_ListString_size) {
  {
    std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
    std::list< std::wstring > temp1 ;
    std::list< std::wstring > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListString_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_std__wstring_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListString_size. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListString_size. "
              "Expected an array of " "std::wstring");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListString_size. "
          "Expected an array of " "std::wstring");
      }
    }
    result = (unsigned int)((std::list< std::wstring > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListString_empty) {
  {
    std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
    std::list< std::wstring > temp1 ;
    std::list< std::wstring > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListString_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_std__wstring_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListString_empty. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListString_empty. "
              "Expected an array of " "std::wstring");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListString_empty. "
          "Expected an array of " "std::wstring");
      }
    }
    result = (bool)((std::list< std::wstring > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListString_clear) {
  {
    std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListString_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_clear" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListString_push) {
  {
    std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListString_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_push" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__wstring,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListString_push" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_push" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = reinterpret_cast< std::wstring * >(argp2);
    (arg1)->push_back((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListString_elements) {
  {
    std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< std::wstring > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListString_elements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_elements" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
    result = std_list_Sl_std_wstring_Sg__elements(arg1);
    {
      std::list<std::wstring>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        std::wstring* ptr = new std::wstring(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_std__wstring, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListString_get) {
  {
    std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::wstring *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListString_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_get" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (std::wstring *) &std_list_Sl_std_wstring_Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__wstring, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ListString) {
  {
    std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ListString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_std__wstring_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListString" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListInt__SWIG_0) {
  {
    int argvi = 0;
    std::list< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ListInt();");
    }
    result = (std::list< int > *)new std::list< int >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListInt__SWIG_1) {
  {
    std::list< int > *arg1 = 0 ;
    std::list< int > temp1 ;
    std::list< int > *v1 ;
    int argvi = 0;
    std::list< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ListInt(std::list< int > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_ListInt. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        int* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back(SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_ListInt. "
              "Expected an array of ""int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_ListInt. "
          "Expected an array of ""int");
      }
    }
    result = (std::list< int > *)new std::list< int >((std::list< int > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ListInt) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped list? */
            std::list<int >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__listT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListInt__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ListInt__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ListInt'");
  XSRETURN(0);
}


XS(_wrap_ListInt_size) {
  {
    std::list< int > *arg1 = (std::list< int > *) 0 ;
    std::list< int > temp1 ;
    std::list< int > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListInt_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListInt_size. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        int* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back(SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListInt_size. "
              "Expected an array of ""int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListInt_size. "
          "Expected an array of ""int");
      }
    }
    result = (unsigned int)((std::list< int > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListInt_empty) {
  {
    std::list< int > *arg1 = (std::list< int > *) 0 ;
    std::list< int > temp1 ;
    std::list< int > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListInt_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ListInt_empty. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        int* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back(SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ListInt_empty. "
              "Expected an array of ""int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ListInt_empty. "
          "Expected an array of ""int");
      }
    }
    result = (bool)((std::list< int > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListInt_clear) {
  {
    std::list< int > *arg1 = (std::list< int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListInt_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_clear" "', argument " "1"" of type '" "std::list< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< int > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListInt_push) {
  {
    std::list< int > *arg1 = (std::list< int > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListInt_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_push" "', argument " "1"" of type '" "std::list< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt_push" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->push_back(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListInt_elements) {
  {
    std::list< int > *arg1 = (std::list< int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ListInt_elements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_elements" "', argument " "1"" of type '" "std::list< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< int > * >(argp1);
    result = std_list_Sl_int_Sg__elements(arg1);
    {
      std::list<int>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        svs[j] = sv_newmortal();
        sv_setiv(svs[j], *i);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ListInt_get) {
  {
    std::list< int > *arg1 = (std::list< int > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ListInt_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_get" "', argument " "1"" of type '" "std::list< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (int)std_list_Sl_int_Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ListInt) {
  {
    std::list< int > *arg1 = (std::list< int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ListInt(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_int_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListInt" "', argument " "1"" of type '" "std::list< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< int > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListInt__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::list< int > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorListInt(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorListInt" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListInt__SWIG_1) {
  {
    int argvi = 0;
    std::vector< std::list< int > > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_VectorListInt();");
    }
    result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListInt__SWIG_2) {
  {
    unsigned int arg1 ;
    std::list< int > *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    std::list< int > temp2 ;
    std::list< int > *v2 ;
    int argvi = 0;
    std::vector< std::list< int > > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_VectorListInt(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorListInt" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_int_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of new_VectorListInt. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        int* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp2.push_back(SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "new_VectorListInt. "
              "Expected an array of ""int");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of new_VectorListInt. "
          "Expected an array of ""int");
      }
    }
    result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >(arg1,(std::list< int > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListInt__SWIG_3) {
  {
    std::vector< std::list< int > > *arg1 = 0 ;
    std::vector< std::list< int > > temp1 ;
    std::vector< std::list< int > > *v1 ;
    int argvi = 0;
    std::vector< std::list< int > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorListInt(std::vector< std::list< int > > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__listT_int_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_VectorListInt. "
          "Expected an array of " "std::list< int >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::list< int >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__listT_int_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_VectorListInt. "
              "Expected an array of " "std::list< int >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_VectorListInt. "
          "Expected an array of " "std::list< int >");
      }
    }
    result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >((std::vector< std::list< int > > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListInt) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector<std::list< int > >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__listT_int_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::list< int >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__listT_int_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorListInt__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorListInt__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorListInt__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorListInt__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_VectorListInt'");
  XSRETURN(0);
}


XS(_wrap_VectorListInt_size) {
  {
    std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
    std::vector< std::list< int > > temp1 ;
    std::vector< std::list< int > > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorListInt_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__listT_int_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorListInt_size. "
          "Expected an array of " "std::list< int >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::list< int >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__listT_int_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorListInt_size. "
              "Expected an array of " "std::list< int >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorListInt_size. "
          "Expected an array of " "std::list< int >");
      }
    }
    result = (unsigned int)((std::vector< std::list< int > > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListInt_empty) {
  {
    std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
    std::vector< std::list< int > > temp1 ;
    std::vector< std::list< int > > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorListInt_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__listT_int_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorListInt_empty. "
          "Expected an array of " "std::list< int >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::list< int >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__listT_int_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorListInt_empty. "
              "Expected an array of " "std::list< int >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorListInt_empty. "
          "Expected an array of " "std::list< int >");
      }
    }
    result = (bool)((std::vector< std::list< int > > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListInt_clear) {
  {
    std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorListInt_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_clear" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListInt_push) {
  {
    std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
    std::list< int > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< int > temp2 ;
    std::list< int > *v2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorListInt_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_push" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_int_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of VectorListInt_push. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        int* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp2.push_back(SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "VectorListInt_push. "
              "Expected an array of ""int");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of VectorListInt_push. "
          "Expected an array of ""int");
      }
    }
    (arg1)->push_back((std::list< int > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListInt_pop) {
  {
    std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorListInt_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_pop" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
    try {
      result = std_vector_Sl_std_list_Sl_int_Sg__Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    {
      std::list<int>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        svs[j] = sv_newmortal();
        sv_setiv(svs[j], *i);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListInt_get) {
  {
    std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::list< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorListInt_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_get" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (std::list< int > *) &std_vector_Sl_std_list_Sl_int_Sg__Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListInt_set) {
  {
    std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
    int arg2 ;
    std::list< int > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::list< int > temp3 ;
    std::list< int > *v3 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: VectorListInt_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_set" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__listT_int_t,1) != -1) {
        arg3 = v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of VectorListInt_set. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        int* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp3.push_back(SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "VectorListInt_set. "
              "Expected an array of ""int");
          }
        }
        arg3 = &temp3;
      } else {
        SWIG_croak("Type error in argument 3 of VectorListInt_set. "
          "Expected an array of ""int");
      }
    }
    try {
      std_vector_Sl_std_list_Sl_int_Sg__Sg__set(arg1,arg2,(std::list< int > const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_VectorListInt) {
  {
    std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_VectorListInt(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorListInt" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListString__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::list< std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorListString(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorListString" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListString__SWIG_1) {
  {
    int argvi = 0;
    std::vector< std::list< std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_VectorListString();");
    }
    result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListString__SWIG_2) {
  {
    unsigned int arg1 ;
    std::list< std::wstring > *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    std::list< std::wstring > temp2 ;
    std::list< std::wstring > *v2 ;
    int argvi = 0;
    std::vector< std::list< std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_VectorListString(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorListString" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_std__wstring_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of new_VectorListString. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "new_VectorListString. "
              "Expected an array of " "std::wstring");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of new_VectorListString. "
          "Expected an array of " "std::wstring");
      }
    }
    result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >(arg1,(std::list< std::wstring > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListString__SWIG_3) {
  {
    std::vector< std::list< std::wstring > > *arg1 = 0 ;
    std::vector< std::list< std::wstring > > temp1 ;
    std::vector< std::list< std::wstring > > *v1 ;
    int argvi = 0;
    std::vector< std::list< std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorListString(std::vector< std::list< std::wstring > > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_VectorListString. "
          "Expected an array of " "std::list< std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::list< std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__listT_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_VectorListString. "
              "Expected an array of " "std::list< std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_VectorListString. "
          "Expected an array of " "std::list< std::wstring >");
      }
    }
    result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >((std::vector< std::list< std::wstring > > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorListString) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector<std::list< std::wstring > >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::list< std::wstring >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__listT_std__wstring_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<std::wstring >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_std__wstring_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::wstring* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__wstring,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorListString__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorListString__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorListString__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorListString__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_VectorListString'");
  XSRETURN(0);
}


XS(_wrap_VectorListString_size) {
  {
    std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
    std::vector< std::list< std::wstring > > temp1 ;
    std::vector< std::list< std::wstring > > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorListString_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorListString_size. "
          "Expected an array of " "std::list< std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::list< std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__listT_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorListString_size. "
              "Expected an array of " "std::list< std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorListString_size. "
          "Expected an array of " "std::list< std::wstring >");
      }
    }
    result = (unsigned int)((std::vector< std::list< std::wstring > > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListString_empty) {
  {
    std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
    std::vector< std::list< std::wstring > > temp1 ;
    std::vector< std::list< std::wstring > > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorListString_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorListString_empty. "
          "Expected an array of " "std::list< std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::list< std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__listT_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorListString_empty. "
              "Expected an array of " "std::list< std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorListString_empty. "
          "Expected an array of " "std::list< std::wstring >");
      }
    }
    result = (bool)((std::vector< std::list< std::wstring > > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListString_clear) {
  {
    std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorListString_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_clear" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListString_push) {
  {
    std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
    std::list< std::wstring > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< std::wstring > temp2 ;
    std::list< std::wstring > *v2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorListString_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_push" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_std__wstring_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of VectorListString_push. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "VectorListString_push. "
              "Expected an array of " "std::wstring");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of VectorListString_push. "
          "Expected an array of " "std::wstring");
      }
    }
    (arg1)->push_back((std::list< std::wstring > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListString_pop) {
  {
    std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< std::wstring > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorListString_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_pop" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
    try {
      result = std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    {
      std::list<std::wstring>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        std::wstring* ptr = new std::wstring(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_std__wstring, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListString_get) {
  {
    std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::list< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorListString_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_get" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (std::list< std::wstring > *) &std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorListString_set) {
  {
    std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
    int arg2 ;
    std::list< std::wstring > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::list< std::wstring > temp3 ;
    std::list< std::wstring > *v3 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: VectorListString_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_set" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__listT_std__wstring_t,1) != -1) {
        arg3 = v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of VectorListString_set. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp3.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 3 of "
              "VectorListString_set. "
              "Expected an array of " "std::wstring");
          }
        }
        arg3 = &temp3;
      } else {
        SWIG_croak("Type error in argument 3 of VectorListString_set. "
          "Expected an array of " "std::wstring");
      }
    }
    try {
      std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__set(arg1,arg2,(std::list< std::wstring > const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_VectorListString) {
  {
    std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_VectorListString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorListString" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorString__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorString(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorString" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (std::vector< std::wstring > *)new std::vector< std::wstring >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorString__SWIG_1) {
  {
    int argvi = 0;
    std::vector< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_VectorString();");
    }
    result = (std::vector< std::wstring > *)new std::vector< std::wstring >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorString__SWIG_2) {
  {
    unsigned int arg1 ;
    std::wstring *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_VectorString(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorString" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__wstring,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorString" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorString" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = reinterpret_cast< std::wstring * >(argp2);
    result = (std::vector< std::wstring > *)new std::vector< std::wstring >(arg1,(std::wstring const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorString__SWIG_3) {
  {
    std::vector< std::wstring > *arg1 = 0 ;
    std::vector< std::wstring > temp1 ;
    std::vector< std::wstring > *v1 ;
    int argvi = 0;
    std::vector< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorString(std::vector< std::wstring > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__wstring_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_VectorString. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_VectorString. "
              "Expected an array of " "std::wstring");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_VectorString. "
          "Expected an array of " "std::wstring");
      }
    }
    result = (std::vector< std::wstring > *)new std::vector< std::wstring >((std::vector< std::wstring > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorString) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector<std::wstring >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__wstring_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::wstring* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__wstring,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__wstring, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorString__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorString__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorString__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorString__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_VectorString'");
  XSRETURN(0);
}


XS(_wrap_VectorString_size) {
  {
    std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
    std::vector< std::wstring > temp1 ;
    std::vector< std::wstring > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorString_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__wstring_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorString_size. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorString_size. "
              "Expected an array of " "std::wstring");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorString_size. "
          "Expected an array of " "std::wstring");
      }
    }
    result = (unsigned int)((std::vector< std::wstring > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorString_empty) {
  {
    std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
    std::vector< std::wstring > temp1 ;
    std::vector< std::wstring > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorString_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__wstring_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorString_empty. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorString_empty. "
              "Expected an array of " "std::wstring");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorString_empty. "
          "Expected an array of " "std::wstring");
      }
    }
    result = (bool)((std::vector< std::wstring > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorString_clear) {
  {
    std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorString_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_clear" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorString_push) {
  {
    std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorString_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_push" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__wstring,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorString_push" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_push" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = reinterpret_cast< std::wstring * >(argp2);
    (arg1)->push_back((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorString_pop) {
  {
    std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorString_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_pop" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
    try {
      result = std_vector_Sl_std_wstring_Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj((new std::wstring(static_cast< const std::wstring& >(result))), SWIGTYPE_p_std__wstring, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorString_get) {
  {
    std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::wstring *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorString_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_get" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (std::wstring *) &std_vector_Sl_std_wstring_Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__wstring, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorString_set) {
  {
    std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
    int arg2 ;
    std::wstring *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: VectorString_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_set" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_std__wstring,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorString_set" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_set" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = reinterpret_cast< std::wstring * >(argp3);
    try {
      std_vector_Sl_std_wstring_Sg__set(arg1,arg2,(std::wstring const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_VectorString) {
  {
    std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_VectorString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__wstring_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorString" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PairDoubleString__SWIG_0) {
  {
    int argvi = 0;
    std::pair< double,std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PairDoubleString();");
    }
    result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PairDoubleString__SWIG_1) {
  {
    double arg1 ;
    std::wstring arg2 ;
    double val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::pair< double,std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_PairDoubleString(t,u);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PairDoubleString" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__wstring,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PairDoubleString" "', argument " "2"" of type '" "std::wstring""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairDoubleString" "', argument " "2"" of type '" "std::wstring""'");
      } else {
        arg2 = *(reinterpret_cast< std::wstring * >(argp2));
      }
    }
    result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >(arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PairDoubleString__SWIG_2) {
  {
    std::pair< double,std::wstring > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    std::pair< double,std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PairDoubleString(p);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_std__pairT_double_std__wstring_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairDoubleString" "', argument " "1"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairDoubleString" "', argument " "1"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
    result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >((std::pair< double,std::wstring > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PairDoubleString) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__pairT_double_std__wstring_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__wstring, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PairDoubleString__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PairDoubleString__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PairDoubleString__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PairDoubleString'");
  XSRETURN(0);
}


XS(_wrap_PairDoubleString_first_set) {
  {
    std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PairDoubleString_first_set(self,first);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairDoubleString_first_set" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairDoubleString_first_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->first = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PairDoubleString_first_get) {
  {
    std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PairDoubleString_first_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairDoubleString_first_get" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
    result = (double) ((arg1)->first);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PairDoubleString_second_set) {
  {
    std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PairDoubleString_second_set(self,second);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairDoubleString_second_set" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__wstring,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairDoubleString_second_set" "', argument " "2"" of type '" "std::wstring""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairDoubleString_second_set" "', argument " "2"" of type '" "std::wstring""'");
      } else {
        arg2 = *(reinterpret_cast< std::wstring * >(argp2));
      }
    }
    if (arg1) (arg1)->second = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PairDoubleString_second_get) {
  {
    std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PairDoubleString_second_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairDoubleString_second_get" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
    result =  ((arg1)->second);
    ST(argvi) = SWIG_NewPointerObj((new std::wstring(static_cast< const std::wstring& >(result))), SWIGTYPE_p_std__wstring, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_PairDoubleString) {
  {
    std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PairDoubleString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairDoubleString" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairDoubleString__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::pair< double,std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorPairDoubleString(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPairDoubleString" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairDoubleString__SWIG_1) {
  {
    int argvi = 0;
    std::vector< std::pair< double,std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_VectorPairDoubleString();");
    }
    result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairDoubleString__SWIG_2) {
  {
    unsigned int arg1 ;
    std::pair< double,std::wstring > *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< std::pair< double,std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_VectorPairDoubleString(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPairDoubleString" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__pairT_double_std__wstring_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorPairDoubleString" "', argument " "2"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPairDoubleString" "', argument " "2"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    arg2 = reinterpret_cast< std::pair< double,std::wstring > * >(argp2);
    result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >(arg1,(std::pair< double,std::wstring > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairDoubleString__SWIG_3) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = 0 ;
    std::vector< std::pair< double,std::wstring > > temp1 ;
    std::vector< std::pair< double,std::wstring > > *v1 ;
    int argvi = 0;
    std::vector< std::pair< double,std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorPairDoubleString(std::vector< std::pair< double,std::wstring > > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_VectorPairDoubleString. "
          "Expected an array of " "std::pair< double,std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::pair< double,std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__pairT_double_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_VectorPairDoubleString. "
              "Expected an array of " "std::pair< double,std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_VectorPairDoubleString. "
          "Expected an array of " "std::pair< double,std::wstring >");
      }
    }
    result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >((std::vector< std::pair< double,std::wstring > > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairDoubleString) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector<std::pair< double,std::wstring > >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::pair< double,std::wstring >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__pairT_double_std__wstring_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__pairT_double_std__wstring_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorPairDoubleString__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorPairDoubleString__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorPairDoubleString__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorPairDoubleString__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_VectorPairDoubleString'");
  XSRETURN(0);
}


XS(_wrap_VectorPairDoubleString_size) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
    std::vector< std::pair< double,std::wstring > > temp1 ;
    std::vector< std::pair< double,std::wstring > > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorPairDoubleString_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorPairDoubleString_size. "
          "Expected an array of " "std::pair< double,std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::pair< double,std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__pairT_double_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorPairDoubleString_size. "
              "Expected an array of " "std::pair< double,std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorPairDoubleString_size. "
          "Expected an array of " "std::pair< double,std::wstring >");
      }
    }
    result = (unsigned int)((std::vector< std::pair< double,std::wstring > > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairDoubleString_empty) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
    std::vector< std::pair< double,std::wstring > > temp1 ;
    std::vector< std::pair< double,std::wstring > > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorPairDoubleString_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorPairDoubleString_empty. "
          "Expected an array of " "std::pair< double,std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::pair< double,std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__pairT_double_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorPairDoubleString_empty. "
              "Expected an array of " "std::pair< double,std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorPairDoubleString_empty. "
          "Expected an array of " "std::pair< double,std::wstring >");
      }
    }
    result = (bool)((std::vector< std::pair< double,std::wstring > > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairDoubleString_clear) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorPairDoubleString_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_clear" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairDoubleString_push) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
    std::pair< double,std::wstring > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorPairDoubleString_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_push" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__pairT_double_std__wstring_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPairDoubleString_push" "', argument " "2"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_push" "', argument " "2"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    arg2 = reinterpret_cast< std::pair< double,std::wstring > * >(argp2);
    (arg1)->push_back((std::pair< double,std::wstring > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairDoubleString_pop) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::pair< double,std::wstring > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorPairDoubleString_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_pop" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
    try {
      result = std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj((new std::pair< double,std::wstring >(static_cast< const std::pair< double,std::wstring >& >(result))), SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairDoubleString_get) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::pair< double,std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorPairDoubleString_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_get" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (std::pair< double,std::wstring > *) &std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairDoubleString_set) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
    int arg2 ;
    std::pair< double,std::wstring > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: VectorPairDoubleString_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_set" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_std__pairT_double_std__wstring_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairDoubleString_set" "', argument " "3"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_set" "', argument " "3"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    arg3 = reinterpret_cast< std::pair< double,std::wstring > * >(argp3);
    try {
      std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__set(arg1,arg2,(std::pair< double,std::wstring > const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_VectorPairDoubleString) {
  {
    std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_VectorPairDoubleString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorPairDoubleString" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PairStringString__SWIG_0) {
  {
    int argvi = 0;
    std::pair< std::wstring,std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PairStringString();");
    }
    result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PairStringString__SWIG_1) {
  {
    std::wstring arg1 ;
    std::wstring arg2 ;
    void *argp1 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::pair< std::wstring,std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_PairStringString(t,u);");
    }
    {
      res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_std__wstring,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairStringString" "', argument " "1"" of type '" "std::wstring""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairStringString" "', argument " "1"" of type '" "std::wstring""'");
      } else {
        arg1 = *(reinterpret_cast< std::wstring * >(argp1));
      }
    }
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__wstring,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PairStringString" "', argument " "2"" of type '" "std::wstring""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairStringString" "', argument " "2"" of type '" "std::wstring""'");
      } else {
        arg2 = *(reinterpret_cast< std::wstring * >(argp2));
      }
    }
    result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >(arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PairStringString__SWIG_2) {
  {
    std::pair< std::wstring,std::wstring > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    std::pair< std::wstring,std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PairStringString(p);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairStringString" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairStringString" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
    result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >((std::pair< std::wstring,std::wstring > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PairStringString) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__wstring, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__wstring, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PairStringString__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PairStringString__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PairStringString__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PairStringString'");
  XSRETURN(0);
}


XS(_wrap_PairStringString_first_set) {
  {
    std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PairStringString_first_set(self,first);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringString_first_set" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__wstring,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairStringString_first_set" "', argument " "2"" of type '" "std::wstring""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairStringString_first_set" "', argument " "2"" of type '" "std::wstring""'");
      } else {
        arg2 = *(reinterpret_cast< std::wstring * >(argp2));
      }
    }
    if (arg1) (arg1)->first = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PairStringString_first_get) {
  {
    std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PairStringString_first_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringString_first_get" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
    result =  ((arg1)->first);
    ST(argvi) = SWIG_NewPointerObj((new std::wstring(static_cast< const std::wstring& >(result))), SWIGTYPE_p_std__wstring, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PairStringString_second_set) {
  {
    std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PairStringString_second_set(self,second);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringString_second_set" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__wstring,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairStringString_second_set" "', argument " "2"" of type '" "std::wstring""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairStringString_second_set" "', argument " "2"" of type '" "std::wstring""'");
      } else {
        arg2 = *(reinterpret_cast< std::wstring * >(argp2));
      }
    }
    if (arg1) (arg1)->second = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PairStringString_second_get) {
  {
    std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PairStringString_second_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringString_second_get" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
    result =  ((arg1)->second);
    ST(argvi) = SWIG_NewPointerObj((new std::wstring(static_cast< const std::wstring& >(result))), SWIGTYPE_p_std__wstring, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_PairStringString) {
  {
    std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PairStringString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairStringString" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairStringString__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorPairStringString(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPairStringString" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairStringString__SWIG_1) {
  {
    int argvi = 0;
    std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_VectorPairStringString();");
    }
    result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairStringString__SWIG_2) {
  {
    unsigned int arg1 ;
    std::pair< std::wstring,std::wstring > *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_VectorPairStringString(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPairStringString" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorPairStringString" "', argument " "2"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPairStringString" "', argument " "2"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    arg2 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp2);
    result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >(arg1,(std::pair< std::wstring,std::wstring > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairStringString__SWIG_3) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = 0 ;
    std::vector< std::pair< std::wstring,std::wstring > > temp1 ;
    std::vector< std::pair< std::wstring,std::wstring > > *v1 ;
    int argvi = 0;
    std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_VectorPairStringString(std::vector< std::pair< std::wstring,std::wstring > > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_VectorPairStringString. "
          "Expected an array of " "std::pair< std::wstring,std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::pair< std::wstring,std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_VectorPairStringString. "
              "Expected an array of " "std::pair< std::wstring,std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_VectorPairStringString. "
          "Expected an array of " "std::pair< std::wstring,std::wstring >");
      }
    }
    result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >((std::vector< std::pair< std::wstring,std::wstring > > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_VectorPairStringString) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector<std::pair< std::wstring,std::wstring > >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::pair< std::wstring,std::wstring >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorPairStringString__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorPairStringString__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorPairStringString__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_VectorPairStringString__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_VectorPairStringString'");
  XSRETURN(0);
}


XS(_wrap_VectorPairStringString_size) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
    std::vector< std::pair< std::wstring,std::wstring > > temp1 ;
    std::vector< std::pair< std::wstring,std::wstring > > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorPairStringString_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorPairStringString_size. "
          "Expected an array of " "std::pair< std::wstring,std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::pair< std::wstring,std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorPairStringString_size. "
              "Expected an array of " "std::pair< std::wstring,std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorPairStringString_size. "
          "Expected an array of " "std::pair< std::wstring,std::wstring >");
      }
    }
    result = (unsigned int)((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairStringString_empty) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
    std::vector< std::pair< std::wstring,std::wstring > > temp1 ;
    std::vector< std::pair< std::wstring,std::wstring > > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorPairStringString_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of VectorPairStringString_empty. "
          "Expected an array of " "std::pair< std::wstring,std::wstring >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::pair< std::wstring,std::wstring >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "VectorPairStringString_empty. "
              "Expected an array of " "std::pair< std::wstring,std::wstring >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of VectorPairStringString_empty. "
          "Expected an array of " "std::pair< std::wstring,std::wstring >");
      }
    }
    result = (bool)((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairStringString_clear) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorPairStringString_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_clear" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairStringString_push) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
    std::pair< std::wstring,std::wstring > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorPairStringString_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_push" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPairStringString_push" "', argument " "2"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_push" "', argument " "2"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    arg2 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp2);
    (arg1)->push_back((std::pair< std::wstring,std::wstring > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairStringString_pop) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::pair< std::wstring,std::wstring > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VectorPairStringString_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_pop" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
    try {
      result = std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj((new std::pair< std::wstring,std::wstring >(static_cast< const std::pair< std::wstring,std::wstring >& >(result))), SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairStringString_get) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::pair< std::wstring,std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VectorPairStringString_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_get" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (std::pair< std::wstring,std::wstring > *) &std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__get(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VectorPairStringString_set) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
    int arg2 ;
    std::pair< std::wstring,std::wstring > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: VectorPairStringString_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_set" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairStringString_set" "', argument " "3"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_set" "', argument " "3"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    arg3 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp3);
    try {
      std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__set(arg1,arg2,(std::pair< std::wstring,std::wstring > const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_VectorPairStringString) {
  {
    std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_VectorPairStringString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorPairStringString" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorNode__SWIG_0) {
  {
    int argvi = 0;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TreeIteratorNode();");
    }
    result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorNode__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeIteratorNode(freeling::tree< freeling::node > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorNode__SWIG_2) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeIteratorNode(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeIteratorNode" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeIteratorNode" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > >((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorNode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorNode__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_TreeIteratorNode'");
  XSRETURN(0);
}


XS(_wrap_delete_TreeIteratorNode) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TreeIteratorNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeIteratorNode" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode___ref__) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode___ref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode___ref__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (freeling::tree< freeling::node > *) &((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *)arg1)->operator *();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode___deref__) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode___deref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode___deref__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (freeling::tree< freeling::node > *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *)arg1)->operator ->();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode___eq__) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorNode___eq__(self,freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode___eq__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeIteratorNode___eq__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeIteratorNode___eq__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp2);
    result = (bool)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *)arg1)->operator ==((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode___ne__) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorNode___ne__(self,freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode___ne__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeIteratorNode___ne__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeIteratorNode___ne__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp2);
    result = (bool)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *)arg1)->operator !=((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_info_get) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::node *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_info_get" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (freeling::node *)& ((*arg1)->info);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_num_children) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_num_children(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_num_children" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (unsigned int)(*arg1)->num_children();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_nth_child) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorNode_nth_child(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_nth_child" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeIteratorNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (*arg1)->nth_child(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_get_parent) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_get_parent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_get_parent" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (*arg1)->get_parent();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::iterator(static_cast< const freeling::tree< freeling::node >::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_nth_child_ref) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorNode_nth_child_ref(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeIteratorNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (freeling::tree< freeling::node > *) &(*arg1)->nth_child_ref(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_empty) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_empty" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (bool)(*arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_sibling_begin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_sibling_begin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (*arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_sibling_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNode_sibling_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNode_sibling_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNode_sibling_end__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_sibling_end" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (*arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_sibling_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNode_sibling_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNode_sibling_end'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNode_sibling_rbegin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (*arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_sibling_rbegin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNode_sibling_rbegin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNode_sibling_rbegin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNode_sibling_rend__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_sibling_rend" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (*arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_sibling_rend) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNode_sibling_rend__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNode_sibling_rend'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNode_begin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_begin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (*arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNode_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNode_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNode_end__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNode_end" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > * >(argp1);
    result = (*arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNode_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNode_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNode_end'");
  XSRETURN(0);
}


XS(_wrap_new_GenericIteratorNode__SWIG_0) {
  {
    int argvi = 0;
    freeling::generic_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_GenericIteratorNode();");
    }
    result = (freeling::generic_iterator< freeling::node > *)new freeling::generic_iterator< freeling::node >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericIteratorNode__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericIteratorNode(freeling::tree< freeling::node > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::generic_iterator< freeling::node > *)new freeling::generic_iterator< freeling::node >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericIteratorNode__SWIG_2) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericIteratorNode(freeling::generic_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericIteratorNode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GenericIteratorNode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (freeling::generic_iterator< freeling::node > *)new freeling::generic_iterator< freeling::node >((freeling::generic_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericIteratorNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericIteratorNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericIteratorNode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericIteratorNode__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_GenericIteratorNode'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorNode___ref__) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode___ref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode___ref__" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (freeling::tree< freeling::node > *) &((freeling::generic_iterator< freeling::node > const *)arg1)->operator *();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode___deref__) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode___deref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode___deref__" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (freeling::tree< freeling::node > *)((freeling::generic_iterator< freeling::node > const *)arg1)->operator ->();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GenericIteratorNode) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GenericIteratorNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GenericIteratorNode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_info_set) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    freeling::node *arg2 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorNode_info_set(self,info);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_info_set" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorNode_info_set" "', argument " "2"" of type '" "freeling::node *""'"); 
    }
    arg2 = reinterpret_cast< freeling::node * >(argp2);
    if (arg1) (*arg1)->info = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_info_get) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::node *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_info_get" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (freeling::node *)& ((*arg1)->info);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_operator_assignment) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    freeling::tree< freeling::node > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorNode_operator_assignment(self,freeling::tree< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_operator_assignment" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorNode_operator_assignment" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericIteratorNode_operator_assignment" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
    result = (freeling::tree< freeling::node > *) &(*arg1)->operator =((freeling::tree< freeling::node > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_num_children) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_num_children(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_num_children" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (unsigned int)(*arg1)->num_children();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_nth_child) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorNode_nth_child(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_nth_child" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericIteratorNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (*arg1)->nth_child(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_get_parent) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_get_parent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_get_parent" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->get_parent();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::iterator(static_cast< const freeling::tree< freeling::node >::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_nth_child_ref) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorNode_nth_child_ref(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_nth_child_ref" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericIteratorNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (freeling::tree< freeling::node > *) &(*arg1)->nth_child_ref(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_get_info) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::node *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_get_info(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_get_info" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (freeling::node *) &(*arg1)->get_info();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_append_child) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    freeling::tree< freeling::node > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorNode_append_child(self,freeling::tree< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_append_child" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorNode_append_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericIteratorNode_append_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
    (*arg1)->append_child((freeling::tree< freeling::node > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_hang_child__SWIG_0) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    freeling::tree< freeling::node > *arg2 = 0 ;
    bool arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: GenericIteratorNode_hang_child(self,freeling::tree< freeling::node > &,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenericIteratorNode_hang_child" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (*arg1)->hang_child(*arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_hang_child__SWIG_1) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    freeling::tree< freeling::node > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorNode_hang_child(self,freeling::tree< freeling::node > &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
    (*arg1)->hang_child(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_hang_child) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_hang_child__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_hang_child__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorNode_hang_child'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorNode_clear) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_clear" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    (*arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_empty) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_empty" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (bool)(*arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_begin__SWIG_0) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_sibling_begin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_begin__SWIG_1) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_sibling_begin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorNode_sibling_begin'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorNode_sibling_end__SWIG_0) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_sibling_end" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_end__SWIG_1) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_sibling_end" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorNode_sibling_end'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorNode_sibling_rbegin__SWIG_0) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_rbegin__SWIG_1) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_rbegin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_rbegin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_rbegin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorNode_sibling_rbegin'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorNode_sibling_rend__SWIG_0) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_sibling_rend" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_rend__SWIG_1) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_sibling_rend" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_sibling_rend) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_rend__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_rend__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorNode_sibling_rend'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorNode_begin__SWIG_0) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_begin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::preorder_iterator(static_cast< const freeling::tree< freeling::node >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_begin__SWIG_1) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_begin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorNode_begin'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorNode_end__SWIG_0) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_end" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::preorder_iterator(static_cast< const freeling::tree< freeling::node >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_end__SWIG_1) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorNode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorNode_end" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (*arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorNode_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorNode_end'");
  XSRETURN(0);
}


XS(_wrap_new_PreorderIteratorNode__SWIG_0) {
  {
    int argvi = 0;
    freeling::preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PreorderIteratorNode();");
    }
    result = (freeling::preorder_iterator< freeling::node > *)new freeling::preorder_iterator< freeling::node >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PreorderIteratorNode__SWIG_1) {
  {
    freeling::preorder_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PreorderIteratorNode(freeling::preorder_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PreorderIteratorNode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PreorderIteratorNode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::node > * >(argp1);
    result = (freeling::preorder_iterator< freeling::node > *)new freeling::preorder_iterator< freeling::node >((freeling::preorder_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PreorderIteratorNode__SWIG_2) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PreorderIteratorNode(freeling::tree< freeling::node > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::preorder_iterator< freeling::node > *)new freeling::preorder_iterator< freeling::node >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PreorderIteratorNode__SWIG_3) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PreorderIteratorNode(freeling::sibling_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PreorderIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PreorderIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::preorder_iterator< freeling::node > *)new freeling::preorder_iterator< freeling::node >((freeling::sibling_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PreorderIteratorNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PreorderIteratorNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PreorderIteratorNode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PreorderIteratorNode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PreorderIteratorNode__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PreorderIteratorNode'");
  XSRETURN(0);
}


XS(_wrap_delete_PreorderIteratorNode) {
  {
    freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PreorderIteratorNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PreorderIteratorNode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::node > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorNode___plusplus____SWIG_0) {
  {
    freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PreorderIteratorNode___plusplus__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreorderIteratorNode___plusplus__" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::node > * >(argp1);
    result = (freeling::preorder_iterator< freeling::node > *) &(arg1)->operator ++();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorNode___minmin____SWIG_0) {
  {
    freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PreorderIteratorNode___minmin__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreorderIteratorNode___minmin__" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::node > * >(argp1);
    result = (freeling::preorder_iterator< freeling::node > *) &(arg1)->operator --();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorNode___plusplus____SWIG_1) {
  {
    freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::node > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PreorderIteratorNode___plusplus__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreorderIteratorNode___plusplus__" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PreorderIteratorNode___plusplus__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator ++(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::preorder_iterator< freeling::node >(static_cast< const freeling::preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorNode___plusplus__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PreorderIteratorNode___plusplus____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PreorderIteratorNode___plusplus____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'PreorderIteratorNode___plusplus__'");
  XSRETURN(0);
}


XS(_wrap_PreorderIteratorNode___minmin____SWIG_1) {
  {
    freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::node > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PreorderIteratorNode___minmin__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreorderIteratorNode___minmin__" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PreorderIteratorNode___minmin__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator --(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::preorder_iterator< freeling::node >(static_cast< const freeling::preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorNode___minmin__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PreorderIteratorNode___minmin____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PreorderIteratorNode___minmin____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'PreorderIteratorNode___minmin__'");
  XSRETURN(0);
}


XS(_wrap_new_SiblingIteratorNode__SWIG_0) {
  {
    int argvi = 0;
    freeling::sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SiblingIteratorNode();");
    }
    result = (freeling::sibling_iterator< freeling::node > *)new freeling::sibling_iterator< freeling::node >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_SiblingIteratorNode__SWIG_1) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SiblingIteratorNode(freeling::sibling_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SiblingIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SiblingIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::sibling_iterator< freeling::node > *)new freeling::sibling_iterator< freeling::node >((freeling::sibling_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SiblingIteratorNode__SWIG_2) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SiblingIteratorNode(freeling::tree< freeling::node > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::sibling_iterator< freeling::node > *)new freeling::sibling_iterator< freeling::node >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SiblingIteratorNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SiblingIteratorNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SiblingIteratorNode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SiblingIteratorNode__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_SiblingIteratorNode'");
  XSRETURN(0);
}


XS(_wrap_delete_SiblingIteratorNode) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SiblingIteratorNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SiblingIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorNode___plusplus____SWIG_0) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SiblingIteratorNode___plusplus__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiblingIteratorNode___plusplus__" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::sibling_iterator< freeling::node > *) &(arg1)->operator ++();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorNode___minmin____SWIG_0) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SiblingIteratorNode___minmin__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiblingIteratorNode___minmin__" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::sibling_iterator< freeling::node > *) &(arg1)->operator --();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorNode___plusplus____SWIG_1) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::node > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SiblingIteratorNode___plusplus__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiblingIteratorNode___plusplus__" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SiblingIteratorNode___plusplus__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator ++(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sibling_iterator< freeling::node >(static_cast< const freeling::sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorNode___plusplus__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_SiblingIteratorNode___plusplus____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_SiblingIteratorNode___plusplus____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'SiblingIteratorNode___plusplus__'");
  XSRETURN(0);
}


XS(_wrap_SiblingIteratorNode___minmin____SWIG_1) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::node > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SiblingIteratorNode___minmin__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiblingIteratorNode___minmin__" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SiblingIteratorNode___minmin__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator --(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sibling_iterator< freeling::node >(static_cast< const freeling::sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorNode___minmin__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_SiblingIteratorNode___minmin____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_SiblingIteratorNode___minmin____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'SiblingIteratorNode___minmin__'");
  XSRETURN(0);
}


XS(_wrap_new_TreeIteratorDepnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TreeIteratorDepnode();");
    }
    result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorDepnode__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeIteratorDepnode(freeling::tree< freeling::depnode > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorDepnode__SWIG_2) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeIteratorDepnode(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > >((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorDepnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorDepnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorDepnode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorDepnode__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_TreeIteratorDepnode'");
  XSRETURN(0);
}


XS(_wrap_delete_TreeIteratorDepnode) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TreeIteratorDepnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode___ref__) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode___ref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode___ref__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (freeling::tree< freeling::depnode > *) &((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *)arg1)->operator *();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode___deref__) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode___deref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode___deref__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (freeling::tree< freeling::depnode > *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *)arg1)->operator ->();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode___eq__) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorDepnode___eq__(self,freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode___eq__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp2);
    result = (bool)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *)arg1)->operator ==((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode___ne__) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorDepnode___ne__(self,freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode___ne__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp2);
    result = (bool)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *)arg1)->operator !=((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_info_get) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_info_get" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (freeling::depnode *)& ((*arg1)->info);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_num_children) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_num_children(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_num_children" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (unsigned int)(*arg1)->num_children();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_nth_child) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorDepnode_nth_child(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_nth_child" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeIteratorDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (*arg1)->nth_child(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_get_parent) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_get_parent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_get_parent" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (*arg1)->get_parent();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::iterator(static_cast< const freeling::tree< freeling::depnode >::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_nth_child_ref) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorDepnode_nth_child_ref(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeIteratorDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (freeling::tree< freeling::depnode > *) &(*arg1)->nth_child_ref(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_empty) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_empty" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (bool)(*arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_sibling_begin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (*arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_sibling_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnode_sibling_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnode_sibling_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnode_sibling_end__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_sibling_end" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (*arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_sibling_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnode_sibling_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnode_sibling_end'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnode_sibling_rbegin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (*arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_sibling_rbegin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnode_sibling_rbegin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnode_sibling_rbegin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnode_sibling_rend__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (*arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_sibling_rend) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnode_sibling_rend__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnode_sibling_rend'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnode_begin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_begin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (*arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnode_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnode_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnode_end__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnode_end" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > * >(argp1);
    result = (*arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnode_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnode_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnode_end'");
  XSRETURN(0);
}


XS(_wrap_new_GenericIteratorDepnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::generic_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_GenericIteratorDepnode();");
    }
    result = (freeling::generic_iterator< freeling::depnode > *)new freeling::generic_iterator< freeling::depnode >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericIteratorDepnode__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericIteratorDepnode(freeling::tree< freeling::depnode > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::generic_iterator< freeling::depnode > *)new freeling::generic_iterator< freeling::depnode >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericIteratorDepnode__SWIG_2) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericIteratorDepnode(freeling::generic_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericIteratorDepnode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GenericIteratorDepnode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (freeling::generic_iterator< freeling::depnode > *)new freeling::generic_iterator< freeling::depnode >((freeling::generic_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericIteratorDepnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericIteratorDepnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericIteratorDepnode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericIteratorDepnode__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_GenericIteratorDepnode'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorDepnode___ref__) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode___ref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode___ref__" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (freeling::tree< freeling::depnode > *) &((freeling::generic_iterator< freeling::depnode > const *)arg1)->operator *();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode___deref__) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode___deref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode___deref__" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (freeling::tree< freeling::depnode > *)((freeling::generic_iterator< freeling::depnode > const *)arg1)->operator ->();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GenericIteratorDepnode) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GenericIteratorDepnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GenericIteratorDepnode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_info_set) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    freeling::depnode *arg2 = (freeling::depnode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorDepnode_info_set(self,info);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_info_set" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_freeling__depnode, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorDepnode_info_set" "', argument " "2"" of type '" "freeling::depnode *""'"); 
    }
    arg2 = reinterpret_cast< freeling::depnode * >(argp2);
    if (arg1) (*arg1)->info = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_info_get) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_info_get" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (freeling::depnode *)& ((*arg1)->info);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_operator_assignment) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    freeling::tree< freeling::depnode > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorDepnode_operator_assignment(self,freeling::tree< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_operator_assignment" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorDepnode_operator_assignment" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericIteratorDepnode_operator_assignment" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
    result = (freeling::tree< freeling::depnode > *) &(*arg1)->operator =((freeling::tree< freeling::depnode > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_num_children) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_num_children(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_num_children" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (unsigned int)(*arg1)->num_children();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_nth_child) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorDepnode_nth_child(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_nth_child" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericIteratorDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (*arg1)->nth_child(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_get_parent) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_get_parent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_get_parent" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->get_parent();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::iterator(static_cast< const freeling::tree< freeling::depnode >::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_nth_child_ref) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorDepnode_nth_child_ref(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericIteratorDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (freeling::tree< freeling::depnode > *) &(*arg1)->nth_child_ref(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_get_info) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_get_info(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_get_info" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (freeling::depnode *) &(*arg1)->get_info();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_append_child) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    freeling::tree< freeling::depnode > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorDepnode_append_child(self,freeling::tree< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_append_child" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorDepnode_append_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericIteratorDepnode_append_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
    (*arg1)->append_child((freeling::tree< freeling::depnode > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_hang_child__SWIG_0) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    freeling::tree< freeling::depnode > *arg2 = 0 ;
    bool arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: GenericIteratorDepnode_hang_child(self,freeling::tree< freeling::depnode > &,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenericIteratorDepnode_hang_child" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (*arg1)->hang_child(*arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_hang_child__SWIG_1) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    freeling::tree< freeling::depnode > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GenericIteratorDepnode_hang_child(self,freeling::tree< freeling::depnode > &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
    (*arg1)->hang_child(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_hang_child) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_hang_child__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_hang_child__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorDepnode_hang_child'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorDepnode_clear) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_clear" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    (*arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_empty) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_empty" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (bool)(*arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_begin__SWIG_0) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_begin__SWIG_1) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorDepnode_sibling_begin'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorDepnode_sibling_end__SWIG_0) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_sibling_end" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_end__SWIG_1) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_sibling_end" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorDepnode_sibling_end'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorDepnode_sibling_rbegin__SWIG_0) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_rbegin__SWIG_1) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_rbegin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_rbegin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_rbegin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorDepnode_sibling_rbegin'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorDepnode_sibling_rend__SWIG_0) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_rend__SWIG_1) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_sibling_rend) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_rend__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_rend__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorDepnode_sibling_rend'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorDepnode_begin__SWIG_0) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_begin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_begin__SWIG_1) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_begin" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorDepnode_begin'");
  XSRETURN(0);
}


XS(_wrap_GenericIteratorDepnode_end__SWIG_0) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_end" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_end__SWIG_1) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GenericIteratorDepnode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericIteratorDepnode_end" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (*arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GenericIteratorDepnode_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'GenericIteratorDepnode_end'");
  XSRETURN(0);
}


XS(_wrap_new_PreorderIteratorDepnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PreorderIteratorDepnode();");
    }
    result = (freeling::preorder_iterator< freeling::depnode > *)new freeling::preorder_iterator< freeling::depnode >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PreorderIteratorDepnode__SWIG_1) {
  {
    freeling::preorder_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PreorderIteratorDepnode(freeling::preorder_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::depnode > * >(argp1);
    result = (freeling::preorder_iterator< freeling::depnode > *)new freeling::preorder_iterator< freeling::depnode >((freeling::preorder_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PreorderIteratorDepnode__SWIG_2) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PreorderIteratorDepnode(freeling::tree< freeling::depnode > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::preorder_iterator< freeling::depnode > *)new freeling::preorder_iterator< freeling::depnode >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PreorderIteratorDepnode__SWIG_3) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PreorderIteratorDepnode(freeling::sibling_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::preorder_iterator< freeling::depnode > *)new freeling::preorder_iterator< freeling::depnode >((freeling::sibling_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PreorderIteratorDepnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PreorderIteratorDepnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PreorderIteratorDepnode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PreorderIteratorDepnode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PreorderIteratorDepnode__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PreorderIteratorDepnode'");
  XSRETURN(0);
}


XS(_wrap_delete_PreorderIteratorDepnode) {
  {
    freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PreorderIteratorDepnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::depnode > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorDepnode___plusplus____SWIG_0) {
  {
    freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PreorderIteratorDepnode___plusplus__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreorderIteratorDepnode___plusplus__" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::depnode > * >(argp1);
    result = (freeling::preorder_iterator< freeling::depnode > *) &(arg1)->operator ++();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorDepnode___minmin____SWIG_0) {
  {
    freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PreorderIteratorDepnode___minmin__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreorderIteratorDepnode___minmin__" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::depnode > * >(argp1);
    result = (freeling::preorder_iterator< freeling::depnode > *) &(arg1)->operator --();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorDepnode___plusplus____SWIG_1) {
  {
    freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::depnode > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PreorderIteratorDepnode___plusplus__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreorderIteratorDepnode___plusplus__" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PreorderIteratorDepnode___plusplus__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator ++(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::preorder_iterator< freeling::depnode >(static_cast< const freeling::preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorDepnode___plusplus__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PreorderIteratorDepnode___plusplus____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PreorderIteratorDepnode___plusplus____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'PreorderIteratorDepnode___plusplus__'");
  XSRETURN(0);
}


XS(_wrap_PreorderIteratorDepnode___minmin____SWIG_1) {
  {
    freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::preorder_iterator< freeling::depnode > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PreorderIteratorDepnode___minmin__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreorderIteratorDepnode___minmin__" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PreorderIteratorDepnode___minmin__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator --(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::preorder_iterator< freeling::depnode >(static_cast< const freeling::preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PreorderIteratorDepnode___minmin__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PreorderIteratorDepnode___minmin____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PreorderIteratorDepnode___minmin____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'PreorderIteratorDepnode___minmin__'");
  XSRETURN(0);
}


XS(_wrap_new_SiblingIteratorDepnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SiblingIteratorDepnode();");
    }
    result = (freeling::sibling_iterator< freeling::depnode > *)new freeling::sibling_iterator< freeling::depnode >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_SiblingIteratorDepnode__SWIG_1) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SiblingIteratorDepnode(freeling::sibling_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::sibling_iterator< freeling::depnode > *)new freeling::sibling_iterator< freeling::depnode >((freeling::sibling_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SiblingIteratorDepnode__SWIG_2) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SiblingIteratorDepnode(freeling::tree< freeling::depnode > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::sibling_iterator< freeling::depnode > *)new freeling::sibling_iterator< freeling::depnode >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SiblingIteratorDepnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SiblingIteratorDepnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SiblingIteratorDepnode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SiblingIteratorDepnode__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_SiblingIteratorDepnode'");
  XSRETURN(0);
}


XS(_wrap_delete_SiblingIteratorDepnode) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SiblingIteratorDepnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorDepnode___plusplus____SWIG_0) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SiblingIteratorDepnode___plusplus__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiblingIteratorDepnode___plusplus__" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::sibling_iterator< freeling::depnode > *) &(arg1)->operator ++();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorDepnode___minmin____SWIG_0) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SiblingIteratorDepnode___minmin__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiblingIteratorDepnode___minmin__" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::sibling_iterator< freeling::depnode > *) &(arg1)->operator --();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorDepnode___plusplus____SWIG_1) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::depnode > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SiblingIteratorDepnode___plusplus__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiblingIteratorDepnode___plusplus__" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SiblingIteratorDepnode___plusplus__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator ++(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sibling_iterator< freeling::depnode >(static_cast< const freeling::sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorDepnode___plusplus__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_SiblingIteratorDepnode___plusplus____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_SiblingIteratorDepnode___plusplus____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'SiblingIteratorDepnode___plusplus__'");
  XSRETURN(0);
}


XS(_wrap_SiblingIteratorDepnode___minmin____SWIG_1) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::sibling_iterator< freeling::depnode > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SiblingIteratorDepnode___minmin__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiblingIteratorDepnode___minmin__" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SiblingIteratorDepnode___minmin__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator --(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sibling_iterator< freeling::depnode >(static_cast< const freeling::sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SiblingIteratorDepnode___minmin__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_SiblingIteratorDepnode___minmin____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_SiblingIteratorDepnode___minmin____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'SiblingIteratorDepnode___minmin__'");
  XSRETURN(0);
}


XS(_wrap_new_TreeIteratorNodeConst__SWIG_0) {
  {
    int argvi = 0;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TreeIteratorNodeConst();");
    }
    result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorNodeConst__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeIteratorNodeConst(freeling::tree< freeling::node > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeIteratorNodeConst" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorNodeConst__SWIG_2) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeIteratorNodeConst(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeIteratorNodeConst" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeIteratorNodeConst" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const >((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorNodeConst) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorNodeConst__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorNodeConst__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorNodeConst__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_TreeIteratorNodeConst'");
  XSRETURN(0);
}


XS(_wrap_delete_TreeIteratorNodeConst) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TreeIteratorNodeConst(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeIteratorNodeConst" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst___ref__) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst___ref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst___ref__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (freeling::tree< freeling::node > *) &((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *)arg1)->operator *();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst___deref__) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst___deref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst___deref__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (freeling::tree< freeling::node > *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *)arg1)->operator ->();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst___eq__) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorNodeConst___eq__(self,freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst___eq__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeIteratorNodeConst___eq__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeIteratorNodeConst___eq__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp2);
    result = (bool)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *)arg1)->operator ==((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst___ne__) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorNodeConst___ne__(self,freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst___ne__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeIteratorNodeConst___ne__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeIteratorNodeConst___ne__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp2);
    result = (bool)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *)arg1)->operator !=((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_info_get) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::node *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_info_get" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (freeling::node *)& ((*arg1)->info);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_num_children) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_num_children(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_num_children" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (unsigned int)(*arg1)->num_children();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_nth_child) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_nth_child(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_nth_child" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeIteratorNodeConst_nth_child" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (*arg1)->nth_child(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_get_parent) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_get_parent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_get_parent" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (*arg1)->get_parent();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::iterator(static_cast< const freeling::tree< freeling::node >::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_nth_child_ref) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_nth_child_ref(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_nth_child_ref" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeIteratorNodeConst_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (freeling::tree< freeling::node > *) &(*arg1)->nth_child_ref(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_empty) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_empty" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (bool)(*arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_sibling_begin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_sibling_begin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (*arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_sibling_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNodeConst_sibling_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNodeConst_sibling_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNodeConst_sibling_end__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_sibling_end" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (*arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_sibling_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNodeConst_sibling_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNodeConst_sibling_end'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNodeConst_sibling_rbegin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (*arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_sibling_rbegin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_rbegin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNodeConst_sibling_rbegin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNodeConst_sibling_rbegin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNodeConst_sibling_rend__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_sibling_rend" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (*arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_sibling_rend) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_sibling_rend__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNodeConst_sibling_rend__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNodeConst_sibling_rend'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNodeConst_begin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_begin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (*arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNodeConst_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNodeConst_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorNodeConst_end__SWIG_1) {
  {
    freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorNodeConst_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorNodeConst_end" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > * >(argp1);
    result = (*arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorNodeConst_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorNode_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorNodeConst_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorNodeConst_end'");
  XSRETURN(0);
}


XS(_wrap_new_GenericConstIteratorNode__SWIG_0) {
  {
    int argvi = 0;
    freeling::generic_const_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_GenericConstIteratorNode();");
    }
    result = (freeling::generic_const_iterator< freeling::node > *)new freeling::generic_const_iterator< freeling::node >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericConstIteratorNode__SWIG_1) {
  {
    freeling::generic_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_const_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericConstIteratorNode(freeling::generic_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericConstIteratorNode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GenericConstIteratorNode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::node > * >(argp1);
    result = (freeling::generic_const_iterator< freeling::node > *)new freeling::generic_const_iterator< freeling::node >((freeling::generic_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericConstIteratorNode__SWIG_2) {
  {
    freeling::generic_const_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_const_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericConstIteratorNode(freeling::generic_const_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericConstIteratorNode" "', argument " "1"" of type '" "freeling::generic_const_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GenericConstIteratorNode" "', argument " "1"" of type '" "freeling::generic_const_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_const_iterator< freeling::node > * >(argp1);
    result = (freeling::generic_const_iterator< freeling::node > *)new freeling::generic_const_iterator< freeling::node >((freeling::generic_const_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericConstIteratorNode__SWIG_3) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_const_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericConstIteratorNode(freeling::tree< freeling::node > const *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericConstIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::generic_const_iterator< freeling::node > *)new freeling::generic_const_iterator< freeling::node >((freeling::tree< freeling::node > const *)arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericConstIteratorNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericConstIteratorNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericConstIteratorNode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericConstIteratorNode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericConstIteratorNode__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_GenericConstIteratorNode'");
  XSRETURN(0);
}


XS(_wrap_delete_GenericConstIteratorNode) {
  {
    freeling::generic_const_iterator< freeling::node > *arg1 = (freeling::generic_const_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GenericConstIteratorNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GenericConstIteratorNode" "', argument " "1"" of type '" "freeling::generic_const_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_const_iterator< freeling::node > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorNode__SWIG_0) {
  {
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorNode();");
    }
    result = (freeling::const_preorder_iterator< freeling::node > *)new freeling::const_preorder_iterator< freeling::node >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorNode__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorNode(freeling::tree< freeling::node > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::node > *)new freeling::const_preorder_iterator< freeling::node >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorNode__SWIG_2) {
  {
    freeling::const_preorder_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorNode(freeling::const_preorder_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::node > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::node > *)new freeling::const_preorder_iterator< freeling::node >((freeling::const_preorder_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorNode__SWIG_3) {
  {
    freeling::preorder_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorNode(freeling::preorder_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::node > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::node > *)new freeling::const_preorder_iterator< freeling::node >((freeling::preorder_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorNode__SWIG_4) {
  {
    freeling::const_sibling_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorNode(freeling::const_sibling_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::node > *)new freeling::const_preorder_iterator< freeling::node >((freeling::const_sibling_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorNode__SWIG_5) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorNode(freeling::sibling_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::node > *)new freeling::const_preorder_iterator< freeling::node >((freeling::sibling_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorNode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorNode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorNode__SWIG_3); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorNode__SWIG_4); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorNode__SWIG_5); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ConstPreorderIteratorNode'");
  XSRETURN(0);
}


XS(_wrap_delete_ConstPreorderIteratorNode) {
  {
    freeling::const_preorder_iterator< freeling::node > *arg1 = (freeling::const_preorder_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ConstPreorderIteratorNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::node > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorNode___plusplus____SWIG_0) {
  {
    freeling::const_preorder_iterator< freeling::node > *arg1 = (freeling::const_preorder_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstPreorderIteratorNode___plusplus__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstPreorderIteratorNode___plusplus__" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::node > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::node > *) &(arg1)->operator ++();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorNode___minmin____SWIG_0) {
  {
    freeling::const_preorder_iterator< freeling::node > *arg1 = (freeling::const_preorder_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstPreorderIteratorNode___minmin__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstPreorderIteratorNode___minmin__" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::node > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::node > *) &(arg1)->operator --();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorNode___plusplus____SWIG_1) {
  {
    freeling::const_preorder_iterator< freeling::node > *arg1 = (freeling::const_preorder_iterator< freeling::node > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstPreorderIteratorNode___plusplus__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstPreorderIteratorNode___plusplus__" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstPreorderIteratorNode___plusplus__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator ++(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::const_preorder_iterator< freeling::node >(static_cast< const freeling::const_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorNode___plusplus__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstPreorderIteratorNode___plusplus____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstPreorderIteratorNode___plusplus____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ConstPreorderIteratorNode___plusplus__'");
  XSRETURN(0);
}


XS(_wrap_ConstPreorderIteratorNode___minmin____SWIG_1) {
  {
    freeling::const_preorder_iterator< freeling::node > *arg1 = (freeling::const_preorder_iterator< freeling::node > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::node > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstPreorderIteratorNode___minmin__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstPreorderIteratorNode___minmin__" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstPreorderIteratorNode___minmin__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator --(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::const_preorder_iterator< freeling::node >(static_cast< const freeling::const_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorNode___minmin__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstPreorderIteratorNode___minmin____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstPreorderIteratorNode___minmin____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ConstPreorderIteratorNode___minmin__'");
  XSRETURN(0);
}


XS(_wrap_new_ConstSiblingIteratorNode__SWIG_0) {
  {
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ConstSiblingIteratorNode();");
    }
    result = (freeling::const_sibling_iterator< freeling::node > *)new freeling::const_sibling_iterator< freeling::node >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstSiblingIteratorNode__SWIG_1) {
  {
    freeling::const_sibling_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstSiblingIteratorNode(freeling::const_sibling_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::node > *)new freeling::const_sibling_iterator< freeling::node >((freeling::const_sibling_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstSiblingIteratorNode__SWIG_2) {
  {
    freeling::sibling_iterator< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstSiblingIteratorNode(freeling::sibling_iterator< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::node > *)new freeling::const_sibling_iterator< freeling::node >((freeling::sibling_iterator< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstSiblingIteratorNode__SWIG_3) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstSiblingIteratorNode(freeling::tree< freeling::node > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::node > *)new freeling::const_sibling_iterator< freeling::node >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstSiblingIteratorNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstSiblingIteratorNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstSiblingIteratorNode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstSiblingIteratorNode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstSiblingIteratorNode__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ConstSiblingIteratorNode'");
  XSRETURN(0);
}


XS(_wrap_delete_ConstSiblingIteratorNode) {
  {
    freeling::const_sibling_iterator< freeling::node > *arg1 = (freeling::const_sibling_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ConstSiblingIteratorNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::node > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorNode___plusplus____SWIG_0) {
  {
    freeling::const_sibling_iterator< freeling::node > *arg1 = (freeling::const_sibling_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstSiblingIteratorNode___plusplus__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstSiblingIteratorNode___plusplus__" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::node > *) &(arg1)->operator ++();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorNode___minmin____SWIG_0) {
  {
    freeling::const_sibling_iterator< freeling::node > *arg1 = (freeling::const_sibling_iterator< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstSiblingIteratorNode___minmin__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstSiblingIteratorNode___minmin__" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::node > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::node > *) &(arg1)->operator --();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorNode___plusplus____SWIG_1) {
  {
    freeling::const_sibling_iterator< freeling::node > *arg1 = (freeling::const_sibling_iterator< freeling::node > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::node > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstSiblingIteratorNode___plusplus__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstSiblingIteratorNode___plusplus__" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstSiblingIteratorNode___plusplus__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator ++(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::const_sibling_iterator< freeling::node >(static_cast< const freeling::const_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorNode___plusplus__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstSiblingIteratorNode___plusplus____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstSiblingIteratorNode___plusplus____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ConstSiblingIteratorNode___plusplus__'");
  XSRETURN(0);
}


XS(_wrap_ConstSiblingIteratorNode___minmin____SWIG_1) {
  {
    freeling::const_sibling_iterator< freeling::node > *arg1 = (freeling::const_sibling_iterator< freeling::node > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::node > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstSiblingIteratorNode___minmin__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstSiblingIteratorNode___minmin__" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstSiblingIteratorNode___minmin__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator --(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::const_sibling_iterator< freeling::node >(static_cast< const freeling::const_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorNode___minmin__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstSiblingIteratorNode___minmin____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstSiblingIteratorNode___minmin____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ConstSiblingIteratorNode___minmin__'");
  XSRETURN(0);
}


XS(_wrap_new_TreeIteratorDepnodeConst__SWIG_0) {
  {
    int argvi = 0;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TreeIteratorDepnodeConst();");
    }
    result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorDepnodeConst__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeIteratorDepnodeConst(freeling::tree< freeling::depnode > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeIteratorDepnodeConst" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorDepnodeConst__SWIG_2) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeIteratorDepnodeConst(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeIteratorDepnodeConst" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeIteratorDepnodeConst" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const >((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeIteratorDepnodeConst) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorDepnodeConst__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorDepnodeConst__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeIteratorDepnodeConst__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_TreeIteratorDepnodeConst'");
  XSRETURN(0);
}


XS(_wrap_delete_TreeIteratorDepnodeConst) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TreeIteratorDepnodeConst(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeIteratorDepnodeConst" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst___ref__) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst___ref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst___ref__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (freeling::tree< freeling::depnode > *) &((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *)arg1)->operator *();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst___deref__) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst___deref__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst___deref__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (freeling::tree< freeling::depnode > *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *)arg1)->operator ->();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst___eq__) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst___eq__(self,freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst___eq__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeIteratorDepnodeConst___eq__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeIteratorDepnodeConst___eq__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp2);
    result = (bool)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *)arg1)->operator ==((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst___ne__) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst___ne__(self,freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst___ne__" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeIteratorDepnodeConst___ne__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeIteratorDepnodeConst___ne__" "', argument " "2"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp2);
    result = (bool)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *)arg1)->operator !=((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_info_get) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_info_get" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (freeling::depnode *)& ((*arg1)->info);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_num_children) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_num_children(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_num_children" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (unsigned int)(*arg1)->num_children();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_nth_child) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_nth_child(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_nth_child" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeIteratorDepnodeConst_nth_child" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (*arg1)->nth_child(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_get_parent) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_get_parent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_get_parent" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (*arg1)->get_parent();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::iterator(static_cast< const freeling::tree< freeling::depnode >::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_nth_child_ref) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_nth_child_ref(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_nth_child_ref" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeIteratorDepnodeConst_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (freeling::tree< freeling::depnode > *) &(*arg1)->nth_child_ref(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_empty) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_empty" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (bool)(*arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_sibling_begin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_sibling_begin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (*arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_sibling_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnodeConst_sibling_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnodeConst_sibling_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnodeConst_sibling_end__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_sibling_end" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (*arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_sibling_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnodeConst_sibling_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnodeConst_sibling_end'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnodeConst_sibling_rbegin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (*arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_sibling_rbegin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_rbegin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnodeConst_sibling_rbegin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnodeConst_sibling_rbegin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnodeConst_sibling_rend__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_sibling_rend" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (*arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_sibling_rend) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_sibling_rend__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnodeConst_sibling_rend__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnodeConst_sibling_rend'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnodeConst_begin__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_begin" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (*arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnodeConst_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnodeConst_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeIteratorDepnodeConst_end__SWIG_1) {
  {
    freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeIteratorDepnodeConst_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeIteratorDepnodeConst_end" "', argument " "1"" of type '" "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > * >(argp1);
    result = (*arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeIteratorDepnodeConst_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GenericIteratorDepnode_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeIteratorDepnodeConst_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeIteratorDepnodeConst_end'");
  XSRETURN(0);
}


XS(_wrap_new_GenericConstIteratorDepnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::generic_const_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_GenericConstIteratorDepnode();");
    }
    result = (freeling::generic_const_iterator< freeling::depnode > *)new freeling::generic_const_iterator< freeling::depnode >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericConstIteratorDepnode__SWIG_1) {
  {
    freeling::generic_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_const_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericConstIteratorDepnode(freeling::generic_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericConstIteratorDepnode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GenericConstIteratorDepnode" "', argument " "1"" of type '" "freeling::generic_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_iterator< freeling::depnode > * >(argp1);
    result = (freeling::generic_const_iterator< freeling::depnode > *)new freeling::generic_const_iterator< freeling::depnode >((freeling::generic_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericConstIteratorDepnode__SWIG_2) {
  {
    freeling::generic_const_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_const_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericConstIteratorDepnode(freeling::generic_const_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericConstIteratorDepnode" "', argument " "1"" of type '" "freeling::generic_const_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GenericConstIteratorDepnode" "', argument " "1"" of type '" "freeling::generic_const_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_const_iterator< freeling::depnode > * >(argp1);
    result = (freeling::generic_const_iterator< freeling::depnode > *)new freeling::generic_const_iterator< freeling::depnode >((freeling::generic_const_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericConstIteratorDepnode__SWIG_3) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::generic_const_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GenericConstIteratorDepnode(freeling::tree< freeling::depnode > const *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GenericConstIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::generic_const_iterator< freeling::depnode > *)new freeling::generic_const_iterator< freeling::depnode >((freeling::tree< freeling::depnode > const *)arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GenericConstIteratorDepnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericConstIteratorDepnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericConstIteratorDepnode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericConstIteratorDepnode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_GenericConstIteratorDepnode__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_GenericConstIteratorDepnode'");
  XSRETURN(0);
}


XS(_wrap_delete_GenericConstIteratorDepnode) {
  {
    freeling::generic_const_iterator< freeling::depnode > *arg1 = (freeling::generic_const_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GenericConstIteratorDepnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GenericConstIteratorDepnode" "', argument " "1"" of type '" "freeling::generic_const_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::generic_const_iterator< freeling::depnode > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorDepnode();");
    }
    result = (freeling::const_preorder_iterator< freeling::depnode > *)new freeling::const_preorder_iterator< freeling::depnode >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorDepnode(freeling::tree< freeling::depnode > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::depnode > *)new freeling::const_preorder_iterator< freeling::depnode >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_2) {
  {
    freeling::const_preorder_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorDepnode(freeling::const_preorder_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::depnode > *)new freeling::const_preorder_iterator< freeling::depnode >((freeling::const_preorder_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_3) {
  {
    freeling::preorder_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorDepnode(freeling::preorder_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::preorder_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::preorder_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::depnode > *)new freeling::const_preorder_iterator< freeling::depnode >((freeling::preorder_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_4) {
  {
    freeling::const_sibling_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorDepnode(freeling::const_sibling_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::depnode > *)new freeling::const_preorder_iterator< freeling::depnode >((freeling::const_sibling_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_5) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstPreorderIteratorDepnode(freeling::sibling_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::depnode > *)new freeling::const_preorder_iterator< freeling::depnode >((freeling::sibling_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstPreorderIteratorDepnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_3); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_4); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstPreorderIteratorDepnode__SWIG_5); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ConstPreorderIteratorDepnode'");
  XSRETURN(0);
}


XS(_wrap_delete_ConstPreorderIteratorDepnode) {
  {
    freeling::const_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_preorder_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ConstPreorderIteratorDepnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::depnode > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorDepnode___plusplus____SWIG_0) {
  {
    freeling::const_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_preorder_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstPreorderIteratorDepnode___plusplus__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstPreorderIteratorDepnode___plusplus__" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::depnode > *) &(arg1)->operator ++();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorDepnode___minmin____SWIG_0) {
  {
    freeling::const_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_preorder_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstPreorderIteratorDepnode___minmin__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstPreorderIteratorDepnode___minmin__" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_preorder_iterator< freeling::depnode > *) &(arg1)->operator --();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorDepnode___plusplus____SWIG_1) {
  {
    freeling::const_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_preorder_iterator< freeling::depnode > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstPreorderIteratorDepnode___plusplus__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstPreorderIteratorDepnode___plusplus__" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstPreorderIteratorDepnode___plusplus__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator ++(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::const_preorder_iterator< freeling::depnode >(static_cast< const freeling::const_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorDepnode___plusplus__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstPreorderIteratorDepnode___plusplus____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstPreorderIteratorDepnode___plusplus____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ConstPreorderIteratorDepnode___plusplus__'");
  XSRETURN(0);
}


XS(_wrap_ConstPreorderIteratorDepnode___minmin____SWIG_1) {
  {
    freeling::const_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_preorder_iterator< freeling::depnode > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::const_preorder_iterator< freeling::depnode > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstPreorderIteratorDepnode___minmin__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstPreorderIteratorDepnode___minmin__" "', argument " "1"" of type '" "freeling::const_preorder_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_preorder_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstPreorderIteratorDepnode___minmin__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator --(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::const_preorder_iterator< freeling::depnode >(static_cast< const freeling::const_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstPreorderIteratorDepnode___minmin__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstPreorderIteratorDepnode___minmin____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstPreorderIteratorDepnode___minmin____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ConstPreorderIteratorDepnode___minmin__'");
  XSRETURN(0);
}


XS(_wrap_new_ConstSiblingIteratorDepnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ConstSiblingIteratorDepnode();");
    }
    result = (freeling::const_sibling_iterator< freeling::depnode > *)new freeling::const_sibling_iterator< freeling::depnode >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstSiblingIteratorDepnode__SWIG_1) {
  {
    freeling::const_sibling_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstSiblingIteratorDepnode(freeling::const_sibling_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::depnode > *)new freeling::const_sibling_iterator< freeling::depnode >((freeling::const_sibling_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstSiblingIteratorDepnode__SWIG_2) {
  {
    freeling::sibling_iterator< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstSiblingIteratorDepnode(freeling::sibling_iterator< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::sibling_iterator< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::depnode > *)new freeling::const_sibling_iterator< freeling::depnode >((freeling::sibling_iterator< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstSiblingIteratorDepnode__SWIG_3) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstSiblingIteratorDepnode(freeling::tree< freeling::depnode > *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::depnode > *)new freeling::const_sibling_iterator< freeling::depnode >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstSiblingIteratorDepnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstSiblingIteratorDepnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstSiblingIteratorDepnode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstSiblingIteratorDepnode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstSiblingIteratorDepnode__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ConstSiblingIteratorDepnode'");
  XSRETURN(0);
}


XS(_wrap_delete_ConstSiblingIteratorDepnode) {
  {
    freeling::const_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_sibling_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ConstSiblingIteratorDepnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::depnode > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorDepnode___plusplus____SWIG_0) {
  {
    freeling::const_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_sibling_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstSiblingIteratorDepnode___plusplus__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstSiblingIteratorDepnode___plusplus__" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::depnode > *) &(arg1)->operator ++();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorDepnode___minmin____SWIG_0) {
  {
    freeling::const_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_sibling_iterator< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstSiblingIteratorDepnode___minmin__(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstSiblingIteratorDepnode___minmin__" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::depnode > * >(argp1);
    result = (freeling::const_sibling_iterator< freeling::depnode > *) &(arg1)->operator --();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorDepnode___plusplus____SWIG_1) {
  {
    freeling::const_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_sibling_iterator< freeling::depnode > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::depnode > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstSiblingIteratorDepnode___plusplus__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstSiblingIteratorDepnode___plusplus__" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstSiblingIteratorDepnode___plusplus__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator ++(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::const_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorDepnode___plusplus__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstSiblingIteratorDepnode___plusplus____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstSiblingIteratorDepnode___plusplus____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ConstSiblingIteratorDepnode___plusplus__'");
  XSRETURN(0);
}


XS(_wrap_ConstSiblingIteratorDepnode___minmin____SWIG_1) {
  {
    freeling::const_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_sibling_iterator< freeling::depnode > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::const_sibling_iterator< freeling::depnode > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstSiblingIteratorDepnode___minmin__(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstSiblingIteratorDepnode___minmin__" "', argument " "1"" of type '" "freeling::const_sibling_iterator< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::const_sibling_iterator< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstSiblingIteratorDepnode___minmin__" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->operator --(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::const_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstSiblingIteratorDepnode___minmin__) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstSiblingIteratorDepnode___minmin____SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ConstSiblingIteratorDepnode___minmin____SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ConstSiblingIteratorDepnode___minmin__'");
  XSRETURN(0);
}


XS(_wrap_TreeNode_info_set) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    freeling::node *arg2 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeNode_info_set(self,info);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_info_set" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeNode_info_set" "', argument " "2"" of type '" "freeling::node *""'"); 
    }
    arg2 = reinterpret_cast< freeling::node * >(argp2);
    if (arg1) (arg1)->info = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_info_get) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::node *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_info_get" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::node *)& ((arg1)->info);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeNode__SWIG_0) {
  {
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TreeNode();");
    }
    result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeNode__SWIG_1) {
  {
    freeling::node *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeNode(freeling::node const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__node,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeNode" "', argument " "1"" of type '" "freeling::node const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeNode" "', argument " "1"" of type '" "freeling::node const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::node const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeNode__SWIG_2) {
  {
    freeling::tree< freeling::node > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeNode(freeling::tree< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::tree< freeling::node > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeNode__SWIG_3) {
  {
    freeling::tree< freeling::node >::preorder_iterator *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeNode(freeling::tree< freeling::node >::preorder_iterator const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeNode" "', argument " "1"" of type '" "freeling::tree< freeling::node >::preorder_iterator const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeNode" "', argument " "1"" of type '" "freeling::tree< freeling::node >::preorder_iterator const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node >::preorder_iterator * >(argp1);
    result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::tree< freeling::node >::preorder_iterator const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__node, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeNode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeNode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeNode__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_TreeNode'");
  XSRETURN(0);
}


XS(_wrap_delete_TreeNode) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TreeNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_operator_assignment) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    freeling::tree< freeling::node > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeNode_operator_assignment(self,freeling::tree< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_operator_assignment" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeNode_operator_assignment" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeNode_operator_assignment" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
    result = (freeling::tree< freeling::node > *) &(arg1)->operator =((freeling::tree< freeling::node > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_num_children) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_num_children(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_num_children" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (unsigned int)((freeling::tree< freeling::node > const *)arg1)->num_children();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_nth_child) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeNode_nth_child(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_nth_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = ((freeling::tree< freeling::node > const *)arg1)->nth_child(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_get_parent) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_get_parent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_get_parent" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = ((freeling::tree< freeling::node > const *)arg1)->get_parent();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::iterator(static_cast< const freeling::tree< freeling::node >::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_nth_child_ref) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeNode_nth_child_ref(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (freeling::tree< freeling::node > *) &((freeling::tree< freeling::node > const *)arg1)->nth_child_ref(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_get_info) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::node *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_get_info(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_get_info" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (freeling::node *) &(arg1)->get_info();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_append_child) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    freeling::tree< freeling::node > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeNode_append_child(self,freeling::tree< freeling::node > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_append_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeNode_append_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeNode_append_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
    (arg1)->append_child((freeling::tree< freeling::node > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_hang_child__SWIG_0) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    freeling::tree< freeling::node > *arg2 = 0 ;
    bool arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: TreeNode_hang_child(self,freeling::tree< freeling::node > &,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeNode_hang_child" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->hang_child(*arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_hang_child__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    freeling::tree< freeling::node > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeNode_hang_child(self,freeling::tree< freeling::node > &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
    (arg1)->hang_child(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_hang_child) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_hang_child__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_hang_child__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeNode_hang_child'");
  XSRETURN(0);
}


XS(_wrap_TreeNode_clear) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_clear" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_empty) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_empty" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (bool)((freeling::tree< freeling::node > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_begin__SWIG_0) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_sibling_begin" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_end__SWIG_0) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_sibling_end" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_rbegin__SWIG_0) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_rend__SWIG_0) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_sibling_rend" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_begin__SWIG_0) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_begin" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::preorder_iterator(static_cast< const freeling::tree< freeling::node >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_end__SWIG_0) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_end" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = (arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::preorder_iterator(static_cast< const freeling::tree< freeling::node >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_begin__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_sibling_begin" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = ((freeling::tree< freeling::node > const *)arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_sibling_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_sibling_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeNode_sibling_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeNode_sibling_end__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_sibling_end" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = ((freeling::tree< freeling::node > const *)arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_sibling_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_sibling_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeNode_sibling_end'");
  XSRETURN(0);
}


XS(_wrap_TreeNode_sibling_rbegin__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = ((freeling::tree< freeling::node > const *)arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_rbegin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_sibling_rbegin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_sibling_rbegin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeNode_sibling_rbegin'");
  XSRETURN(0);
}


XS(_wrap_TreeNode_sibling_rend__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_sibling_rend" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = ((freeling::tree< freeling::node > const *)arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_sibling_rend) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_sibling_rend__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_sibling_rend__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeNode_sibling_rend'");
  XSRETURN(0);
}


XS(_wrap_TreeNode_begin__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_begin" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = ((freeling::tree< freeling::node > const *)arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeNode_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeNode_end__SWIG_1) {
  {
    freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeNode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNode_end" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
    result = ((freeling::tree< freeling::node > const *)arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeNode_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeNode_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeNode_end'");
  XSRETURN(0);
}


XS(_wrap_TreeDepnode_info_set) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    freeling::depnode *arg2 = (freeling::depnode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeDepnode_info_set(self,info);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_info_set" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_freeling__depnode, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeDepnode_info_set" "', argument " "2"" of type '" "freeling::depnode *""'"); 
    }
    arg2 = reinterpret_cast< freeling::depnode * >(argp2);
    if (arg1) (arg1)->info = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_info_get) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_info_get" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::depnode *)& ((arg1)->info);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeDepnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TreeDepnode();");
    }
    result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeDepnode__SWIG_1) {
  {
    freeling::depnode *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeDepnode(freeling::depnode const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__depnode,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeDepnode" "', argument " "1"" of type '" "freeling::depnode const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeDepnode" "', argument " "1"" of type '" "freeling::depnode const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::depnode * >(argp1);
    result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::depnode const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeDepnode__SWIG_2) {
  {
    freeling::tree< freeling::depnode > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeDepnode(freeling::tree< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::tree< freeling::depnode > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeDepnode__SWIG_3) {
  {
    freeling::tree< freeling::depnode >::preorder_iterator *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TreeDepnode(freeling::tree< freeling::depnode >::preorder_iterator const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode >::preorder_iterator const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode >::preorder_iterator const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode >::preorder_iterator * >(argp1);
    result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::tree< freeling::depnode >::preorder_iterator const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreeDepnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__depnode, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeDepnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeDepnode__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeDepnode__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TreeDepnode__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_TreeDepnode'");
  XSRETURN(0);
}


XS(_wrap_delete_TreeDepnode) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TreeDepnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_operator_assignment) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    freeling::tree< freeling::depnode > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeDepnode_operator_assignment(self,freeling::tree< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_operator_assignment" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeDepnode_operator_assignment" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeDepnode_operator_assignment" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
    result = (freeling::tree< freeling::depnode > *) &(arg1)->operator =((freeling::tree< freeling::depnode > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_num_children) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_num_children(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_num_children" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (unsigned int)((freeling::tree< freeling::depnode > const *)arg1)->num_children();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_nth_child) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeDepnode_nth_child(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_nth_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = ((freeling::tree< freeling::depnode > const *)arg1)->nth_child(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_get_parent) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_get_parent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_get_parent" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = ((freeling::tree< freeling::depnode > const *)arg1)->get_parent();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::iterator(static_cast< const freeling::tree< freeling::depnode >::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_nth_child_ref) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeDepnode_nth_child_ref(self,unsigned int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (freeling::tree< freeling::depnode > *) &((freeling::tree< freeling::depnode > const *)arg1)->nth_child_ref(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_get_info) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_get_info(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_get_info" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (freeling::depnode *) &(arg1)->get_info();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_append_child) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    freeling::tree< freeling::depnode > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeDepnode_append_child(self,freeling::tree< freeling::depnode > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_append_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeDepnode_append_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeDepnode_append_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
    (arg1)->append_child((freeling::tree< freeling::depnode > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_hang_child__SWIG_0) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    freeling::tree< freeling::depnode > *arg2 = 0 ;
    bool arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: TreeDepnode_hang_child(self,freeling::tree< freeling::depnode > &,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeDepnode_hang_child" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->hang_child(*arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_hang_child__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    freeling::tree< freeling::depnode > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreeDepnode_hang_child(self,freeling::tree< freeling::depnode > &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
    }
    arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
    (arg1)->hang_child(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_hang_child) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_hang_child__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_hang_child__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeDepnode_hang_child'");
  XSRETURN(0);
}


XS(_wrap_TreeDepnode_clear) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_clear" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_empty) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_empty" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (bool)((freeling::tree< freeling::depnode > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_begin__SWIG_0) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_end__SWIG_0) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_sibling_end" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_rbegin__SWIG_0) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_rend__SWIG_0) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_begin__SWIG_0) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_begin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_end__SWIG_0) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_end" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = (arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_begin__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_sibling_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = ((freeling::tree< freeling::depnode > const *)arg1)->sibling_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_sibling_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_sibling_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeDepnode_sibling_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeDepnode_sibling_end__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_sibling_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_sibling_end" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = ((freeling::tree< freeling::depnode > const *)arg1)->sibling_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_sibling_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_sibling_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeDepnode_sibling_end'");
  XSRETURN(0);
}


XS(_wrap_TreeDepnode_sibling_rbegin__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_sibling_rbegin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = ((freeling::tree< freeling::depnode > const *)arg1)->sibling_rbegin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_rbegin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_sibling_rbegin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_sibling_rbegin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeDepnode_sibling_rbegin'");
  XSRETURN(0);
}


XS(_wrap_TreeDepnode_sibling_rend__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_sibling_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_sibling_rend(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = ((freeling::tree< freeling::depnode > const *)arg1)->sibling_rend();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_sibling_rend) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_sibling_rend__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_sibling_rend__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeDepnode_sibling_rend'");
  XSRETURN(0);
}


XS(_wrap_TreeDepnode_begin__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_begin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = ((freeling::tree< freeling::depnode > const *)arg1)->begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeDepnode_begin'");
  XSRETURN(0);
}


XS(_wrap_TreeDepnode_end__SWIG_1) {
  {
    freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::depnode >::const_preorder_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TreeDepnode_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeDepnode_end" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
    result = ((freeling::tree< freeling::depnode > const *)arg1)->end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreeDepnode_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TreeDepnode_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'TreeDepnode_end'");
  XSRETURN(0);
}


XS(_wrap_analysis_user_set) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    std::vector< std::wstring > *arg2 = (std::vector< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_user_set(self,user);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_user_set" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_std__vectorT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_user_set" "', argument " "2"" of type '" "std::vector< std::wstring > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::wstring > * >(argp2);
    if (arg1) (arg1)->user = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_user_get) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_user_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_user_get" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = (std::vector< std::wstring > *)& ((arg1)->user);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_analysis__SWIG_0) {
  {
    int argvi = 0;
    freeling::analysis *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_analysis();");
    }
    result = (freeling::analysis *)new freeling::analysis();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_analysis__SWIG_1) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    freeling::analysis *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_analysis(std::wstring const &,std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = (freeling::analysis *)new freeling::analysis((std::wstring const &)*arg1,(std::wstring const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_analysis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_analysis__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_analysis__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_analysis'");
  XSRETURN(0);
}


XS(_wrap_analysis_operator_assignment) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    freeling::analysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::analysis *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_operator_assignment(self,freeling::analysis const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_operator_assignment" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__analysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_operator_assignment" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis_operator_assignment" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::analysis * >(argp2);
    result = (freeling::analysis *) &(arg1)->operator =((freeling::analysis const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_analysis) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_analysis(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_analysis" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_set_lemma) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_set_lemma(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_lemma" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    (arg1)->set_lemma((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_set_tag) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_set_tag(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_tag" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    (arg1)->set_tag((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_set_prob) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_set_prob(self,double);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_prob" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_set_prob" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    (arg1)->set_prob(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_set_distance) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_set_distance(self,double);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_distance" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_set_distance" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    (arg1)->set_distance(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_set_retokenizable) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    std::list< freeling::word > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::word > temp2 ;
    std::list< freeling::word > *v2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_set_retokenizable(self,std::list< freeling::word > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_retokenizable" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__word_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of analysis_set_retokenizable. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "analysis_set_retokenizable. "
              "Expected an array of " "freeling::word");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of analysis_set_retokenizable. "
          "Expected an array of " "freeling::word");
      }
    }
    (arg1)->set_retokenizable((std::list< freeling::word > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_has_prob) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_has_prob(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_has_prob" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = (bool)((freeling::analysis const *)arg1)->has_prob();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_has_distance) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_has_distance(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_has_distance" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = (bool)((freeling::analysis const *)arg1)->has_distance();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_get_lemma) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_get_lemma(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_lemma" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = ((freeling::analysis const *)arg1)->get_lemma();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_get_tag) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_get_tag(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_tag" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = ((freeling::analysis const *)arg1)->get_tag();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_get_prob) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_get_prob(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_prob" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = (double)((freeling::analysis const *)arg1)->get_prob();
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_get_distance) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_get_distance(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_distance" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = (double)((freeling::analysis const *)arg1)->get_distance();
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_is_retokenizable) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_is_retokenizable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_is_retokenizable" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = (bool)((freeling::analysis const *)arg1)->is_retokenizable();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_get_retokenizable) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< freeling::word > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_get_retokenizable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_retokenizable" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = ((freeling::analysis const *)arg1)->get_retokenizable();
    {
      std::list<freeling::word>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::word* ptr = new freeling::word(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__word, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_get_senses) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SwigValueWrapper< std::list< std::pair< std::wstring,double > > > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_get_senses(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_senses" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = ((freeling::analysis const *)arg1)->get_senses();
    ST(argvi) = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,double > >(static_cast< const std::list< std::pair< std::wstring,double > >& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_set_senses) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    std::list< std::pair< std::wstring,double > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_set_senses(self,std::list< std::pair< std::wstring,double > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_senses" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    arg2 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp2);
    (arg1)->set_senses((std::list< std::pair< std::wstring,double > > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_get_senses_string) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_get_senses_string(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_senses_string" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = ((freeling::analysis const *)arg1)->get_senses_string();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis___lt__) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    freeling::analysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis___lt__(self,freeling::analysis const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis___lt__" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__analysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis___lt__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis___lt__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::analysis * >(argp2);
    result = (bool)((freeling::analysis const *)arg1)->operator <((freeling::analysis const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis___eq__) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    freeling::analysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis___eq__(self,freeling::analysis const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis___eq__" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__analysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis___eq__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis___eq__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::analysis * >(argp2);
    result = (bool)((freeling::analysis const *)arg1)->operator ==((freeling::analysis const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_is_selected__SWIG_0) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_is_selected(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_is_selected" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_is_selected" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (bool)((freeling::analysis const *)arg1)->is_selected(arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_is_selected__SWIG_1) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_is_selected(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_is_selected" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    result = (bool)((freeling::analysis const *)arg1)->is_selected();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_is_selected) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_analysis_is_selected__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_analysis_is_selected__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'analysis_is_selected'");
  XSRETURN(0);
}


XS(_wrap_analysis_mark_selected__SWIG_0) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_mark_selected(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_mark_selected" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_mark_selected" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->mark_selected(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_mark_selected__SWIG_1) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_mark_selected(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_mark_selected" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    (arg1)->mark_selected();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_mark_selected) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_analysis_mark_selected__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_analysis_mark_selected__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'analysis_mark_selected'");
  XSRETURN(0);
}


XS(_wrap_analysis_unmark_selected__SWIG_0) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: analysis_unmark_selected(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_unmark_selected" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_unmark_selected" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->unmark_selected(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_unmark_selected__SWIG_1) {
  {
    freeling::analysis *arg1 = (freeling::analysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: analysis_unmark_selected(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_unmark_selected" "', argument " "1"" of type '" "freeling::analysis *""'"); 
    }
    arg1 = reinterpret_cast< freeling::analysis * >(argp1);
    (arg1)->unmark_selected();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_analysis_unmark_selected) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_analysis_unmark_selected__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_analysis_unmark_selected__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'analysis_unmark_selected'");
  XSRETURN(0);
}


XS(_wrap_word_user_set) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    std::vector< std::wstring > *arg2 = (std::vector< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_user_set(self,user);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_user_set" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_std__vectorT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_user_set" "', argument " "2"" of type '" "std::vector< std::wstring > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::wstring > * >(argp2);
    if (arg1) (arg1)->user = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_user_get) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_user_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_user_get" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (std::vector< std::wstring > *)& ((arg1)->user);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_word__SWIG_0) {
  {
    int argvi = 0;
    freeling::word *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_word();");
    }
    result = (freeling::word *)new freeling::word();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_word__SWIG_1) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::word *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_word(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::word *)new freeling::word((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_word__SWIG_2) {
  {
    std::wstring *arg1 = 0 ;
    std::list< freeling::word > *arg2 = 0 ;
    std::wstring wtemp1 ;
    std::list< freeling::word > temp2 ;
    std::list< freeling::word > *v2 ;
    int argvi = 0;
    freeling::word *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_word(std::wstring const &,std::list< freeling::word > const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__word_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of new_word. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "new_word. "
              "Expected an array of " "freeling::word");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of new_word. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (freeling::word *)new freeling::word((std::wstring const &)*arg1,(std::list< freeling::word > const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_word__SWIG_3) {
  {
    std::wstring *arg1 = 0 ;
    std::list< freeling::analysis > *arg2 = 0 ;
    std::list< freeling::word > *arg3 = 0 ;
    std::wstring wtemp1 ;
    std::list< freeling::analysis > temp2 ;
    std::list< freeling::analysis > *v2 ;
    std::list< freeling::word > temp3 ;
    std::list< freeling::word > *v3 ;
    int argvi = 0;
    freeling::word *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_word(std::wstring const &,std::list< freeling::analysis > const &,std::list< freeling::word > const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__analysis_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of new_word. "
          "Expected an array of " "freeling::analysis");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::analysis* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__analysis,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "new_word. "
              "Expected an array of " "freeling::analysis");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of new_word. "
          "Expected an array of " "freeling::analysis");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__listT_freeling__word_t,1) != -1) {
        arg3 = v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of new_word. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp3.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 3 of "
              "new_word. "
              "Expected an array of " "freeling::word");
          }
        }
        arg3 = &temp3;
      } else {
        SWIG_croak("Type error in argument 3 of new_word. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (freeling::word *)new freeling::word((std::wstring const &)*arg1,(std::list< freeling::analysis > const &)*arg2,(std::list< freeling::word > const &)*arg3);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_word__SWIG_4) {
  {
    freeling::word *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_word(freeling::word const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_word" "', argument " "1"" of type '" "freeling::word const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_word" "', argument " "1"" of type '" "freeling::word const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (freeling::word *)new freeling::word((freeling::word const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_word) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::word >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__word_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::word* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__word,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::analysis >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__analysis_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::analysis* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__analysis,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::word >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__word_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::word* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__word,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_word__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_word__SWIG_4); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_word__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_word__SWIG_2); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_word__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'new_word'");
  XSRETURN(0);
}


XS(_wrap_word_operator_assignment) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::word *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::word *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_operator_assignment(self,freeling::word const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_operator_assignment" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_operator_assignment" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_operator_assignment" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    result = (freeling::word *) &(arg1)->operator =((freeling::word const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_word) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_word(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_word" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_copy_analysis) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::word *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_copy_analysis(self,freeling::word const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_copy_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_copy_analysis" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_copy_analysis" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    (arg1)->copy_analysis((freeling::word const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_n_selected) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_n_selected(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_n_selected" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (int)((freeling::word const *)arg1)->get_n_selected();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_n_unselected) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_n_unselected(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_n_unselected" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (int)((freeling::word const *)arg1)->get_n_unselected();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_is_multiword) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_is_multiword(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_is_multiword" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (bool)((freeling::word const *)arg1)->is_multiword();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_n_words_mw) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_n_words_mw(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_n_words_mw" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (int)((freeling::word const *)arg1)->get_n_words_mw();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_words_mw) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< freeling::word > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_words_mw(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_words_mw" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_words_mw();
    {
      std::list<freeling::word>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::word* ptr = new freeling::word(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__word, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_form) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_form(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_form" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_form();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_lc_form) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_lc_form(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_lc_form" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_lc_form();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_begin__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_selected_begin(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_selected_begin" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->selected_begin(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_begin__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_selected_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (arg1)->selected_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_end__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_selected_end(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_end" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_selected_end" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->selected_end(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_end__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_selected_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_end" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (arg1)->selected_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselected_begin__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_unselected_begin(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselected_begin" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->unselected_begin(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselected_begin__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_unselected_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (arg1)->unselected_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselected_end__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_unselected_end(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_end" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselected_end" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (arg1)->unselected_end(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselected_end__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_unselected_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_end" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (arg1)->unselected_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_begin__SWIG_2) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_selected_begin(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_selected_begin" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::word const *)arg1)->selected_begin(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_begin__SWIG_3) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_selected_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->selected_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_selected_begin__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_selected_begin__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_selected_begin__SWIG_0); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_selected_begin__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'word_selected_begin'");
  XSRETURN(0);
}


XS(_wrap_word_selected_end__SWIG_2) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_selected_end(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_selected_end" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::word const *)arg1)->selected_end(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_end__SWIG_3) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_selected_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->selected_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_selected_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_selected_end__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_selected_end__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_selected_end__SWIG_0); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_selected_end__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'word_selected_end'");
  XSRETURN(0);
}


XS(_wrap_word_unselected_begin__SWIG_2) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_unselected_begin(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselected_begin" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::word const *)arg1)->unselected_begin(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselected_begin__SWIG_3) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_unselected_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->unselected_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselected_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselected_begin__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselected_begin__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselected_begin__SWIG_0); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselected_begin__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'word_unselected_begin'");
  XSRETURN(0);
}


XS(_wrap_word_unselected_end__SWIG_2) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_unselected_end(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselected_end" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::word const *)arg1)->unselected_end(arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselected_end__SWIG_3) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_unselected_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->unselected_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselected_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselected_end__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselected_end__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselected_end__SWIG_0); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselected_end__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'word_unselected_end'");
  XSRETURN(0);
}


XS(_wrap_word_get_lemma__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_get_lemma(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_lemma" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_get_lemma" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::word const *)arg1)->get_lemma(arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_lemma__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_lemma(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_lemma" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_lemma();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_lemma) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_get_lemma__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_get_lemma__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_get_lemma'");
  XSRETURN(0);
}


XS(_wrap_word_get_tag__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_get_tag(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_tag" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_get_tag" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::word const *)arg1)->get_tag(arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_tag__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_tag(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_tag" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_tag();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_tag) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_get_tag__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_get_tag__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_get_tag'");
  XSRETURN(0);
}


XS(_wrap_word_get_senses__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    SwigValueWrapper< std::list< std::pair< std::wstring,double > > > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_get_senses(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_senses" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_get_senses" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::word const *)arg1)->get_senses(arg2);
    ST(argvi) = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,double > >(static_cast< const std::list< std::pair< std::wstring,double > >& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_senses__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SwigValueWrapper< std::list< std::pair< std::wstring,double > > > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_senses(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_senses" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_senses();
    ST(argvi) = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,double > >(static_cast< const std::list< std::pair< std::wstring,double > >& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_senses) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_get_senses__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_get_senses__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_get_senses'");
  XSRETURN(0);
}


XS(_wrap_word_get_senses_string__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_get_senses_string(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_senses_string" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_get_senses_string" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::word const *)arg1)->get_senses_string(arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_senses_string__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_senses_string(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_senses_string" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_senses_string();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_senses_string) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_get_senses_string__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_get_senses_string__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_get_senses_string'");
  XSRETURN(0);
}


XS(_wrap_word_set_senses__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    std::list< std::pair< std::wstring,double > > *arg2 = 0 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: word_set_senses(self,std::list< std::pair< std::wstring,double > > const &,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_senses" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    arg2 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_set_senses" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    (arg1)->set_senses((std::list< std::pair< std::wstring,double > > const &)*arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_set_senses__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    std::list< std::pair< std::wstring,double > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_set_senses(self,std::list< std::pair< std::wstring,double > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_senses" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    arg2 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp2);
    (arg1)->set_senses((std::list< std::pair< std::wstring,double > > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_set_senses) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_set_senses__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_set_senses__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_set_senses'");
  XSRETURN(0);
}


XS(_wrap_word_get_span_start) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_span_start(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_span_start" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (unsigned long)((freeling::word const *)arg1)->get_span_start();
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_span_finish) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_span_finish(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_span_finish" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (unsigned long)((freeling::word const *)arg1)->get_span_finish();
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_found_in_dict) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_found_in_dict(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_found_in_dict" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (bool)((freeling::word const *)arg1)->found_in_dict();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_set_found_in_dict) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_set_found_in_dict(self,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_found_in_dict" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_set_found_in_dict" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->set_found_in_dict(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_has_retokenizable) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_has_retokenizable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_has_retokenizable" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (bool)((freeling::word const *)arg1)->has_retokenizable();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_lock_analysis) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_lock_analysis(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_lock_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    (arg1)->lock_analysis();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_is_locked) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_is_locked(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_is_locked" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (bool)((freeling::word const *)arg1)->is_locked();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_add_alternative) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::word *arg2 = 0 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: word_add_alternative(self,freeling::word const &,double);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_add_alternative" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_add_alternative" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_add_alternative" "', argument " "2"" of type '" "freeling::word const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_add_alternative" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    (arg1)->add_alternative((freeling::word const &)*arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_set_alternatives) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    std::list< std::pair< freeling::word,double > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_set_alternatives(self,std::list< std::pair< freeling::word,double > > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_alternatives" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_std__pairT_freeling__word_double_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_alternatives" "', argument " "2"" of type '" "std::list< std::pair< freeling::word,double > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_alternatives" "', argument " "2"" of type '" "std::list< std::pair< freeling::word,double > > const &""'"); 
    }
    arg2 = reinterpret_cast< std::list< std::pair< freeling::word,double > > * >(argp2);
    (arg1)->set_alternatives((std::list< std::pair< freeling::word,double > > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_has_alternatives) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_has_alternatives(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_has_alternatives" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (bool)((freeling::word const *)arg1)->has_alternatives();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_alternatives) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SwigValueWrapper< std::list< std::pair< freeling::word,double > > > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_alternatives(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_alternatives" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_alternatives();
    ST(argvi) = SWIG_NewPointerObj((new std::list< std::pair< freeling::word,double > >(static_cast< const std::list< std::pair< freeling::word,double > >& >(result))), SWIGTYPE_p_std__listT_std__pairT_freeling__word_double_t_t, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_alternatives_begin) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SwigValueWrapper< std::list< std::pair< freeling::word,double > >::iterator > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_alternatives_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_alternatives_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (arg1)->alternatives_begin();
    ST(argvi) = SWIG_NewPointerObj((new std::list< std::pair< freeling::word,double > >::iterator(static_cast< const std::list< std::pair< freeling::word,double > >::iterator& >(result))), SWIGTYPE_p_std__listT_std__pairT_freeling__word_double_t_t__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_alternatives_end) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SwigValueWrapper< std::list< std::pair< freeling::word,double > >::iterator > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_alternatives_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_alternatives_end" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (arg1)->alternatives_end();
    ST(argvi) = SWIG_NewPointerObj((new std::list< std::pair< freeling::word,double > >::iterator(static_cast< const std::list< std::pair< freeling::word,double > >::iterator& >(result))), SWIGTYPE_p_std__listT_std__pairT_freeling__word_double_t_t__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_add_analysis) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::analysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_add_analysis(self,freeling::analysis const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_add_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__analysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_add_analysis" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_add_analysis" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::analysis * >(argp2);
    (arg1)->add_analysis((freeling::analysis const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_set_analysis__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::analysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_set_analysis(self,freeling::analysis const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__analysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_analysis" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_analysis" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::analysis * >(argp2);
    (arg1)->set_analysis((freeling::analysis const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_set_analysis__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    std::list< freeling::analysis > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::analysis > temp2 ;
    std::list< freeling::analysis > *v2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_set_analysis(self,std::list< freeling::analysis > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__analysis_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of word_set_analysis. "
          "Expected an array of " "freeling::analysis");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::analysis* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__analysis,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "word_set_analysis. "
              "Expected an array of " "freeling::analysis");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of word_set_analysis. "
          "Expected an array of " "freeling::analysis");
      }
    }
    (arg1)->set_analysis((std::list< freeling::analysis > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_set_analysis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::analysis >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__analysis_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::analysis* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__analysis,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_set_analysis__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_set_analysis__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'word_set_analysis'");
  XSRETURN(0);
}


XS(_wrap_word_set_form) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_set_form(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_form" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    (arg1)->set_form((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_set_span) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    unsigned long arg2 ;
    unsigned long arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    unsigned long val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: word_set_span(self,unsigned long,unsigned long);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_span" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_set_span" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_set_span" "', argument " "3"" of type '" "unsigned long""'");
    } 
    arg3 = static_cast< unsigned long >(val3);
    (arg1)->set_span(arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_find_tag_match) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    boost::u32regex *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_find_tag_match(self,boost::u32regex &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_find_tag_match" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_boost__u32regex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_find_tag_match" "', argument " "2"" of type '" "boost::u32regex &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_find_tag_match" "', argument " "2"" of type '" "boost::u32regex &""'"); 
    }
    arg2 = reinterpret_cast< boost::u32regex * >(argp2);
    result = (bool)(arg1)->find_tag_match(*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_get_n_analysis) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_n_analysis(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_n_analysis" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (int)((freeling::word const *)arg1)->get_n_analysis();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselect_all_analysis__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_unselect_all_analysis(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselect_all_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselect_all_analysis" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->unselect_all_analysis(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselect_all_analysis__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_unselect_all_analysis(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselect_all_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    (arg1)->unselect_all_analysis();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselect_all_analysis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselect_all_analysis__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselect_all_analysis__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_unselect_all_analysis'");
  XSRETURN(0);
}


XS(_wrap_word_select_all_analysis__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_select_all_analysis(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_select_all_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_select_all_analysis" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->select_all_analysis(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_select_all_analysis__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_select_all_analysis(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_select_all_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    (arg1)->select_all_analysis();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_select_all_analysis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_select_all_analysis__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_select_all_analysis__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_select_all_analysis'");
  XSRETURN(0);
}


XS(_wrap_word_select_analysis__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::word::iterator arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: word_select_analysis(self,freeling::word::iterator,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_select_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word__iterator,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_select_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_select_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
      } else {
        arg2 = *(reinterpret_cast< freeling::word::iterator * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_select_analysis" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    (arg1)->select_analysis(arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_select_analysis__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::word::iterator arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_select_analysis(self,freeling::word::iterator);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_select_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word__iterator,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_select_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_select_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
      } else {
        arg2 = *(reinterpret_cast< freeling::word::iterator * >(argp2));
      }
    }
    (arg1)->select_analysis(arg2);
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_select_analysis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__word__iterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__word__iterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_select_analysis__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_select_analysis__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_select_analysis'");
  XSRETURN(0);
}


XS(_wrap_word_unselect_analysis__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::word::iterator arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: word_unselect_analysis(self,freeling::word::iterator,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselect_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word__iterator,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_unselect_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_unselect_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
      } else {
        arg2 = *(reinterpret_cast< freeling::word::iterator * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_unselect_analysis" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    (arg1)->unselect_analysis(arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselect_analysis__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    freeling::word::iterator arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: word_unselect_analysis(self,freeling::word::iterator);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselect_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word__iterator,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_unselect_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_unselect_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
      } else {
        arg2 = *(reinterpret_cast< freeling::word::iterator * >(argp2));
      }
    }
    (arg1)->unselect_analysis(arg2);
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_unselect_analysis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__word__iterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__word__iterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselect_analysis__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_unselect_analysis__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'word_unselect_analysis'");
  XSRETURN(0);
}


XS(_wrap_word_get_analysis) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< freeling::analysis > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_get_analysis(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_analysis" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->get_analysis();
    {
      std::list<freeling::analysis>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::analysis* ptr = new freeling::analysis(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__analysis, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_analysis_begin__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_analysis_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_analysis_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (arg1)->analysis_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_analysis_end__SWIG_0) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_analysis_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_analysis_end" "', argument " "1"" of type '" "freeling::word *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = (arg1)->analysis_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::iterator(static_cast< const freeling::word::iterator& >(result))), SWIGTYPE_p_freeling__word__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_analysis_begin__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_analysis_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_analysis_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->analysis_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_analysis_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_analysis_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_analysis_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'word_analysis_begin'");
  XSRETURN(0);
}


XS(_wrap_word_analysis_end__SWIG_1) {
  {
    freeling::word *arg1 = (freeling::word *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word::const_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: word_analysis_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_analysis_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::word * >(argp1);
    result = ((freeling::word const *)arg1)->analysis_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word::const_iterator(static_cast< const freeling::word::const_iterator& >(result))), SWIGTYPE_p_freeling__word__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_word_analysis_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_analysis_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_word_analysis_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'word_analysis_end'");
  XSRETURN(0);
}


XS(_wrap_new_node__SWIG_0) {
  {
    int argvi = 0;
    freeling::node *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_node();");
    }
    result = (freeling::node *)new freeling::node();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_node__SWIG_1) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::node *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_node(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::node *)new freeling::node((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_node) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_node__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_node__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_node'");
  XSRETURN(0);
}


XS(_wrap_delete_node) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_node(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_node" "', argument " "1"" of type '" "freeling::node *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_get_node_id) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: node_get_node_id(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_node_id" "', argument " "1"" of type '" "freeling::node const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = ((freeling::node const *)arg1)->get_node_id();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_set_node_id) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: node_set_node_id(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_node_id" "', argument " "1"" of type '" "freeling::node *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    (arg1)->set_node_id((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_get_label) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: node_get_label(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_label" "', argument " "1"" of type '" "freeling::node const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = ((freeling::node const *)arg1)->get_label();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_get_word) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::word result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: node_get_word(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_word" "', argument " "1"" of type '" "freeling::node const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = ((freeling::node const *)arg1)->get_word();
    ST(argvi) = SWIG_NewPointerObj((new freeling::word(static_cast< const freeling::word& >(result))), SWIGTYPE_p_freeling__word, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_set_label) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: node_set_label(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_label" "', argument " "1"" of type '" "freeling::node *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    (arg1)->set_label((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_set_word) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    freeling::word *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: node_set_word(self,freeling::word &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_word" "', argument " "1"" of type '" "freeling::node *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    (arg1)->set_word(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_is_head) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: node_is_head(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_is_head" "', argument " "1"" of type '" "freeling::node const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = (bool)((freeling::node const *)arg1)->is_head();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_set_head) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: node_set_head(self,bool const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_head" "', argument " "1"" of type '" "freeling::node *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "node_set_head" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->set_head(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_is_chunk) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: node_is_chunk(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_is_chunk" "', argument " "1"" of type '" "freeling::node const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = (bool)((freeling::node const *)arg1)->is_chunk();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_set_chunk) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: node_set_chunk(self,int const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_chunk" "', argument " "1"" of type '" "freeling::node *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "node_set_chunk" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->set_chunk(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_node_get_chunk_ord) {
  {
    freeling::node *arg1 = (freeling::node *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: node_get_chunk_ord(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_chunk_ord" "', argument " "1"" of type '" "freeling::node const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = (int)((freeling::node const *)arg1)->get_chunk_ord();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_parse_tree__SWIG_0) {
  {
    int argvi = 0;
    freeling::parse_tree *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_parse_tree();");
    }
    result = (freeling::parse_tree *)new freeling::parse_tree();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_parse_tree__SWIG_1) {
  {
    freeling::node *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::parse_tree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_parse_tree(freeling::node const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__node,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_parse_tree" "', argument " "1"" of type '" "freeling::node const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_parse_tree" "', argument " "1"" of type '" "freeling::node const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = (freeling::parse_tree *)new freeling::parse_tree((freeling::node const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_parse_tree) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__node, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_parse_tree__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_parse_tree__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_parse_tree'");
  XSRETURN(0);
}


XS(_wrap_delete_parse_tree) {
  {
    freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_parse_tree(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__parse_tree, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_parse_tree" "', argument " "1"" of type '" "freeling::parse_tree *""'"); 
    }
    arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_depnode__SWIG_0) {
  {
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_depnode();");
    }
    result = (freeling::depnode *)new freeling::depnode();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_depnode__SWIG_1) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_depnode(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::depnode *)new freeling::depnode((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_depnode__SWIG_2) {
  {
    freeling::node *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::depnode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_depnode(freeling::node const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__node,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_depnode" "', argument " "1"" of type '" "freeling::node const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_depnode" "', argument " "1"" of type '" "freeling::node const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::node * >(argp1);
    result = (freeling::depnode *)new freeling::depnode((freeling::node const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_depnode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__node, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_depnode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_depnode__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_depnode__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_depnode'");
  XSRETURN(0);
}


XS(_wrap_delete_depnode) {
  {
    freeling::depnode *arg1 = (freeling::depnode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_depnode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__depnode, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_depnode" "', argument " "1"" of type '" "freeling::depnode *""'"); 
    }
    arg1 = reinterpret_cast< freeling::depnode * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_depnode_set_link) {
  {
    freeling::depnode *arg1 = (freeling::depnode *) 0 ;
    freeling::parse_tree::iterator arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: depnode_set_link(self,freeling::parse_tree::iterator const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__depnode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depnode_set_link" "', argument " "1"" of type '" "freeling::depnode *""'"); 
    }
    arg1 = reinterpret_cast< freeling::depnode * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "depnode_set_link" "', argument " "2"" of type '" "freeling::parse_tree::iterator const""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "depnode_set_link" "', argument " "2"" of type '" "freeling::parse_tree::iterator const""'");
      } else {
        arg2 = *(reinterpret_cast< freeling::parse_tree::iterator * >(argp2));
      }
    }
    (arg1)->set_link(arg2);
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_depnode_get_link) {
  {
    freeling::depnode *arg1 = (freeling::depnode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::parse_tree::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: depnode_get_link(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__depnode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depnode_get_link" "', argument " "1"" of type '" "freeling::depnode *""'"); 
    }
    arg1 = reinterpret_cast< freeling::depnode * >(argp1);
    result = (arg1)->get_link();
    ST(argvi) = SWIG_NewPointerObj((new freeling::parse_tree::iterator(static_cast< const freeling::parse_tree::iterator& >(result))), SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_depnode_get_link_ref) {
  {
    freeling::depnode *arg1 = (freeling::depnode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::tree< freeling::node > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: depnode_get_link_ref(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__depnode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depnode_get_link_ref" "', argument " "1"" of type '" "freeling::depnode *""'"); 
    }
    arg1 = reinterpret_cast< freeling::depnode * >(argp1);
    result = (freeling::tree< freeling::node > *) &(arg1)->get_link_ref();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_depnode_set_label) {
  {
    freeling::depnode *arg1 = (freeling::depnode *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: depnode_set_label(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__depnode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depnode_set_label" "', argument " "1"" of type '" "freeling::depnode *""'"); 
    }
    arg1 = reinterpret_cast< freeling::depnode * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    (arg1)->set_label((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_dep_tree__SWIG_0) {
  {
    int argvi = 0;
    freeling::dep_tree *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_dep_tree();");
    }
    result = (freeling::dep_tree *)new freeling::dep_tree();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_dep_tree__SWIG_1) {
  {
    freeling::depnode *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::dep_tree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_dep_tree(freeling::depnode const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__depnode,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dep_tree" "', argument " "1"" of type '" "freeling::depnode const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dep_tree" "', argument " "1"" of type '" "freeling::depnode const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::depnode * >(argp1);
    result = (freeling::dep_tree *)new freeling::dep_tree((freeling::depnode const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_dep_tree) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__depnode, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_dep_tree__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_dep_tree__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_dep_tree'");
  XSRETURN(0);
}


XS(_wrap_delete_dep_tree) {
  {
    freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_dep_tree(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dep_tree, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dep_tree" "', argument " "1"" of type '" "freeling::dep_tree *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dep_tree * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_sentence__SWIG_0) {
  {
    int argvi = 0;
    freeling::sentence *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_sentence();");
    }
    result = (freeling::sentence *)new freeling::sentence();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_sentence__SWIG_1) {
  {
    std::list< freeling::word > *arg1 = 0 ;
    std::list< freeling::word > temp1 ;
    std::list< freeling::word > *v1 ;
    int argvi = 0;
    freeling::sentence *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_sentence(std::list< freeling::word > const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_freeling__word_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_sentence. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_sentence. "
              "Expected an array of " "freeling::word");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_sentence. "
          "Expected an array of " "freeling::word");
      }
    }
    result = (freeling::sentence *)new freeling::sentence((std::list< freeling::word > const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_sentence__SWIG_2) {
  {
    freeling::sentence *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sentence *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_sentence(freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sentence" "', argument " "1"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_sentence" "', argument " "1"" of type '" "freeling::sentence const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = (freeling::sentence *)new freeling::sentence((freeling::sentence const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_sentence) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::word >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__word_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::word* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__word,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_sentence__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_sentence__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_sentence__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_sentence'");
  XSRETURN(0);
}


XS(_wrap_sentence_operator_assignment) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sentence_operator_assignment(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_operator_assignment" "', argument " "1"" of type '" "freeling::sentence *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_operator_assignment" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_operator_assignment" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (freeling::sentence *) &(arg1)->operator =((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_sentence) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_sentence(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sentence" "', argument " "1"" of type '" "freeling::sentence *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_num_kbest) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_num_kbest(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_num_kbest" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = (unsigned int)((freeling::sentence const *)arg1)->num_kbest();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_set_parse_tree) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    freeling::parse_tree *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sentence_set_parse_tree(self,freeling::parse_tree const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_set_parse_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__parse_tree,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_set_parse_tree" "', argument " "2"" of type '" "freeling::parse_tree const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_set_parse_tree" "', argument " "2"" of type '" "freeling::parse_tree const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::parse_tree * >(argp2);
    (arg1)->set_parse_tree((freeling::parse_tree const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_get_parse_tree) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::parse_tree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_get_parse_tree(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_parse_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = (freeling::parse_tree *) &(arg1)->get_parse_tree();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_is_parsed) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_is_parsed(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_is_parsed" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = (bool)((freeling::sentence const *)arg1)->is_parsed();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_get_dep_tree) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::dep_tree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_get_dep_tree(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_dep_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = (freeling::dep_tree *) &(arg1)->get_dep_tree();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_set_dep_tree) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    freeling::dep_tree *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sentence_set_dep_tree(self,freeling::dep_tree const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_set_dep_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__dep_tree,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_set_dep_tree" "', argument " "2"" of type '" "freeling::dep_tree const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_set_dep_tree" "', argument " "2"" of type '" "freeling::dep_tree const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::dep_tree * >(argp2);
    (arg1)->set_dep_tree((freeling::dep_tree const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_is_dep_parsed) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_is_dep_parsed(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_is_dep_parsed" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = (bool)((freeling::sentence const *)arg1)->is_dep_parsed();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_get_words) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< freeling::word > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_get_words(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_words" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = ((freeling::sentence const *)arg1)->get_words();
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        freeling::word* ptr = new freeling::word(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_freeling__word, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_words_begin__SWIG_0) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sentence::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_words_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_words_begin" "', argument " "1"" of type '" "freeling::sentence *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = (arg1)->words_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence::iterator(static_cast< const freeling::sentence::iterator& >(result))), SWIGTYPE_p_freeling__sentence__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_words_end__SWIG_0) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sentence::iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_words_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_words_end" "', argument " "1"" of type '" "freeling::sentence *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = (arg1)->words_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence::iterator(static_cast< const freeling::sentence::iterator& >(result))), SWIGTYPE_p_freeling__sentence__iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_words_begin__SWIG_1) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sentence::const_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_words_begin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_words_begin" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = ((freeling::sentence const *)arg1)->words_begin();
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence::const_iterator(static_cast< const freeling::sentence::const_iterator& >(result))), SWIGTYPE_p_freeling__sentence__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_words_begin) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_sentence_words_begin__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_sentence_words_begin__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'sentence_words_begin'");
  XSRETURN(0);
}


XS(_wrap_sentence_words_end__SWIG_1) {
  {
    freeling::sentence *arg1 = (freeling::sentence *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::sentence::const_iterator result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sentence_words_end(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_words_end" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sentence * >(argp1);
    result = ((freeling::sentence const *)arg1)->words_end();
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence::const_iterator(static_cast< const freeling::sentence::const_iterator& >(result))), SWIGTYPE_p_freeling__sentence__const_iterator, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sentence_words_end) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_sentence_words_end__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_sentence_words_end__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'sentence_words_end'");
  XSRETURN(0);
}


XS(_wrap_new_paragraph) {
  {
    int argvi = 0;
    freeling::paragraph *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_paragraph();");
    }
    result = (freeling::paragraph *)new freeling::paragraph();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__paragraph, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_paragraph) {
  {
    freeling::paragraph *arg1 = (freeling::paragraph *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_paragraph(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__paragraph, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_paragraph" "', argument " "1"" of type '" "freeling::paragraph *""'"); 
    }
    arg1 = reinterpret_cast< freeling::paragraph * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_document) {
  {
    int argvi = 0;
    freeling::document *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_document();");
    }
    result = (freeling::document *)new freeling::document();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__document, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_document) {
  {
    freeling::document *arg1 = (freeling::document *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_document(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__document, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_document" "', argument " "1"" of type '" "freeling::document *""'"); 
    }
    arg1 = reinterpret_cast< freeling::document * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_document_add_positive) {
  {
    freeling::document *arg1 = (freeling::document *) 0 ;
    std::wstring arg2 ;
    std::wstring arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: document_add_positive(self,std::wstring,std::wstring);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_add_positive" "', argument " "1"" of type '" "freeling::document *""'"); 
    }
    arg1 = reinterpret_cast< freeling::document * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = wtemp3;
    }
    (arg1)->add_positive(arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_document_get_coref_group) {
  {
    freeling::document *arg1 = (freeling::document *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: document_get_coref_group(self,std::wstring);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_coref_group" "', argument " "1"" of type '" "freeling::document const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::document * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    result = (int)((freeling::document const *)arg1)->get_coref_group(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_document_get_coref_nodes) {
  {
    freeling::document *arg1 = (freeling::document *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::list< std::wstring > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: document_get_coref_nodes(self,int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_coref_nodes" "', argument " "1"" of type '" "freeling::document const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::document * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "document_get_coref_nodes" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = ((freeling::document const *)arg1)->get_coref_nodes(arg2);
    {
      std::list<std::wstring>::const_iterator i;
      unsigned int j;
      int len = (& result)->size();
      SV **svs = new SV*[len];
      for (i=(& result)->begin(), j=0; i!=(& result)->end(); i++, j++) {
        std::string ptr = freeling::util::wstring2string(*i);
        svs[j] = sv_2mortal(newSVpv(ptr.c_str(), 0));
        SvUTF8_on(svs[j]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_document_is_coref) {
  {
    freeling::document *arg1 = (freeling::document *) 0 ;
    std::wstring arg2 ;
    std::wstring arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: document_is_coref(self,std::wstring,std::wstring);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_is_coref" "', argument " "1"" of type '" "freeling::document const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::document * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = wtemp3;
    }
    result = (bool)((freeling::document const *)arg1)->is_coref(arg2,arg3);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_traces) {
  {
    int argvi = 0;
    freeling::traces *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_traces();");
    }
    result = (freeling::traces *)new freeling::traces();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__traces, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_traces) {
  {
    freeling::traces *arg1 = (freeling::traces *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_traces(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__traces, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_traces" "', argument " "1"" of type '" "freeling::traces *""'"); 
    }
    arg1 = reinterpret_cast< freeling::traces * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_lang_ident) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::lang_ident *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_lang_ident(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::lang_ident *)new freeling::lang_ident((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__lang_ident, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_lang_ident) {
  {
    freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_lang_ident(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__lang_ident, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lang_ident" "', argument " "1"" of type '" "freeling::lang_ident *""'"); 
    }
    arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_lang_ident_identify_language__SWIG_0) {
  {
    freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
    std::wstring *arg2 = 0 ;
    std::set< std::wstring > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: lang_ident_identify_language(self,std::wstring const &,ls);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_identify_language" "', argument " "1"" of type '" "freeling::lang_ident const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_std__setT_std__wstring_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lang_ident_identify_language" "', argument " "3"" of type '" "std::set< std::wstring > const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_identify_language" "', argument " "3"" of type '" "std::set< std::wstring > const &""'"); 
    }
    arg3 = reinterpret_cast< std::set< std::wstring > * >(argp3);
    result = ((freeling::lang_ident const *)arg1)->identify_language((std::wstring const &)*arg2,(std::set< std::wstring > const &)*arg3);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_lang_ident_identify_language__SWIG_1) {
  {
    freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: lang_ident_identify_language(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_identify_language" "', argument " "1"" of type '" "freeling::lang_ident const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = ((freeling::lang_ident const *)arg1)->identify_language((std::wstring const &)*arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_lang_ident_identify_language) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__lang_ident, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__lang_ident, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_std__setT_std__wstring_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_lang_ident_identify_language__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_lang_ident_identify_language__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'lang_ident_identify_language'");
  XSRETURN(0);
}


XS(_wrap_lang_ident_rank_languages__SWIG_0) {
  {
    freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
    std::vector< std::pair< double,std::wstring > > *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    std::set< std::wstring > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::wstring wtemp3 ;
    void *argp4 ;
    int res4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: lang_ident_rank_languages(self,std::vector< std::pair< double,std::wstring > > &,std::wstring const &,ls);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_rank_languages" "', argument " "1"" of type '" "freeling::lang_ident const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lang_ident_rank_languages" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_rank_languages" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp2);
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_std__setT_std__wstring_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lang_ident_rank_languages" "', argument " "4"" of type '" "std::set< std::wstring > const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_rank_languages" "', argument " "4"" of type '" "std::set< std::wstring > const &""'"); 
    }
    arg4 = reinterpret_cast< std::set< std::wstring > * >(argp4);
    ((freeling::lang_ident const *)arg1)->rank_languages(*arg2,(std::wstring const &)*arg3,(std::set< std::wstring > const &)*arg4);
    ST(argvi) = sv_newmortal();
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_lang_ident_rank_languages__SWIG_1) {
  {
    freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
    std::vector< std::pair< double,std::wstring > > *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::wstring wtemp3 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: lang_ident_rank_languages(self,std::vector< std::pair< double,std::wstring > > &,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_rank_languages" "', argument " "1"" of type '" "freeling::lang_ident const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lang_ident_rank_languages" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_rank_languages" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp2);
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    ((freeling::lang_ident const *)arg1)->rank_languages(*arg2,(std::wstring const &)*arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_lang_ident_rank_languages) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__lang_ident, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__lang_ident, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_std__setT_std__wstring_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_lang_ident_rank_languages__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_lang_ident_rank_languages__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'lang_ident_rank_languages'");
  XSRETURN(0);
}


XS(_wrap_new_tokenizer) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::tokenizer *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_tokenizer(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::tokenizer *)new freeling::tokenizer((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tokenizer, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_tokenizer) {
  {
    freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_tokenizer(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tokenizer, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tokenizer" "', argument " "1"" of type '" "freeling::tokenizer *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tokenizer * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_tokenizer_tokenize__SWIG_0) {
  {
    freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::list< freeling::word > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: tokenizer_tokenize(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tokenizer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenizer_tokenize" "', argument " "1"" of type '" "freeling::tokenizer *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tokenizer * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = (arg1)->tokenize((std::wstring const &)*arg2);
    {
      std::list<freeling::word>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::word* ptr = new freeling::word(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__word, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_tokenizer_tokenize__SWIG_1) {
  {
    freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
    std::wstring *arg2 = 0 ;
    unsigned long *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    std::list< freeling::word > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: tokenizer_tokenize(self,std::wstring const &,unsigned long &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tokenizer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenizer_tokenize" "', argument " "1"" of type '" "freeling::tokenizer *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tokenizer * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_unsigned_long,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tokenizer_tokenize" "', argument " "3"" of type '" "unsigned long &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "3"" of type '" "unsigned long &""'"); 
    }
    arg3 = reinterpret_cast< unsigned long * >(argp3);
    result = (arg1)->tokenize((std::wstring const &)*arg2,*arg3);
    {
      std::list<freeling::word>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::word* ptr = new freeling::word(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__word, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_tokenizer_tokenize) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tokenizer, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__tokenizer, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_unsigned_long, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_tokenizer_tokenize__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_tokenizer_tokenize__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'tokenizer_tokenize'");
  XSRETURN(0);
}


XS(_wrap_new_splitter) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::splitter *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_splitter(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::splitter *)new freeling::splitter((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__splitter, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_splitter) {
  {
    freeling::splitter *arg1 = (freeling::splitter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_splitter(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__splitter, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_splitter" "', argument " "1"" of type '" "freeling::splitter *""'"); 
    }
    arg1 = reinterpret_cast< freeling::splitter * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_splitter_split) {
  {
    freeling::splitter *arg1 = (freeling::splitter *) 0 ;
    std::list< freeling::word > *arg2 = 0 ;
    bool arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::word > temp2 ;
    std::list< freeling::word > *v2 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: splitter_split(self,std::list< freeling::word > const &,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__splitter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "splitter_split" "', argument " "1"" of type '" "freeling::splitter *""'"); 
    }
    arg1 = reinterpret_cast< freeling::splitter * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__word_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of splitter_split. "
          "Expected an array of " "freeling::word");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::word* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__word,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "splitter_split. "
              "Expected an array of " "freeling::word");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of splitter_split. "
          "Expected an array of " "freeling::word");
      }
    }
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "splitter_split" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    result = (arg1)->split((std::list< freeling::word > const &)*arg2,arg3);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_Lang_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_Lang_set(self,Lang);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Lang_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->Lang = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_Lang_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_Lang_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Lang_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->Lang);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_AffixAnalysis_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_AffixAnalysis_set(self,AffixAnalysis);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_AffixAnalysis_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_AffixAnalysis_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->AffixAnalysis = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_AffixAnalysis_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_AffixAnalysis_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_AffixAnalysis_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->AffixAnalysis);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_MultiwordsDetection_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_MultiwordsDetection_set(self,MultiwordsDetection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_MultiwordsDetection_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_MultiwordsDetection_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->MultiwordsDetection = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_MultiwordsDetection_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_MultiwordsDetection_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_MultiwordsDetection_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->MultiwordsDetection);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_NumbersDetection_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_NumbersDetection_set(self,NumbersDetection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_NumbersDetection_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_NumbersDetection_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->NumbersDetection = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_NumbersDetection_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_NumbersDetection_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_NumbersDetection_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->NumbersDetection);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_PunctuationDetection_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_PunctuationDetection_set(self,PunctuationDetection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_PunctuationDetection_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_PunctuationDetection_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->PunctuationDetection = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_PunctuationDetection_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_PunctuationDetection_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_PunctuationDetection_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->PunctuationDetection);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_DatesDetection_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_DatesDetection_set(self,DatesDetection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_DatesDetection_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_DatesDetection_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->DatesDetection = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_DatesDetection_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_DatesDetection_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_DatesDetection_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->DatesDetection);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_QuantitiesDetection_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_QuantitiesDetection_set(self,QuantitiesDetection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_QuantitiesDetection_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_QuantitiesDetection_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->QuantitiesDetection = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_QuantitiesDetection_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_QuantitiesDetection_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_QuantitiesDetection_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->QuantitiesDetection);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_DictionarySearch_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_DictionarySearch_set(self,DictionarySearch);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_DictionarySearch_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_DictionarySearch_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->DictionarySearch = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_DictionarySearch_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_DictionarySearch_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_DictionarySearch_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->DictionarySearch);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_ProbabilityAssignment_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_ProbabilityAssignment_set(self,ProbabilityAssignment);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityAssignment_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_ProbabilityAssignment_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->ProbabilityAssignment = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_ProbabilityAssignment_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_ProbabilityAssignment_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityAssignment_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->ProbabilityAssignment);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_OrthographicCorrection_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_OrthographicCorrection_set(self,OrthographicCorrection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_OrthographicCorrection_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_OrthographicCorrection_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->OrthographicCorrection = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_OrthographicCorrection_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_OrthographicCorrection_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_OrthographicCorrection_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->OrthographicCorrection);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_UserMap_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_UserMap_set(self,UserMap);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_UserMap_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_UserMap_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->UserMap = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_UserMap_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_UserMap_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_UserMap_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->UserMap);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_NERecognition_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_NERecognition_set(self,NERecognition);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_NERecognition_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_NERecognition_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->NERecognition = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_NERecognition_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_NERecognition_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_NERecognition_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (int) ((arg1)->NERecognition);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_LocutionsFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_LocutionsFile_set(self,LocutionsFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_LocutionsFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->LocutionsFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_LocutionsFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_LocutionsFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_LocutionsFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->LocutionsFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_QuantitiesFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_QuantitiesFile_set(self,QuantitiesFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_QuantitiesFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->QuantitiesFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_QuantitiesFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_QuantitiesFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_QuantitiesFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->QuantitiesFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_AffixFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_AffixFile_set(self,AffixFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_AffixFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->AffixFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_AffixFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_AffixFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_AffixFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->AffixFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_ProbabilityFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_ProbabilityFile_set(self,ProbabilityFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->ProbabilityFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_ProbabilityFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_ProbabilityFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->ProbabilityFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_DictionaryFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_DictionaryFile_set(self,DictionaryFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_DictionaryFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->DictionaryFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_DictionaryFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_DictionaryFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_DictionaryFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->DictionaryFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_NPdataFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_NPdataFile_set(self,NPdataFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_NPdataFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->NPdataFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_NPdataFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_NPdataFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_NPdataFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->NPdataFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_PunctuationFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_PunctuationFile_set(self,PunctuationFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_PunctuationFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->PunctuationFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_PunctuationFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_PunctuationFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_PunctuationFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->PunctuationFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_CorrectorFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_CorrectorFile_set(self,CorrectorFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_CorrectorFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->CorrectorFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_CorrectorFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_CorrectorFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_CorrectorFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->CorrectorFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_UserMapFile_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_UserMapFile_set(self,UserMapFile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_UserMapFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->UserMapFile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_UserMapFile_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_UserMapFile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_UserMapFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->UserMapFile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_Decimal_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_Decimal_set(self,Decimal);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Decimal_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->Decimal = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_Decimal_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_Decimal_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Decimal_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->Decimal);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_Thousand_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_Thousand_set(self,Thousand);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Thousand_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->Thousand = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_Thousand_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_Thousand_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Thousand_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result =  ((arg1)->Thousand);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_ProbabilityThreshold_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_ProbabilityThreshold_set(self,ProbabilityThreshold);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityThreshold_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_ProbabilityThreshold_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->ProbabilityThreshold = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_ProbabilityThreshold_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_ProbabilityThreshold_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityThreshold_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (double) ((arg1)->ProbabilityThreshold);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_InverseDict_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_InverseDict_set(self,InverseDict);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_InverseDict_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_InverseDict_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->InverseDict = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_InverseDict_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_InverseDict_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_InverseDict_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->InverseDict);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_RetokContractions_set) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_RetokContractions_set(self,RetokContractions);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_RetokContractions_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_RetokContractions_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->RetokContractions = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_RetokContractions_get) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maco_options_RetokContractions_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_RetokContractions_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (bool) ((arg1)->RetokContractions);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_maco_options) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::maco_options *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_maco_options(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::maco_options *)new freeling::maco_options((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__maco_options, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_maco_options) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_maco_options(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_maco_options" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_set_active_modules) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    bool arg7 ;
    bool arg8 ;
    bool arg9 ;
    bool arg10 ;
    bool arg11 ;
    bool arg12 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    bool val4 ;
    int ecode4 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    bool val6 ;
    int ecode6 = 0 ;
    bool val7 ;
    int ecode7 = 0 ;
    bool val8 ;
    int ecode8 = 0 ;
    bool val9 ;
    int ecode9 = 0 ;
    bool val10 ;
    int ecode10 = 0 ;
    bool val11 ;
    int ecode11 = 0 ;
    bool val12 ;
    int ecode12 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 12) || (items > 12)) {
      SWIG_croak("Usage: maco_options_set_active_modules(self,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_active_modules" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_set_active_modules" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "maco_options_set_active_modules" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "maco_options_set_active_modules" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "maco_options_set_active_modules" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    ecode6 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "maco_options_set_active_modules" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
    ecode7 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "maco_options_set_active_modules" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
    ecode8 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "maco_options_set_active_modules" "', argument " "8"" of type '" "bool""'");
    } 
    arg8 = static_cast< bool >(val8);
    ecode9 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "maco_options_set_active_modules" "', argument " "9"" of type '" "bool""'");
    } 
    arg9 = static_cast< bool >(val9);
    ecode10 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "maco_options_set_active_modules" "', argument " "10"" of type '" "bool""'");
    } 
    arg10 = static_cast< bool >(val10);
    ecode11 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "maco_options_set_active_modules" "', argument " "11"" of type '" "bool""'");
    } 
    arg11 = static_cast< bool >(val11);
    ecode12 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "maco_options_set_active_modules" "', argument " "12"" of type '" "bool""'");
    } 
    arg12 = static_cast< bool >(val12);
    (arg1)->set_active_modules(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    ST(argvi) = sv_newmortal();
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_set_data_files) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    std::wstring *arg4 = 0 ;
    std::wstring *arg5 = 0 ;
    std::wstring *arg6 = 0 ;
    std::wstring *arg7 = 0 ;
    std::wstring *arg8 = 0 ;
    std::wstring *arg9 = 0 ;
    std::wstring *arg10 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    std::wstring wtemp4 ;
    std::wstring wtemp5 ;
    std::wstring wtemp6 ;
    std::wstring wtemp7 ;
    std::wstring wtemp8 ;
    std::wstring wtemp9 ;
    std::wstring wtemp10 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 10) || (items > 10)) {
      SWIG_croak("Usage: maco_options_set_data_files(self,std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_data_files" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    {
      std::string aux (SvPV(ST(3), PL_na));
      wtemp4 = freeling::util::string2wstring(aux);
      arg4 = &wtemp4;
    }
    {
      std::string aux (SvPV(ST(4), PL_na));
      wtemp5 = freeling::util::string2wstring(aux);
      arg5 = &wtemp5;
    }
    {
      std::string aux (SvPV(ST(5), PL_na));
      wtemp6 = freeling::util::string2wstring(aux);
      arg6 = &wtemp6;
    }
    {
      std::string aux (SvPV(ST(6), PL_na));
      wtemp7 = freeling::util::string2wstring(aux);
      arg7 = &wtemp7;
    }
    {
      std::string aux (SvPV(ST(7), PL_na));
      wtemp8 = freeling::util::string2wstring(aux);
      arg8 = &wtemp8;
    }
    {
      std::string aux (SvPV(ST(8), PL_na));
      wtemp9 = freeling::util::string2wstring(aux);
      arg9 = &wtemp9;
    }
    {
      std::string aux (SvPV(ST(9), PL_na));
      wtemp10 = freeling::util::string2wstring(aux);
      arg10 = &wtemp10;
    }
    (arg1)->set_data_files((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,(std::wstring const &)*arg5,(std::wstring const &)*arg6,(std::wstring const &)*arg7,(std::wstring const &)*arg8,(std::wstring const &)*arg9,(std::wstring const &)*arg10);
    ST(argvi) = sv_newmortal();
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_set_nummerical_points) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: maco_options_set_nummerical_points(self,std::wstring const &,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_nummerical_points" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    (arg1)->set_nummerical_points((std::wstring const &)*arg2,(std::wstring const &)*arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_set_threshold) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_set_threshold(self,double);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_threshold" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_set_threshold" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    (arg1)->set_threshold(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_set_inverse_dict) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_set_inverse_dict(self,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_inverse_dict" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_set_inverse_dict" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->set_inverse_dict(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_options_set_retok_contractions) {
  {
    freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_options_set_retok_contractions(self,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_retok_contractions" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_set_retok_contractions" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->set_retok_contractions(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_maco) {
  {
    freeling::maco_options *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    freeling::maco *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_maco(freeling::maco_options const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_freeling__maco_options,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_maco" "', argument " "1"" of type '" "freeling::maco_options const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_maco" "', argument " "1"" of type '" "freeling::maco_options const &""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
    result = (freeling::maco *)new freeling::maco((freeling::maco_options const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__maco, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_maco) {
  {
    freeling::maco *arg1 = (freeling::maco *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_maco(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_maco" "', argument " "1"" of type '" "freeling::maco *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_analyze__SWIG_0) {
  {
    freeling::maco *arg1 = (freeling::maco *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_analyze" "', argument " "1"" of type '" "freeling::maco *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_analyze__SWIG_1) {
  {
    freeling::maco *arg1 = (freeling::maco *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: maco_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__maco, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_analyze" "', argument " "1"" of type '" "freeling::maco *""'"); 
    }
    arg1 = reinterpret_cast< freeling::maco * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of maco_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "maco_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of maco_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maco_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__maco, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__maco, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_maco_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_maco_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'maco_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_RE_map) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::RE_map *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_RE_map(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::RE_map *)new freeling::RE_map((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__RE_map, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_RE_map) {
  {
    freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_RE_map(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__RE_map, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RE_map" "', argument " "1"" of type '" "freeling::RE_map *""'"); 
    }
    arg1 = reinterpret_cast< freeling::RE_map * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_RE_map_analyze__SWIG_0) {
  {
    freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RE_map_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__RE_map, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RE_map_analyze" "', argument " "1"" of type '" "freeling::RE_map *""'"); 
    }
    arg1 = reinterpret_cast< freeling::RE_map * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RE_map_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RE_map_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RE_map_analyze__SWIG_1) {
  {
    freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RE_map_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__RE_map, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RE_map_analyze" "', argument " "1"" of type '" "freeling::RE_map *""'"); 
    }
    arg1 = reinterpret_cast< freeling::RE_map * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of RE_map_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "RE_map_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of RE_map_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RE_map_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__RE_map, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__RE_map, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_RE_map_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_RE_map_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'RE_map_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_numbers) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    int argvi = 0;
    freeling::numbers *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_numbers(std::wstring const &,std::wstring const &,std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    result = (freeling::numbers *)new freeling::numbers((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__numbers, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_numbers) {
  {
    freeling::numbers *arg1 = (freeling::numbers *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_numbers(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__numbers, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_numbers" "', argument " "1"" of type '" "freeling::numbers *""'"); 
    }
    arg1 = reinterpret_cast< freeling::numbers * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_numbers_analyze__SWIG_0) {
  {
    freeling::numbers *arg1 = (freeling::numbers *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: numbers_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__numbers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "numbers_analyze" "', argument " "1"" of type '" "freeling::numbers *""'"); 
    }
    arg1 = reinterpret_cast< freeling::numbers * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "numbers_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "numbers_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_numbers_analyze__SWIG_1) {
  {
    freeling::numbers *arg1 = (freeling::numbers *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: numbers_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__numbers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "numbers_analyze" "', argument " "1"" of type '" "freeling::numbers *""'"); 
    }
    arg1 = reinterpret_cast< freeling::numbers * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of numbers_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "numbers_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of numbers_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_numbers_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__numbers, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__numbers, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_numbers_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_numbers_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'numbers_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_punts) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::punts *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_punts(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::punts *)new freeling::punts((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__punts, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_punts) {
  {
    freeling::punts *arg1 = (freeling::punts *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_punts(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__punts, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_punts" "', argument " "1"" of type '" "freeling::punts *""'"); 
    }
    arg1 = reinterpret_cast< freeling::punts * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_punts_analyze__SWIG_0) {
  {
    freeling::punts *arg1 = (freeling::punts *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: punts_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__punts, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "punts_analyze" "', argument " "1"" of type '" "freeling::punts *""'"); 
    }
    arg1 = reinterpret_cast< freeling::punts * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "punts_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "punts_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_punts_analyze__SWIG_1) {
  {
    freeling::punts *arg1 = (freeling::punts *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: punts_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__punts, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "punts_analyze" "', argument " "1"" of type '" "freeling::punts *""'"); 
    }
    arg1 = reinterpret_cast< freeling::punts * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of punts_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "punts_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of punts_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_punts_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__punts, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__punts, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_punts_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_punts_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'punts_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_dates) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::dates *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_dates(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::dates *)new freeling::dates((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dates, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_dates) {
  {
    freeling::dates *arg1 = (freeling::dates *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_dates(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dates, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dates" "', argument " "1"" of type '" "freeling::dates *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dates * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_dates_analyze__SWIG_0) {
  {
    freeling::dates *arg1 = (freeling::dates *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: dates_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dates, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dates_analyze" "', argument " "1"" of type '" "freeling::dates *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dates * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dates_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dates_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dates_analyze__SWIG_1) {
  {
    freeling::dates *arg1 = (freeling::dates *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: dates_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dates, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dates_analyze" "', argument " "1"" of type '" "freeling::dates *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dates * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of dates_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "dates_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of dates_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dates_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__dates, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__dates, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_dates_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_dates_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'dates_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_dictionary__SWIG_0) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    bool arg3 ;
    std::wstring *arg4 = 0 ;
    bool arg5 ;
    bool arg6 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    bool val3 ;
    int ecode3 = 0 ;
    std::wstring wtemp4 ;
    bool val5 ;
    int ecode5 = 0 ;
    bool val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    freeling::dictionary *result = 0 ;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: new_dictionary(std::wstring const &,std::wstring const &,bool,std::wstring const &,invDic,retok);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_dictionary" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    {
      std::string aux (SvPV(ST(3), PL_na));
      wtemp4 = freeling::util::string2wstring(aux);
      arg4 = &wtemp4;
    }
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_dictionary" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    ecode6 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_dictionary" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
    result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,arg3,(std::wstring const &)*arg4,arg5,arg6);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dictionary, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_dictionary__SWIG_1) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    bool arg3 ;
    std::wstring *arg4 = 0 ;
    bool arg5 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    bool val3 ;
    int ecode3 = 0 ;
    std::wstring wtemp4 ;
    bool val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    freeling::dictionary *result = 0 ;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: new_dictionary(std::wstring const &,std::wstring const &,bool,std::wstring const &,invDic);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_dictionary" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    {
      std::string aux (SvPV(ST(3), PL_na));
      wtemp4 = freeling::util::string2wstring(aux);
      arg4 = &wtemp4;
    }
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_dictionary" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,arg3,(std::wstring const &)*arg4,arg5);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dictionary, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_dictionary__SWIG_2) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    bool arg3 ;
    std::wstring *arg4 = 0 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    bool val3 ;
    int ecode3 = 0 ;
    std::wstring wtemp4 ;
    int argvi = 0;
    freeling::dictionary *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_dictionary(std::wstring const &,std::wstring const &,bool,std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_dictionary" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    {
      std::string aux (SvPV(ST(3), PL_na));
      wtemp4 = freeling::util::string2wstring(aux);
      arg4 = &wtemp4;
    }
    result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,arg3,(std::wstring const &)*arg4);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dictionary, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_dictionary) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(3), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(3), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(3), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_dictionary__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_dictionary__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_dictionary__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_dictionary'");
  XSRETURN(0);
}


XS(_wrap_delete_dictionary) {
  {
    freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_dictionary(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dictionary, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dictionary" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_dictionary_search_form) {
  {
    freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
    std::wstring *arg2 = 0 ;
    std::list< freeling::analysis > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: dictionary_search_form(self,std::wstring const &,std::list< freeling::analysis > &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_search_form" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_std__listT_freeling__analysis_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dictionary_search_form" "', argument " "3"" of type '" "std::list< freeling::analysis > &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_search_form" "', argument " "3"" of type '" "std::list< freeling::analysis > &""'"); 
    }
    arg3 = reinterpret_cast< std::list< freeling::analysis > * >(argp3);
    (arg1)->search_form((std::wstring const &)*arg2,*arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dictionary_annotate_word) {
  {
    freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
    freeling::word *arg2 = 0 ;
    std::list< freeling::word > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: dictionary_annotate_word(self,freeling::word &,std::list< freeling::word > &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_annotate_word" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_std__listT_freeling__word_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dictionary_annotate_word" "', argument " "3"" of type '" "std::list< freeling::word > &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_annotate_word" "', argument " "3"" of type '" "std::list< freeling::word > &""'"); 
    }
    arg3 = reinterpret_cast< std::list< freeling::word > * >(argp3);
    result = (bool)(arg1)->annotate_word(*arg2,*arg3);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dictionary_get_forms) {
  {
    freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    int argvi = 0;
    std::list< std::wstring > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: dictionary_get_forms(self,std::wstring const &,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_get_forms" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    result = ((freeling::dictionary const *)arg1)->get_forms((std::wstring const &)*arg2,(std::wstring const &)*arg3);
    {
      std::list<std::wstring>::const_iterator i;
      unsigned int j;
      int len = (& result)->size();
      SV **svs = new SV*[len];
      for (i=(& result)->begin(), j=0; i!=(& result)->end(); i++, j++) {
        std::string ptr = freeling::util::wstring2string(*i);
        svs[j] = sv_2mortal(newSVpv(ptr.c_str(), 0));
        SvUTF8_on(svs[j]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dictionary_analyze__SWIG_0) {
  {
    freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: dictionary_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_analyze" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dictionary_analyze__SWIG_1) {
  {
    freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: dictionary_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_analyze" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of dictionary_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "dictionary_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of dictionary_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dictionary_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__dictionary, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__dictionary, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_dictionary_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_dictionary_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'dictionary_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_locutions) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::locutions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_locutions(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::locutions *)new freeling::locutions((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__locutions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_locutions) {
  {
    freeling::locutions *arg1 = (freeling::locutions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_locutions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__locutions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_locutions" "', argument " "1"" of type '" "freeling::locutions *""'"); 
    }
    arg1 = reinterpret_cast< freeling::locutions * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_locutions_add_locution) {
  {
    freeling::locutions *arg1 = (freeling::locutions *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: locutions_add_locution(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__locutions, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locutions_add_locution" "', argument " "1"" of type '" "freeling::locutions *""'"); 
    }
    arg1 = reinterpret_cast< freeling::locutions * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    (arg1)->add_locution((std::wstring const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_locutions_analyze__SWIG_0) {
  {
    freeling::locutions *arg1 = (freeling::locutions *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: locutions_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__locutions, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locutions_analyze" "', argument " "1"" of type '" "freeling::locutions *""'"); 
    }
    arg1 = reinterpret_cast< freeling::locutions * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "locutions_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "locutions_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_locutions_analyze__SWIG_1) {
  {
    freeling::locutions *arg1 = (freeling::locutions *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: locutions_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__locutions, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locutions_analyze" "', argument " "1"" of type '" "freeling::locutions *""'"); 
    }
    arg1 = reinterpret_cast< freeling::locutions * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of locutions_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "locutions_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of locutions_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_locutions_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__locutions, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__locutions, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_locutions_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_locutions_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'locutions_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_ner) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::ner *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ner(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::ner *)new freeling::ner((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__ner, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ner) {
  {
    freeling::ner *arg1 = (freeling::ner *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ner(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__ner, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ner" "', argument " "1"" of type '" "freeling::ner *""'"); 
    }
    arg1 = reinterpret_cast< freeling::ner * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ner_analyze__SWIG_0) {
  {
    freeling::ner *arg1 = (freeling::ner *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ner_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__ner, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ner_analyze" "', argument " "1"" of type '" "freeling::ner *""'"); 
    }
    arg1 = reinterpret_cast< freeling::ner * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ner_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ner_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ner_analyze__SWIG_1) {
  {
    freeling::ner *arg1 = (freeling::ner *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ner_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__ner, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ner_analyze" "', argument " "1"" of type '" "freeling::ner *""'"); 
    }
    arg1 = reinterpret_cast< freeling::ner * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of ner_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "ner_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of ner_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ner_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__ner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__ner, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ner_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ner_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ner_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_quantities) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    freeling::quantities *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_quantities(std::wstring const &,std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = (freeling::quantities *)new freeling::quantities((std::wstring const &)*arg1,(std::wstring const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__quantities, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_quantities) {
  {
    freeling::quantities *arg1 = (freeling::quantities *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_quantities(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__quantities, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_quantities" "', argument " "1"" of type '" "freeling::quantities *""'"); 
    }
    arg1 = reinterpret_cast< freeling::quantities * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_quantities_analyze__SWIG_0) {
  {
    freeling::quantities *arg1 = (freeling::quantities *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: quantities_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__quantities, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quantities_analyze" "', argument " "1"" of type '" "freeling::quantities *""'"); 
    }
    arg1 = reinterpret_cast< freeling::quantities * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quantities_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quantities_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_quantities_analyze__SWIG_1) {
  {
    freeling::quantities *arg1 = (freeling::quantities *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: quantities_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__quantities, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quantities_analyze" "', argument " "1"" of type '" "freeling::quantities *""'"); 
    }
    arg1 = reinterpret_cast< freeling::quantities * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of quantities_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "quantities_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of quantities_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_quantities_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__quantities, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__quantities, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_quantities_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_quantities_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'quantities_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_probabilities) {
  {
    std::wstring *arg1 = 0 ;
    double arg2 ;
    std::wstring wtemp1 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    freeling::probabilities *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_probabilities(std::wstring const &,double);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_probabilities" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    result = (freeling::probabilities *)new freeling::probabilities((std::wstring const &)*arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__probabilities, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_probabilities) {
  {
    freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_probabilities(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__probabilities, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_probabilities" "', argument " "1"" of type '" "freeling::probabilities *""'"); 
    }
    arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_probabilities_annotate_word) {
  {
    freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
    freeling::word *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: probabilities_annotate_word(self,freeling::word &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_annotate_word" "', argument " "1"" of type '" "freeling::probabilities *""'"); 
    }
    arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__word,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probabilities_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probabilities_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
    }
    arg2 = reinterpret_cast< freeling::word * >(argp2);
    (arg1)->annotate_word(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_probabilities_set_activate_guesser) {
  {
    freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: probabilities_set_activate_guesser(self,bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_set_activate_guesser" "', argument " "1"" of type '" "freeling::probabilities *""'"); 
    }
    arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probabilities_set_activate_guesser" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->set_activate_guesser(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_probabilities_analyze__SWIG_0) {
  {
    freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: probabilities_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_analyze" "', argument " "1"" of type '" "freeling::probabilities *""'"); 
    }
    arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probabilities_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probabilities_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_probabilities_analyze__SWIG_1) {
  {
    freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: probabilities_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_analyze" "', argument " "1"" of type '" "freeling::probabilities *""'"); 
    }
    arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of probabilities_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "probabilities_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of probabilities_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_probabilities_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__probabilities, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__probabilities, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_probabilities_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_probabilities_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'probabilities_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_hmm_tagger__SWIG_0) {
  {
    std::wstring *arg1 = 0 ;
    bool arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    std::wstring wtemp1 ;
    bool val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    freeling::hmm_tagger *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_hmm_tagger(std::wstring const &,bool,unsigned int,kb);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_hmm_tagger" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_hmm_tagger" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_hmm_tagger" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (freeling::hmm_tagger *)new freeling::hmm_tagger((std::wstring const &)*arg1,arg2,arg3,arg4);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__hmm_tagger, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_hmm_tagger__SWIG_1) {
  {
    std::wstring *arg1 = 0 ;
    bool arg2 ;
    unsigned int arg3 ;
    std::wstring wtemp1 ;
    bool val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    freeling::hmm_tagger *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_hmm_tagger(std::wstring const &,bool,unsigned int);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_hmm_tagger" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_hmm_tagger" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (freeling::hmm_tagger *)new freeling::hmm_tagger((std::wstring const &)*arg1,arg2,arg3);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__hmm_tagger, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_hmm_tagger) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_hmm_tagger__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_hmm_tagger__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_hmm_tagger'");
  XSRETURN(0);
}


XS(_wrap_delete_hmm_tagger) {
  {
    freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_hmm_tagger(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__hmm_tagger, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hmm_tagger" "', argument " "1"" of type '" "freeling::hmm_tagger *""'"); 
    }
    arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hmm_tagger_analyze__SWIG_0) {
  {
    freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: hmm_tagger_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__hmm_tagger, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hmm_tagger_analyze" "', argument " "1"" of type '" "freeling::hmm_tagger *""'"); 
    }
    arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hmm_tagger_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hmm_tagger_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_hmm_tagger_analyze__SWIG_1) {
  {
    freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: hmm_tagger_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__hmm_tagger, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hmm_tagger_analyze" "', argument " "1"" of type '" "freeling::hmm_tagger *""'"); 
    }
    arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of hmm_tagger_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "hmm_tagger_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of hmm_tagger_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_hmm_tagger_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__hmm_tagger, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__hmm_tagger, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_hmm_tagger_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_hmm_tagger_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'hmm_tagger_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_relax_tagger) {
  {
    std::wstring *arg1 = 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    bool arg5 ;
    unsigned int arg6 ;
    std::wstring wtemp1 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    freeling::relax_tagger *result = 0 ;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: new_relax_tagger(std::wstring const &,int,double,double,bool,unsigned int);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_relax_tagger" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_relax_tagger" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_relax_tagger" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_relax_tagger" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_relax_tagger" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    result = (freeling::relax_tagger *)new freeling::relax_tagger((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__relax_tagger, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_relax_tagger) {
  {
    freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_relax_tagger(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__relax_tagger, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_relax_tagger" "', argument " "1"" of type '" "freeling::relax_tagger *""'"); 
    }
    arg1 = reinterpret_cast< freeling::relax_tagger * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_relax_tagger_analyze__SWIG_0) {
  {
    freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: relax_tagger_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__relax_tagger, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relax_tagger_analyze" "', argument " "1"" of type '" "freeling::relax_tagger *""'"); 
    }
    arg1 = reinterpret_cast< freeling::relax_tagger * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "relax_tagger_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "relax_tagger_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_relax_tagger_analyze__SWIG_1) {
  {
    freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: relax_tagger_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__relax_tagger, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relax_tagger_analyze" "', argument " "1"" of type '" "freeling::relax_tagger *""'"); 
    }
    arg1 = reinterpret_cast< freeling::relax_tagger * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of relax_tagger_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "relax_tagger_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of relax_tagger_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_relax_tagger_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__relax_tagger, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__relax_tagger, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_relax_tagger_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_relax_tagger_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'relax_tagger_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_phonetics) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::phonetics *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_phonetics(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::phonetics *)new freeling::phonetics((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__phonetics, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_phonetics) {
  {
    freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_phonetics(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__phonetics, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_phonetics" "', argument " "1"" of type '" "freeling::phonetics *""'"); 
    }
    arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_phonetics_get_sound) {
  {
    freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: phonetics_get_sound(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__phonetics, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phonetics_get_sound" "', argument " "1"" of type '" "freeling::phonetics *""'"); 
    }
    arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = (arg1)->get_sound((std::wstring const &)*arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_phonetics_analyze__SWIG_0) {
  {
    freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: phonetics_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__phonetics, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phonetics_analyze" "', argument " "1"" of type '" "freeling::phonetics *""'"); 
    }
    arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "phonetics_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "phonetics_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_phonetics_analyze__SWIG_1) {
  {
    freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: phonetics_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__phonetics, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phonetics_analyze" "', argument " "1"" of type '" "freeling::phonetics *""'"); 
    }
    arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of phonetics_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "phonetics_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of phonetics_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_phonetics_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__phonetics, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__phonetics, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_phonetics_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_phonetics_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'phonetics_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_nec) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::nec *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_nec(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::nec *)new freeling::nec((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__nec, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_nec) {
  {
    freeling::nec *arg1 = (freeling::nec *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_nec(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__nec, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_nec" "', argument " "1"" of type '" "freeling::nec *""'"); 
    }
    arg1 = reinterpret_cast< freeling::nec * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_nec_analyze__SWIG_0) {
  {
    freeling::nec *arg1 = (freeling::nec *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: nec_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__nec, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nec_analyze" "', argument " "1"" of type '" "freeling::nec *""'"); 
    }
    arg1 = reinterpret_cast< freeling::nec * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nec_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nec_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_nec_analyze__SWIG_1) {
  {
    freeling::nec *arg1 = (freeling::nec *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: nec_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__nec, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nec_analyze" "', argument " "1"" of type '" "freeling::nec *""'"); 
    }
    arg1 = reinterpret_cast< freeling::nec * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of nec_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "nec_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of nec_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_nec_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__nec, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__nec, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_nec_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_nec_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'nec_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_chart_parser) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::chart_parser *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_chart_parser(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::chart_parser *)new freeling::chart_parser((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__chart_parser, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_chart_parser) {
  {
    freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_chart_parser(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__chart_parser, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_chart_parser" "', argument " "1"" of type '" "freeling::chart_parser *""'"); 
    }
    arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_chart_parser_get_start_symbol) {
  {
    freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: chart_parser_get_start_symbol(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__chart_parser, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chart_parser_get_start_symbol" "', argument " "1"" of type '" "freeling::chart_parser const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
    result = ((freeling::chart_parser const *)arg1)->get_start_symbol();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_chart_parser_analyze__SWIG_0) {
  {
    freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: chart_parser_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__chart_parser, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chart_parser_analyze" "', argument " "1"" of type '" "freeling::chart_parser *""'"); 
    }
    arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "chart_parser_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "chart_parser_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_chart_parser_analyze__SWIG_1) {
  {
    freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: chart_parser_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__chart_parser, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chart_parser_analyze" "', argument " "1"" of type '" "freeling::chart_parser *""'"); 
    }
    arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of chart_parser_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "chart_parser_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of chart_parser_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_chart_parser_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__chart_parser, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__chart_parser, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_chart_parser_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_chart_parser_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'chart_parser_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_dep_txala) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    freeling::dep_txala *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_dep_txala(std::wstring const &,std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = (freeling::dep_txala *)new freeling::dep_txala((std::wstring const &)*arg1,(std::wstring const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_txala, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_dep_txala) {
  {
    freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_dep_txala(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dep_txala, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dep_txala" "', argument " "1"" of type '" "freeling::dep_txala *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_dep_txala_analyze__SWIG_0) {
  {
    freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: dep_txala_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dep_txala, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_txala_analyze" "', argument " "1"" of type '" "freeling::dep_txala *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_txala_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_txala_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dep_txala_analyze__SWIG_1) {
  {
    freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: dep_txala_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__dep_txala, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_txala_analyze" "', argument " "1"" of type '" "freeling::dep_txala *""'"); 
    }
    arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of dep_txala_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "dep_txala_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of dep_txala_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dep_txala_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__dep_txala, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__dep_txala, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_dep_txala_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_dep_txala_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'dep_txala_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_senses) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::senses *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_senses(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::senses *)new freeling::senses((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__senses, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_senses) {
  {
    freeling::senses *arg1 = (freeling::senses *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_senses(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__senses, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_senses" "', argument " "1"" of type '" "freeling::senses *""'"); 
    }
    arg1 = reinterpret_cast< freeling::senses * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_senses_analyze__SWIG_0) {
  {
    freeling::senses *arg1 = (freeling::senses *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: senses_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__senses, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "senses_analyze" "', argument " "1"" of type '" "freeling::senses *""'"); 
    }
    arg1 = reinterpret_cast< freeling::senses * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "senses_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "senses_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_senses_analyze__SWIG_1) {
  {
    freeling::senses *arg1 = (freeling::senses *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: senses_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__senses, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "senses_analyze" "', argument " "1"" of type '" "freeling::senses *""'"); 
    }
    arg1 = reinterpret_cast< freeling::senses * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of senses_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "senses_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of senses_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_senses_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__senses, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__senses, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_senses_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_senses_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'senses_analyze'");
  XSRETURN(0);
}


XS(_wrap_new_ukb_wrap) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::ukb_wrap *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ukb_wrap(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::ukb_wrap *)new freeling::ukb_wrap((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__ukb_wrap, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ukb_wrap) {
  {
    freeling::ukb_wrap *arg1 = (freeling::ukb_wrap *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ukb_wrap(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__ukb_wrap, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ukb_wrap" "', argument " "1"" of type '" "freeling::ukb_wrap *""'"); 
    }
    arg1 = reinterpret_cast< freeling::ukb_wrap * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ukb_wrap_analyze__SWIG_0) {
  {
    freeling::ukb_wrap *arg1 = (freeling::ukb_wrap *) 0 ;
    freeling::sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    freeling::sentence result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ukb_wrap_analyze(self,freeling::sentence const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__ukb_wrap, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ukb_wrap_analyze" "', argument " "1"" of type '" "freeling::ukb_wrap *""'"); 
    }
    arg1 = reinterpret_cast< freeling::ukb_wrap * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_freeling__sentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ukb_wrap_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ukb_wrap_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
    }
    arg2 = reinterpret_cast< freeling::sentence * >(argp2);
    result = (arg1)->analyze((freeling::sentence const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ukb_wrap_analyze__SWIG_1) {
  {
    freeling::ukb_wrap *arg1 = (freeling::ukb_wrap *) 0 ;
    std::list< freeling::sentence > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::list< freeling::sentence > temp2 ;
    std::list< freeling::sentence > *v2 ;
    int argvi = 0;
    std::list< freeling::sentence > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ukb_wrap_analyze(self,std::list< freeling::sentence > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__ukb_wrap, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ukb_wrap_analyze" "', argument " "1"" of type '" "freeling::ukb_wrap *""'"); 
    }
    arg1 = reinterpret_cast< freeling::ukb_wrap * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__listT_freeling__sentence_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of ukb_wrap_analyze. "
          "Expected an array of " "freeling::sentence");
        SV **tv;
        I32 len = av_len(av) + 1;
        freeling::sentence* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_freeling__sentence,0) != -1) {
            temp2.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "ukb_wrap_analyze. "
              "Expected an array of " "freeling::sentence");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of ukb_wrap_analyze. "
          "Expected an array of " "freeling::sentence");
      }
    }
    result = (arg1)->analyze((std::list< freeling::sentence > const &)*arg2);
    {
      std::list<freeling::sentence>::const_iterator i;
      unsigned int j;
      int len = (&result)->size();
      SV **svs = new SV*[len];
      for (i=(&result)->begin(), j=0; i!=(&result)->end(); i++, j++) {
        freeling::sentence* ptr = new freeling::sentence(*i);
        svs[j] = sv_newmortal();
        SWIG_MakePtr(svs[j], (void*) ptr, 
          SWIGTYPE_p_freeling__sentence, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ukb_wrap_analyze) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__ukb_wrap, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_freeling__ukb_wrap, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped list? */
            std::list<freeling::sentence >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__listT_freeling__sentence_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                SV **tv;
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  freeling::sentence* obj;
                  tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_freeling__sentence,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ukb_wrap_analyze__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ukb_wrap_analyze__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'ukb_wrap_analyze'");
  XSRETURN(0);
}


XS(_wrap_sense_info_sense_set) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sense_info_sense_set(self,sense);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_sense_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->sense = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_sense_get) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sense_info_sense_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_sense_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    result =  ((arg1)->sense);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_parents_set) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    std::list< std::wstring > *arg2 = (std::list< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sense_info_parents_set(self,parents);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_parents_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_std__listT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_parents_set" "', argument " "2"" of type '" "std::list< std::wstring > *""'"); 
    }
    arg2 = reinterpret_cast< std::list< std::wstring > * >(argp2);
    if (arg1) (arg1)->parents = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_parents_get) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sense_info_parents_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_parents_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    result = (std::list< std::wstring > *)& ((arg1)->parents);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_semfile_set) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    std::wstring arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sense_info_semfile_set(self,semfile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_semfile_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = wtemp2;
    }
    if (arg1) (arg1)->semfile = arg2;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_semfile_get) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sense_info_semfile_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_semfile_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    result =  ((arg1)->semfile);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_words_set) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    std::list< std::wstring > *arg2 = (std::list< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sense_info_words_set(self,words);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_words_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_std__listT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_words_set" "', argument " "2"" of type '" "std::list< std::wstring > *""'"); 
    }
    arg2 = reinterpret_cast< std::list< std::wstring > * >(argp2);
    if (arg1) (arg1)->words = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_words_get) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sense_info_words_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_words_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    result = (std::list< std::wstring > *)& ((arg1)->words);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_tonto_set) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    std::list< std::wstring > *arg2 = (std::list< std::wstring > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sense_info_tonto_set(self,tonto);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_tonto_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_std__listT_std__wstring_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_tonto_set" "', argument " "2"" of type '" "std::list< std::wstring > *""'"); 
    }
    arg2 = reinterpret_cast< std::list< std::wstring > * >(argp2);
    if (arg1) (arg1)->tonto = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_tonto_get) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< std::wstring > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sense_info_tonto_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_tonto_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    result = (std::list< std::wstring > *)& ((arg1)->tonto);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_sense_info) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    freeling::sense_info *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_sense_info(std::wstring const &,std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = (freeling::sense_info *)new freeling::sense_info((std::wstring const &)*arg1,(std::wstring const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sense_info, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sense_info_get_parents_string) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: sense_info_get_parents_string(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_get_parents_string" "', argument " "1"" of type '" "freeling::sense_info const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    result = ((freeling::sense_info const *)arg1)->get_parents_string();
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_sense_info) {
  {
    freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_sense_info(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__sense_info, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sense_info" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
    }
    arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_semanticDB) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::semanticDB *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_semanticDB(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::semanticDB *)new freeling::semanticDB((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semanticDB, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_semanticDB) {
  {
    freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_semanticDB(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__semanticDB, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_semanticDB" "', argument " "1"" of type '" "freeling::semanticDB *""'"); 
    }
    arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_semanticDB_get_WN_keys) {
  {
    freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    std::wstring *arg4 = 0 ;
    std::list< std::pair< std::wstring,std::wstring > > *arg5 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    std::wstring wtemp4 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: semanticDB_get_WN_keys(self,std::wstring const &,std::wstring const &,std::wstring const &,std::list< std::pair< std::wstring,std::wstring > > &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__semanticDB, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semanticDB_get_WN_keys" "', argument " "1"" of type '" "freeling::semanticDB const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    {
      std::string aux (SvPV(ST(3), PL_na));
      wtemp4 = freeling::util::string2wstring(aux);
      arg4 = &wtemp4;
    }
    res5 = SWIG_ConvertPtr(ST(4), &argp5, SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "semanticDB_get_WN_keys" "', argument " "5"" of type '" "std::list< std::pair< std::wstring,std::wstring > > &""'"); 
    }
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_WN_keys" "', argument " "5"" of type '" "std::list< std::pair< std::wstring,std::wstring > > &""'"); 
    }
    arg5 = reinterpret_cast< std::list< std::pair< std::wstring,std::wstring > > * >(argp5);
    ((freeling::semanticDB const *)arg1)->get_WN_keys((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);
    ST(argvi) = sv_newmortal();
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_semanticDB_get_sense_words) {
  {
    freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::list< std::wstring > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: semanticDB_get_sense_words(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__semanticDB, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semanticDB_get_sense_words" "', argument " "1"" of type '" "freeling::semanticDB const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = ((freeling::semanticDB const *)arg1)->get_sense_words((std::wstring const &)*arg2);
    {
      std::list<std::wstring>::const_iterator i;
      unsigned int j;
      int len = (& result)->size();
      SV **svs = new SV*[len];
      for (i=(& result)->begin(), j=0; i!=(& result)->end(); i++, j++) {
        std::string ptr = freeling::util::wstring2string(*i);
        svs[j] = sv_2mortal(newSVpv(ptr.c_str(), 0));
        SvUTF8_on(svs[j]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_semanticDB_get_word_senses) {
  {
    freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    std::wstring *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    std::wstring wtemp4 ;
    int argvi = 0;
    std::list< std::wstring > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: semanticDB_get_word_senses(self,std::wstring const &,std::wstring const &,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__semanticDB, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semanticDB_get_word_senses" "', argument " "1"" of type '" "freeling::semanticDB const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    {
      std::string aux (SvPV(ST(3), PL_na));
      wtemp4 = freeling::util::string2wstring(aux);
      arg4 = &wtemp4;
    }
    result = ((freeling::semanticDB const *)arg1)->get_word_senses((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
    {
      std::list<std::wstring>::const_iterator i;
      unsigned int j;
      int len = (& result)->size();
      SV **svs = new SV*[len];
      for (i=(& result)->begin(), j=0; i!=(& result)->end(); i++, j++) {
        std::string ptr = freeling::util::wstring2string(*i);
        svs[j] = sv_2mortal(newSVpv(ptr.c_str(), 0));
        SvUTF8_on(svs[j]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_semanticDB_get_sense_info) {
  {
    freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    SwigValueWrapper< freeling::sense_info > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: semanticDB_get_sense_info(self,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__semanticDB, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semanticDB_get_sense_info" "', argument " "1"" of type '" "freeling::semanticDB const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = ((freeling::semanticDB const *)arg1)->get_sense_info((std::wstring const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new freeling::sense_info(static_cast< const freeling::sense_info& >(result))), SWIGTYPE_p_freeling__sense_info, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_tagset) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    freeling::tagset *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_tagset(f);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (freeling::tagset *)new freeling::tagset((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tagset, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_tagset) {
  {
    freeling::tagset *arg1 = (freeling::tagset *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_tagset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tagset, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagset" "', argument " "1"" of type '" "freeling::tagset *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tagset * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_tagset_get_short_tag) {
  {
    freeling::tagset *arg1 = (freeling::tagset *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: tagset_get_short_tag(self,tag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_get_short_tag" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tagset * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = ((freeling::tagset const *)arg1)->get_short_tag((std::wstring const &)*arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_tagset_get_msf_features) {
  {
    freeling::tagset *arg1 = (freeling::tagset *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    SwigValueWrapper< std::list< std::pair< std::wstring,std::wstring > > > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: tagset_get_msf_features(self,tag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_get_msf_features" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tagset * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = ((freeling::tagset const *)arg1)->get_msf_features((std::wstring const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,std::wstring > >(static_cast< const std::list< std::pair< std::wstring,std::wstring > >& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_t, SWIG_POINTER_OWN | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_tagset_get_msf_string) {
  {
    freeling::tagset *arg1 = (freeling::tagset *) 0 ;
    std::wstring *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: tagset_get_msf_string(self,tag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_get_msf_string" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
    }
    arg1 = reinterpret_cast< freeling::tagset * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = ((freeling::tagset const *)arg1)->get_msf_string((std::wstring const &)*arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_init_locale) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: util_init_locale(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    freeling::util::init_locale((std::wstring const &)*arg1);
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_wstring2int) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: util_wstring2int(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (int)freeling::util::wstring2int((std::wstring const &)*arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_int2wstring) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: util_int2wstring(int const);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "util_int2wstring" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = freeling::util::int2wstring(arg1);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_wstring2double) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: util_wstring2double(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (double)freeling::util::wstring2double((std::wstring const &)*arg1);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_double2wstring) {
  {
    double arg1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: util_double2wstring(double const);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "util_double2wstring" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    result = freeling::util::double2wstring(arg1);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_wstring2longdouble) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring wtemp1 ;
    int argvi = 0;
    long double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: util_wstring2longdouble(std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    result = (long double)freeling::util::wstring2longdouble((std::wstring const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_longdouble2wstring) {
  {
    long double arg1 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: util_longdouble2wstring(long double const);");
    }
    {
      res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_long_double,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_longdouble2wstring" "', argument " "1"" of type '" "long double const""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_longdouble2wstring" "', argument " "1"" of type '" "long double const""'");
      } else {
        arg1 = *(reinterpret_cast< long double * >(argp1));
      }
    }
    result = freeling::util::longdouble2wstring(arg1);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_util_vector2wstring) {
  {
    std::vector< std::wstring > *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::vector< std::wstring > temp1 ;
    std::vector< std::wstring > *v1 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: util_vector2wstring(std::vector< std::wstring > const &,std::wstring const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__wstring_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of util_vector2wstring. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "util_vector2wstring. "
              "Expected an array of " "std::wstring");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of util_vector2wstring. "
          "Expected an array of " "std::wstring");
      }
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = freeling::util::vector2wstring((std::vector< std::wstring > const &)*arg1,(std::wstring const &)*arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_list2wstring) {
  {
    std::list< std::wstring > *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::list< std::wstring > temp1 ;
    std::list< std::wstring > *v1 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: util_list2wstring(std::list< std::wstring > const &,std::wstring const &);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__listT_std__wstring_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of util_list2wstring. "
          "Expected an array of " "std::wstring");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::wstring* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__wstring,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "util_list2wstring. "
              "Expected an array of " "std::wstring");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of util_list2wstring. "
          "Expected an array of " "std::wstring");
      }
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = freeling::util::list2wstring((std::list< std::wstring > const &)*arg1,(std::wstring const &)*arg2);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_pairlist2wstring__SWIG_0) {
  {
    std::list< std::pair< std::wstring,double > > *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: util_pairlist2wstring(std::list< std::pair< std::wstring,double > > const &,std::wstring const &,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_pairlist2wstring" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_pairlist2wstring" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    result = freeling::util::pairlist2wstring((std::list< std::pair< std::wstring,double > > const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_pairlist2wstring__SWIG_1) {
  {
    std::list< std::pair< std::wstring,std::wstring > > *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    std::wstring wtemp2 ;
    std::wstring wtemp3 ;
    int argvi = 0;
    std::wstring result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: util_pairlist2wstring(std::list< std::pair< std::wstring,std::wstring > > const &,std::wstring const &,std::wstring const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_pairlist2wstring" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,std::wstring > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_pairlist2wstring" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,std::wstring > > const &""'"); 
    }
    arg1 = reinterpret_cast< std::list< std::pair< std::wstring,std::wstring > > * >(argp1);
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    {
      std::string aux (SvPV(ST(2), PL_na));
      wtemp3 = freeling::util::string2wstring(aux);
      arg3 = &wtemp3;
    }
    result = freeling::util::pairlist2wstring((std::list< std::pair< std::wstring,std::wstring > > const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
    {
      std::string temp;
      temp = freeling::util::wstring2string(result);
      ST(argvi) = sv_2mortal(newSVpv(temp.c_str(), 0));
      argvi++;
      SvUTF8_on (ST(argvi));
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_pairlist2wstring) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_util_pairlist2wstring__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_util_pairlist2wstring__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'util_pairlist2wstring'");
  XSRETURN(0);
}


XS(_wrap_util_wstring2list) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::list< std::wstring > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: util_wstring2list(std::wstring const &,std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = freeling::util::wstring2list((std::wstring const &)*arg1,(std::wstring const &)*arg2);
    {
      std::list<std::wstring>::const_iterator i;
      unsigned int j;
      int len = (& result)->size();
      SV **svs = new SV*[len];
      for (i=(& result)->begin(), j=0; i!=(& result)->end(); i++, j++) {
        std::string ptr = freeling::util::wstring2string(*i);
        svs[j] = sv_2mortal(newSVpv(ptr.c_str(), 0));
        SvUTF8_on(svs[j]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_util_wstring2vector) {
  {
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring wtemp1 ;
    std::wstring wtemp2 ;
    int argvi = 0;
    std::vector< std::wstring > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: util_wstring2vector(std::wstring const &,std::wstring const &);");
    }
    {
      std::string aux (SvPV(ST(0), PL_na));
      wtemp1 = freeling::util::string2wstring(aux);
      arg1 = &wtemp1;
    }
    {
      std::string aux (SvPV(ST(1), PL_na));
      wtemp2 = freeling::util::string2wstring(aux);
      arg2 = &wtemp2;
    }
    result = freeling::util::wstring2vector((std::wstring const &)*arg1,(std::wstring const &)*arg2);
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        std::wstring* ptr = new std::wstring(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_std__wstring, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_util) {
  {
    int argvi = 0;
    freeling::util *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_util();");
    }
    result = (freeling::util *)new freeling::util();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__util, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_util) {
  {
    freeling::util *arg1 = (freeling::util *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_util(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_freeling__util, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_util" "', argument " "1"" of type '" "freeling::util *""'"); 
    }
    arg1 = reinterpret_cast< freeling::util * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_freeling__documentTo_p_std__listT_freeling__paragraph_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< freeling::paragraph > *)  ((freeling::document *) x));
}
static void *_p_freeling__generic_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *)  ((freeling::generic_iterator< freeling::node > *) x));
}
static void *_p_freeling__preorder_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) (freeling::generic_iterator< freeling::node > *) ((freeling::preorder_iterator< freeling::node > *) x));
}
static void *_p_freeling__sibling_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) (freeling::generic_iterator< freeling::node > *) ((freeling::sibling_iterator< freeling::node > *) x));
}
static void *_p_freeling__sentenceTo_p_std__listT_freeling__word_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< freeling::word > *)  ((freeling::sentence *) x));
}
static void *_p_freeling__generic_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *)  ((freeling::generic_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__preorder_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) (freeling::generic_iterator< freeling::depnode > *) ((freeling::preorder_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__sibling_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) (freeling::generic_iterator< freeling::depnode > *) ((freeling::sibling_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__const_sibling_iteratorT_freeling__node_tTo_p_freeling__generic_const_iteratorT_freeling__node_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::generic_const_iterator< freeling::node > *)  ((freeling::const_sibling_iterator< freeling::node > *) x));
}
static void *_p_freeling__const_preorder_iteratorT_freeling__node_tTo_p_freeling__generic_const_iteratorT_freeling__node_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::generic_const_iterator< freeling::node > *)  ((freeling::const_preorder_iterator< freeling::node > *) x));
}
static void *_p_freeling__depnodeTo_p_freeling__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::node *)  ((freeling::depnode *) x));
}
static void *_p_freeling__wordTo_p_std__listT_freeling__analysis_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< freeling::analysis > *)  ((freeling::word *) x));
}
static void *_p_freeling__preorder_iteratorT_freeling__depnode_tTo_p_freeling__generic_iteratorT_freeling__depnode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::generic_iterator< freeling::depnode > *)  ((freeling::preorder_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__sibling_iteratorT_freeling__depnode_tTo_p_freeling__generic_iteratorT_freeling__depnode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::generic_iterator< freeling::depnode > *)  ((freeling::sibling_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__dep_treeTo_p_freeling__treeT_freeling__depnode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree< freeling::depnode > *)  ((freeling::dep_tree *) x));
}
static void *_p_freeling__preorder_iteratorT_freeling__node_tTo_p_freeling__generic_iteratorT_freeling__node_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::generic_iterator< freeling::node > *)  ((freeling::preorder_iterator< freeling::node > *) x));
}
static void *_p_freeling__sibling_iteratorT_freeling__node_tTo_p_freeling__generic_iteratorT_freeling__node_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::generic_iterator< freeling::node > *)  ((freeling::sibling_iterator< freeling::node > *) x));
}
static void *_p_freeling__parse_treeTo_p_freeling__treeT_freeling__node_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree< freeling::node > *)  ((freeling::parse_tree *) x));
}
static void *_p_freeling__generic_const_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *)  ((freeling::generic_const_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__const_sibling_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) (freeling::generic_const_iterator< freeling::depnode > *) ((freeling::const_sibling_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__const_preorder_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *) (freeling::generic_const_iterator< freeling::depnode > *) ((freeling::const_preorder_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__paragraphTo_p_std__listT_freeling__sentence_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< freeling::sentence > *)  ((freeling::paragraph *) x));
}
static void *_p_freeling__generic_const_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *)  ((freeling::generic_const_iterator< freeling::node > *) x));
}
static void *_p_freeling__const_sibling_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) (freeling::generic_const_iterator< freeling::node > *) ((freeling::const_sibling_iterator< freeling::node > *) x));
}
static void *_p_freeling__const_preorder_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *) (freeling::generic_const_iterator< freeling::node > *) ((freeling::const_preorder_iterator< freeling::node > *) x));
}
static void *_p_freeling__const_sibling_iteratorT_freeling__depnode_tTo_p_freeling__generic_const_iteratorT_freeling__depnode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::generic_const_iterator< freeling::depnode > *)  ((freeling::const_sibling_iterator< freeling::depnode > *) x));
}
static void *_p_freeling__const_preorder_iteratorT_freeling__depnode_tTo_p_freeling__generic_const_iteratorT_freeling__depnode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::generic_const_iterator< freeling::depnode > *)  ((freeling::const_preorder_iterator< freeling::depnode > *) x));
}
static swig_type_info _swigt__p_boost__u32regex = {"_p_boost__u32regex", "boost::u32regex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_preorder_iterator = {"_p_const_preorder_iterator", "const_preorder_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_sibling_iterator = {"_p_const_sibling_iterator", "const_sibling_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__RE_map = {"_p_freeling__RE_map", "freeling::RE_map *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::RE_map", 0};
static swig_type_info _swigt__p_freeling__analysis = {"_p_freeling__analysis", "freeling::analysis *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::analysis", 0};
static swig_type_info _swigt__p_freeling__chart_parser = {"_p_freeling__chart_parser", "freeling::chart_parser *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::chart_parser", 0};
static swig_type_info _swigt__p_freeling__const_preorder_iteratorT_freeling__depnode_t = {"_p_freeling__const_preorder_iteratorT_freeling__depnode_t", "freeling::tree< freeling::depnode >::const_preorder_iterator *|freeling::const_preorder_iterator< freeling::depnode > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ConstPreorderIteratorDepnode", 0};
static swig_type_info _swigt__p_freeling__const_preorder_iteratorT_freeling__node_t = {"_p_freeling__const_preorder_iteratorT_freeling__node_t", "freeling::const_preorder_iterator< freeling::node > *|freeling::tree< freeling::node >::const_preorder_iterator *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ConstPreorderIteratorNode", 0};
static swig_type_info _swigt__p_freeling__const_sibling_iteratorT_freeling__depnode_t = {"_p_freeling__const_sibling_iteratorT_freeling__depnode_t", "freeling::const_sibling_iterator< freeling::depnode > *|freeling::tree< freeling::depnode >::const_sibling_iterator *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ConstSiblingIteratorDepnode", 0};
static swig_type_info _swigt__p_freeling__const_sibling_iteratorT_freeling__node_t = {"_p_freeling__const_sibling_iteratorT_freeling__node_t", "freeling::tree< freeling::node >::const_sibling_iterator *|freeling::const_sibling_iterator< freeling::node > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ConstSiblingIteratorNode", 0};
static swig_type_info _swigt__p_freeling__dates = {"_p_freeling__dates", "freeling::dates *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::dates", 0};
static swig_type_info _swigt__p_freeling__dep_tree = {"_p_freeling__dep_tree", "freeling::dep_tree *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::dep_tree", 0};
static swig_type_info _swigt__p_freeling__dep_txala = {"_p_freeling__dep_txala", "freeling::dep_txala *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::dep_txala", 0};
static swig_type_info _swigt__p_freeling__depnode = {"_p_freeling__depnode", "freeling::depnode *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::depnode", 0};
static swig_type_info _swigt__p_freeling__dictionary = {"_p_freeling__dictionary", "freeling::dictionary *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::dictionary", 0};
static swig_type_info _swigt__p_freeling__document = {"_p_freeling__document", "freeling::document *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::document", 0};
static swig_type_info _swigt__p_freeling__generic_const_iteratorT_freeling__depnode_t = {"_p_freeling__generic_const_iteratorT_freeling__depnode_t", "freeling::generic_const_iterator< freeling::depnode > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::GenericConstIteratorDepnode", 0};
static swig_type_info _swigt__p_freeling__generic_const_iteratorT_freeling__node_t = {"_p_freeling__generic_const_iteratorT_freeling__node_t", "freeling::generic_const_iterator< freeling::node > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::GenericConstIteratorNode", 0};
static swig_type_info _swigt__p_freeling__generic_iteratorT_freeling__depnode_t = {"_p_freeling__generic_iteratorT_freeling__depnode_t", "freeling::generic_iterator< freeling::depnode > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::GenericIteratorDepnode", 0};
static swig_type_info _swigt__p_freeling__generic_iteratorT_freeling__node_t = {"_p_freeling__generic_iteratorT_freeling__node_t", "freeling::generic_iterator< freeling::node > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::GenericIteratorNode", 0};
static swig_type_info _swigt__p_freeling__hmm_tagger = {"_p_freeling__hmm_tagger", "freeling::hmm_tagger *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::hmm_tagger", 0};
static swig_type_info _swigt__p_freeling__lang_ident = {"_p_freeling__lang_ident", "freeling::lang_ident *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::lang_ident", 0};
static swig_type_info _swigt__p_freeling__locutions = {"_p_freeling__locutions", "freeling::locutions *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::locutions", 0};
static swig_type_info _swigt__p_freeling__maco = {"_p_freeling__maco", "freeling::maco *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::maco", 0};
static swig_type_info _swigt__p_freeling__maco_options = {"_p_freeling__maco_options", "freeling::maco_options *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::maco_options", 0};
static swig_type_info _swigt__p_freeling__nec = {"_p_freeling__nec", "freeling::nec *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::nec", 0};
static swig_type_info _swigt__p_freeling__ner = {"_p_freeling__ner", "freeling::ner *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ner", 0};
static swig_type_info _swigt__p_freeling__node = {"_p_freeling__node", "freeling::node *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::node", 0};
static swig_type_info _swigt__p_freeling__numbers = {"_p_freeling__numbers", "freeling::numbers *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::numbers", 0};
static swig_type_info _swigt__p_freeling__paragraph = {"_p_freeling__paragraph", "freeling::paragraph *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::paragraph", 0};
static swig_type_info _swigt__p_freeling__parse_tree = {"_p_freeling__parse_tree", "freeling::parse_tree *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::parse_tree", 0};
static swig_type_info _swigt__p_freeling__phonetics = {"_p_freeling__phonetics", "freeling::phonetics *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::phonetics", 0};
static swig_type_info _swigt__p_freeling__preorder_iteratorT_freeling__depnode_t = {"_p_freeling__preorder_iteratorT_freeling__depnode_t", "freeling::preorder_iterator< freeling::depnode > *|freeling::tree< freeling::depnode >::iterator *|freeling::tree< freeling::depnode >::preorder_iterator *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::PreorderIteratorDepnode", 0};
static swig_type_info _swigt__p_freeling__preorder_iteratorT_freeling__node_t = {"_p_freeling__preorder_iteratorT_freeling__node_t", "freeling::preorder_iterator< freeling::node > *|freeling::tree< freeling::node >::iterator *|freeling::parse_tree::iterator *|freeling::tree< freeling::node >::preorder_iterator *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::PreorderIteratorNode", 0};
static swig_type_info _swigt__p_freeling__probabilities = {"_p_freeling__probabilities", "freeling::probabilities *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::probabilities", 0};
static swig_type_info _swigt__p_freeling__punts = {"_p_freeling__punts", "freeling::punts *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::punts", 0};
static swig_type_info _swigt__p_freeling__quantities = {"_p_freeling__quantities", "freeling::quantities *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::quantities", 0};
static swig_type_info _swigt__p_freeling__relax_tagger = {"_p_freeling__relax_tagger", "freeling::relax_tagger *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::relax_tagger", 0};
static swig_type_info _swigt__p_freeling__semanticDB = {"_p_freeling__semanticDB", "freeling::semanticDB *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::semanticDB", 0};
static swig_type_info _swigt__p_freeling__sense_info = {"_p_freeling__sense_info", "freeling::sense_info *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::sense_info", 0};
static swig_type_info _swigt__p_freeling__senses = {"_p_freeling__senses", "freeling::senses *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::senses", 0};
static swig_type_info _swigt__p_freeling__sentence = {"_p_freeling__sentence", "freeling::sentence *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::sentence", 0};
static swig_type_info _swigt__p_freeling__sentence__const_iterator = {"_p_freeling__sentence__const_iterator", "freeling::sentence::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__sentence__iterator = {"_p_freeling__sentence__iterator", "freeling::sentence::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__sibling_iteratorT_freeling__depnode_t = {"_p_freeling__sibling_iteratorT_freeling__depnode_t", "freeling::tree< freeling::depnode >::sibling_iterator *|freeling::sibling_iterator< freeling::depnode > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::SiblingIteratorDepnode", 0};
static swig_type_info _swigt__p_freeling__sibling_iteratorT_freeling__node_t = {"_p_freeling__sibling_iteratorT_freeling__node_t", "freeling::sibling_iterator< freeling::node > *|freeling::tree< freeling::node >::sibling_iterator *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::SiblingIteratorNode", 0};
static swig_type_info _swigt__p_freeling__splitter = {"_p_freeling__splitter", "freeling::splitter *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::splitter", 0};
static swig_type_info _swigt__p_freeling__tagset = {"_p_freeling__tagset", "freeling::tagset *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::tagset", 0};
static swig_type_info _swigt__p_freeling__tokenizer = {"_p_freeling__tokenizer", "freeling::tokenizer *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::tokenizer", 0};
static swig_type_info _swigt__p_freeling__traces = {"_p_freeling__traces", "freeling::traces *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::traces", 0};
static swig_type_info _swigt__p_freeling__treeT_freeling__depnode_t = {"_p_freeling__treeT_freeling__depnode_t", "freeling::tree< freeling::depnode > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::TreeDepnode", 0};
static swig_type_info _swigt__p_freeling__treeT_freeling__node_t = {"_p_freeling__treeT_freeling__node_t", "freeling::tree< freeling::node > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::TreeNode", 0};
static swig_type_info _swigt__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t = {"_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t", "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > const > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::TreeIteratorDepnodeConst", 0};
static swig_type_info _swigt__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t = {"_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t", "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::TreeIteratorDepnode", 0};
static swig_type_info _swigt__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t = {"_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t", "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > const > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::TreeIteratorNodeConst", 0};
static swig_type_info _swigt__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t = {"_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t", "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::TreeIteratorNode", 0};
static swig_type_info _swigt__p_freeling__ukb_wrap = {"_p_freeling__ukb_wrap", "freeling::ukb_wrap *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ukb_wrap", 0};
static swig_type_info _swigt__p_freeling__util = {"_p_freeling__util", "freeling::util *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::util", 0};
static swig_type_info _swigt__p_freeling__word = {"_p_freeling__word", "freeling::word *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::word", 0};
static swig_type_info _swigt__p_freeling__word__const_iterator = {"_p_freeling__word__const_iterator", "freeling::word::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__word__iterator = {"_p_freeling__word__iterator", "freeling::word::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_preorder_iterator = {"_p_preorder_iterator", "preorder_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sibling_iterator = {"_p_sibling_iterator", "sibling_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_freeling__analysis_t = {"_p_std__listT_freeling__analysis_t", "std::list< freeling::analysis > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ListAnalysis", 0};
static swig_type_info _swigt__p_std__listT_freeling__paragraph_t = {"_p_std__listT_freeling__paragraph_t", "std::list< freeling::paragraph > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ListParagraph", 0};
static swig_type_info _swigt__p_std__listT_freeling__sentence_t = {"_p_std__listT_freeling__sentence_t", "std::list< freeling::sentence > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ListSentence", 0};
static swig_type_info _swigt__p_std__listT_freeling__word_t = {"_p_std__listT_freeling__word_t", "std::list< freeling::word > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ListWord", 0};
static swig_type_info _swigt__p_std__listT_int_t = {"_p_std__listT_int_t", "std::list< int > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ListInt", 0};
static swig_type_info _swigt__p_std__listT_std__pairT_freeling__word_double_t_t = {"_p_std__listT_std__pairT_freeling__word_double_t_t", "std::list< std::pair< freeling::word,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_freeling__word_double_t_t__iterator = {"_p_std__listT_std__pairT_freeling__word_double_t_t__iterator", "std::list< std::pair< freeling::word,double > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__wstring_double_t_t = {"_p_std__listT_std__pairT_std__wstring_double_t_t", "std::list< std::pair< std::wstring,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__wstring_std__wstring_t_t = {"_p_std__listT_std__pairT_std__wstring_std__wstring_t_t", "std::list< std::pair< std::wstring,std::wstring > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__wstring_t = {"_p_std__listT_std__wstring_t", "std::list< std::wstring > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::ListString", 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_std__wstring_t = {"_p_std__pairT_double_std__wstring_t", "std::pair< double,std::wstring > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::PairDoubleString", 0};
static swig_type_info _swigt__p_std__pairT_std__wstring_std__wstring_t = {"_p_std__pairT_std__wstring_std__wstring_t", "std::pair< std::wstring,std::wstring > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::PairStringString", 0};
static swig_type_info _swigt__p_std__setT_std__wstring_t = {"_p_std__setT_std__wstring_t", "std::set< std::wstring > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__word_t = {"_p_std__vectorT_freeling__word_t", "std::vector< freeling::word > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::VectorWord", 0};
static swig_type_info _swigt__p_std__vectorT_std__listT_int_t_t = {"_p_std__vectorT_std__listT_int_t_t", "std::vector< std::list< int > > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::VectorListInt", 0};
static swig_type_info _swigt__p_std__vectorT_std__listT_std__wstring_t_t = {"_p_std__vectorT_std__listT_std__wstring_t_t", "std::vector< std::list< std::wstring > > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::VectorListString", 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_double_std__wstring_t_t = {"_p_std__vectorT_std__pairT_double_std__wstring_t_t", "std::vector< std::pair< double,std::wstring > > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::VectorPairDoubleString", 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t = {"_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t", "std::vector< std::pair< std::wstring,std::wstring > > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::VectorPairStringString", 0};
static swig_type_info _swigt__p_std__vectorT_std__wstring_t = {"_p_std__vectorT_std__wstring_t", "std::vector< std::wstring > *", 0, 0, (void*)"Lingua::FreeLing3::Bindings::VectorString", 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_boost__u32regex,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_const_preorder_iterator,
  &_swigt__p_const_sibling_iterator,
  &_swigt__p_freeling__RE_map,
  &_swigt__p_freeling__analysis,
  &_swigt__p_freeling__chart_parser,
  &_swigt__p_freeling__const_preorder_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__const_preorder_iteratorT_freeling__node_t,
  &_swigt__p_freeling__const_sibling_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__const_sibling_iteratorT_freeling__node_t,
  &_swigt__p_freeling__dates,
  &_swigt__p_freeling__dep_tree,
  &_swigt__p_freeling__dep_txala,
  &_swigt__p_freeling__depnode,
  &_swigt__p_freeling__dictionary,
  &_swigt__p_freeling__document,
  &_swigt__p_freeling__generic_const_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__generic_const_iteratorT_freeling__node_t,
  &_swigt__p_freeling__generic_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__generic_iteratorT_freeling__node_t,
  &_swigt__p_freeling__hmm_tagger,
  &_swigt__p_freeling__lang_ident,
  &_swigt__p_freeling__locutions,
  &_swigt__p_freeling__maco,
  &_swigt__p_freeling__maco_options,
  &_swigt__p_freeling__nec,
  &_swigt__p_freeling__ner,
  &_swigt__p_freeling__node,
  &_swigt__p_freeling__numbers,
  &_swigt__p_freeling__paragraph,
  &_swigt__p_freeling__parse_tree,
  &_swigt__p_freeling__phonetics,
  &_swigt__p_freeling__preorder_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__preorder_iteratorT_freeling__node_t,
  &_swigt__p_freeling__probabilities,
  &_swigt__p_freeling__punts,
  &_swigt__p_freeling__quantities,
  &_swigt__p_freeling__relax_tagger,
  &_swigt__p_freeling__semanticDB,
  &_swigt__p_freeling__sense_info,
  &_swigt__p_freeling__senses,
  &_swigt__p_freeling__sentence,
  &_swigt__p_freeling__sentence__const_iterator,
  &_swigt__p_freeling__sentence__iterator,
  &_swigt__p_freeling__sibling_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__sibling_iteratorT_freeling__node_t,
  &_swigt__p_freeling__splitter,
  &_swigt__p_freeling__tagset,
  &_swigt__p_freeling__tokenizer,
  &_swigt__p_freeling__traces,
  &_swigt__p_freeling__treeT_freeling__depnode_t,
  &_swigt__p_freeling__treeT_freeling__node_t,
  &_swigt__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t,
  &_swigt__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t,
  &_swigt__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t,
  &_swigt__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t,
  &_swigt__p_freeling__ukb_wrap,
  &_swigt__p_freeling__util,
  &_swigt__p_freeling__word,
  &_swigt__p_freeling__word__const_iterator,
  &_swigt__p_freeling__word__iterator,
  &_swigt__p_iterator,
  &_swigt__p_long_double,
  &_swigt__p_preorder_iterator,
  &_swigt__p_sibling_iterator,
  &_swigt__p_std__listT_freeling__analysis_t,
  &_swigt__p_std__listT_freeling__paragraph_t,
  &_swigt__p_std__listT_freeling__sentence_t,
  &_swigt__p_std__listT_freeling__word_t,
  &_swigt__p_std__listT_int_t,
  &_swigt__p_std__listT_std__pairT_freeling__word_double_t_t,
  &_swigt__p_std__listT_std__pairT_freeling__word_double_t_t__iterator,
  &_swigt__p_std__listT_std__pairT_std__wstring_double_t_t,
  &_swigt__p_std__listT_std__pairT_std__wstring_std__wstring_t_t,
  &_swigt__p_std__listT_std__wstring_t,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__pairT_double_std__wstring_t,
  &_swigt__p_std__pairT_std__wstring_std__wstring_t,
  &_swigt__p_std__setT_std__wstring_t,
  &_swigt__p_std__vectorT_freeling__word_t,
  &_swigt__p_std__vectorT_std__listT_int_t_t,
  &_swigt__p_std__vectorT_std__listT_std__wstring_t_t,
  &_swigt__p_std__vectorT_std__pairT_double_std__wstring_t_t,
  &_swigt__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t,
  &_swigt__p_std__vectorT_std__wstring_t,
  &_swigt__p_std__wstring,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_boost__u32regex[] = {  {&_swigt__p_boost__u32regex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_preorder_iterator[] = {  {&_swigt__p_const_preorder_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_sibling_iterator[] = {  {&_swigt__p_const_sibling_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__RE_map[] = {  {&_swigt__p_freeling__RE_map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__analysis[] = {  {&_swigt__p_freeling__analysis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__chart_parser[] = {  {&_swigt__p_freeling__chart_parser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__const_preorder_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__const_preorder_iteratorT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__const_preorder_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__const_preorder_iteratorT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__const_sibling_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__const_sibling_iteratorT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__const_sibling_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__const_sibling_iteratorT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dates[] = {  {&_swigt__p_freeling__dates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dep_tree[] = {  {&_swigt__p_freeling__dep_tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dep_txala[] = {  {&_swigt__p_freeling__dep_txala, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__depnode[] = {  {&_swigt__p_freeling__depnode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dictionary[] = {  {&_swigt__p_freeling__dictionary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__document[] = {  {&_swigt__p_freeling__document, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__generic_const_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__const_preorder_iteratorT_freeling__depnode_t, _p_freeling__const_preorder_iteratorT_freeling__depnode_tTo_p_freeling__generic_const_iteratorT_freeling__depnode_t, 0, 0},  {&_swigt__p_freeling__generic_const_iteratorT_freeling__depnode_t, 0, 0, 0},  {&_swigt__p_freeling__const_sibling_iteratorT_freeling__depnode_t, _p_freeling__const_sibling_iteratorT_freeling__depnode_tTo_p_freeling__generic_const_iteratorT_freeling__depnode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__generic_const_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__generic_const_iteratorT_freeling__node_t, 0, 0, 0},  {&_swigt__p_freeling__const_sibling_iteratorT_freeling__node_t, _p_freeling__const_sibling_iteratorT_freeling__node_tTo_p_freeling__generic_const_iteratorT_freeling__node_t, 0, 0},  {&_swigt__p_freeling__const_preorder_iteratorT_freeling__node_t, _p_freeling__const_preorder_iteratorT_freeling__node_tTo_p_freeling__generic_const_iteratorT_freeling__node_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__generic_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__preorder_iteratorT_freeling__depnode_t, _p_freeling__preorder_iteratorT_freeling__depnode_tTo_p_freeling__generic_iteratorT_freeling__depnode_t, 0, 0},  {&_swigt__p_freeling__generic_iteratorT_freeling__depnode_t, 0, 0, 0},  {&_swigt__p_freeling__sibling_iteratorT_freeling__depnode_t, _p_freeling__sibling_iteratorT_freeling__depnode_tTo_p_freeling__generic_iteratorT_freeling__depnode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__generic_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__generic_iteratorT_freeling__node_t, 0, 0, 0},  {&_swigt__p_freeling__preorder_iteratorT_freeling__node_t, _p_freeling__preorder_iteratorT_freeling__node_tTo_p_freeling__generic_iteratorT_freeling__node_t, 0, 0},  {&_swigt__p_freeling__sibling_iteratorT_freeling__node_t, _p_freeling__sibling_iteratorT_freeling__node_tTo_p_freeling__generic_iteratorT_freeling__node_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__hmm_tagger[] = {  {&_swigt__p_freeling__hmm_tagger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__lang_ident[] = {  {&_swigt__p_freeling__lang_ident, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__locutions[] = {  {&_swigt__p_freeling__locutions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__maco[] = {  {&_swigt__p_freeling__maco, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__maco_options[] = {  {&_swigt__p_freeling__maco_options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__nec[] = {  {&_swigt__p_freeling__nec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__ner[] = {  {&_swigt__p_freeling__ner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__node[] = {  {&_swigt__p_freeling__node, 0, 0, 0},  {&_swigt__p_freeling__depnode, _p_freeling__depnodeTo_p_freeling__node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__numbers[] = {  {&_swigt__p_freeling__numbers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__paragraph[] = {  {&_swigt__p_freeling__paragraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__parse_tree[] = {  {&_swigt__p_freeling__parse_tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__phonetics[] = {  {&_swigt__p_freeling__phonetics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__preorder_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__preorder_iteratorT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__preorder_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__preorder_iteratorT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__probabilities[] = {  {&_swigt__p_freeling__probabilities, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__punts[] = {  {&_swigt__p_freeling__punts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__quantities[] = {  {&_swigt__p_freeling__quantities, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__relax_tagger[] = {  {&_swigt__p_freeling__relax_tagger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semanticDB[] = {  {&_swigt__p_freeling__semanticDB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__sense_info[] = {  {&_swigt__p_freeling__sense_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__senses[] = {  {&_swigt__p_freeling__senses, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__sentence[] = {  {&_swigt__p_freeling__sentence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__sentence__const_iterator[] = {  {&_swigt__p_freeling__sentence__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__sentence__iterator[] = {  {&_swigt__p_freeling__sentence__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__sibling_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__sibling_iteratorT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__sibling_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__sibling_iteratorT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__splitter[] = {  {&_swigt__p_freeling__splitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tagset[] = {  {&_swigt__p_freeling__tagset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tokenizer[] = {  {&_swigt__p_freeling__tokenizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__traces[] = {  {&_swigt__p_freeling__traces, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__treeT_freeling__depnode_t[] = {  {&_swigt__p_freeling__dep_tree, _p_freeling__dep_treeTo_p_freeling__treeT_freeling__depnode_t, 0, 0},  {&_swigt__p_freeling__treeT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__treeT_freeling__node_t[] = {  {&_swigt__p_freeling__parse_tree, _p_freeling__parse_treeTo_p_freeling__treeT_freeling__node_t, 0, 0},  {&_swigt__p_freeling__treeT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t[] = {  {&_swigt__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0, 0, 0},  {&_swigt__p_freeling__const_preorder_iteratorT_freeling__depnode_t, _p_freeling__const_preorder_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0, 0},  {&_swigt__p_freeling__generic_const_iteratorT_freeling__depnode_t, _p_freeling__generic_const_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0, 0},  {&_swigt__p_freeling__const_sibling_iteratorT_freeling__depnode_t, _p_freeling__const_sibling_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t[] = {  {&_swigt__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0, 0, 0},  {&_swigt__p_freeling__preorder_iteratorT_freeling__depnode_t, _p_freeling__preorder_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0, 0},  {&_swigt__p_freeling__generic_iteratorT_freeling__depnode_t, _p_freeling__generic_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0, 0},  {&_swigt__p_freeling__sibling_iteratorT_freeling__depnode_t, _p_freeling__sibling_iteratorT_freeling__depnode_tTo_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t[] = {  {&_swigt__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0, 0, 0},  {&_swigt__p_freeling__generic_const_iteratorT_freeling__node_t, _p_freeling__generic_const_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0, 0},  {&_swigt__p_freeling__const_sibling_iteratorT_freeling__node_t, _p_freeling__const_sibling_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0, 0},  {&_swigt__p_freeling__const_preorder_iteratorT_freeling__node_t, _p_freeling__const_preorder_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t[] = {  {&_swigt__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0, 0, 0},  {&_swigt__p_freeling__generic_iteratorT_freeling__node_t, _p_freeling__generic_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0, 0},  {&_swigt__p_freeling__preorder_iteratorT_freeling__node_t, _p_freeling__preorder_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0, 0},  {&_swigt__p_freeling__sibling_iteratorT_freeling__node_t, _p_freeling__sibling_iteratorT_freeling__node_tTo_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__ukb_wrap[] = {  {&_swigt__p_freeling__ukb_wrap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__util[] = {  {&_swigt__p_freeling__util, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__word[] = {  {&_swigt__p_freeling__word, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__word__const_iterator[] = {  {&_swigt__p_freeling__word__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__word__iterator[] = {  {&_swigt__p_freeling__word__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_preorder_iterator[] = {  {&_swigt__p_preorder_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sibling_iterator[] = {  {&_swigt__p_sibling_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_freeling__analysis_t[] = {  {&_swigt__p_freeling__word, _p_freeling__wordTo_p_std__listT_freeling__analysis_t, 0, 0},  {&_swigt__p_std__listT_freeling__analysis_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_freeling__paragraph_t[] = {  {&_swigt__p_std__listT_freeling__paragraph_t, 0, 0, 0},  {&_swigt__p_freeling__document, _p_freeling__documentTo_p_std__listT_freeling__paragraph_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_freeling__sentence_t[] = {  {&_swigt__p_freeling__paragraph, _p_freeling__paragraphTo_p_std__listT_freeling__sentence_t, 0, 0},  {&_swigt__p_std__listT_freeling__sentence_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_freeling__word_t[] = {  {&_swigt__p_freeling__sentence, _p_freeling__sentenceTo_p_std__listT_freeling__word_t, 0, 0},  {&_swigt__p_std__listT_freeling__word_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_int_t[] = {  {&_swigt__p_std__listT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_freeling__word_double_t_t[] = {  {&_swigt__p_std__listT_std__pairT_freeling__word_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_freeling__word_double_t_t__iterator[] = {  {&_swigt__p_std__listT_std__pairT_freeling__word_double_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__wstring_double_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__wstring_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__wstring_std__wstring_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__wstring_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__wstring_t[] = {  {&_swigt__p_std__listT_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_std__wstring_t[] = {  {&_swigt__p_std__pairT_double_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__wstring_std__wstring_t[] = {  {&_swigt__p_std__pairT_std__wstring_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__wstring_t[] = {  {&_swigt__p_std__setT_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__word_t[] = {  {&_swigt__p_std__vectorT_freeling__word_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__listT_int_t_t[] = {  {&_swigt__p_std__vectorT_std__listT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__listT_std__wstring_t_t[] = {  {&_swigt__p_std__vectorT_std__listT_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_double_std__wstring_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_double_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__wstring_t[] = {  {&_swigt__p_std__vectorT_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_boost__u32regex,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_const_preorder_iterator,
  _swigc__p_const_sibling_iterator,
  _swigc__p_freeling__RE_map,
  _swigc__p_freeling__analysis,
  _swigc__p_freeling__chart_parser,
  _swigc__p_freeling__const_preorder_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__const_preorder_iteratorT_freeling__node_t,
  _swigc__p_freeling__const_sibling_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__const_sibling_iteratorT_freeling__node_t,
  _swigc__p_freeling__dates,
  _swigc__p_freeling__dep_tree,
  _swigc__p_freeling__dep_txala,
  _swigc__p_freeling__depnode,
  _swigc__p_freeling__dictionary,
  _swigc__p_freeling__document,
  _swigc__p_freeling__generic_const_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__generic_const_iteratorT_freeling__node_t,
  _swigc__p_freeling__generic_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__generic_iteratorT_freeling__node_t,
  _swigc__p_freeling__hmm_tagger,
  _swigc__p_freeling__lang_ident,
  _swigc__p_freeling__locutions,
  _swigc__p_freeling__maco,
  _swigc__p_freeling__maco_options,
  _swigc__p_freeling__nec,
  _swigc__p_freeling__ner,
  _swigc__p_freeling__node,
  _swigc__p_freeling__numbers,
  _swigc__p_freeling__paragraph,
  _swigc__p_freeling__parse_tree,
  _swigc__p_freeling__phonetics,
  _swigc__p_freeling__preorder_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__preorder_iteratorT_freeling__node_t,
  _swigc__p_freeling__probabilities,
  _swigc__p_freeling__punts,
  _swigc__p_freeling__quantities,
  _swigc__p_freeling__relax_tagger,
  _swigc__p_freeling__semanticDB,
  _swigc__p_freeling__sense_info,
  _swigc__p_freeling__senses,
  _swigc__p_freeling__sentence,
  _swigc__p_freeling__sentence__const_iterator,
  _swigc__p_freeling__sentence__iterator,
  _swigc__p_freeling__sibling_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__sibling_iteratorT_freeling__node_t,
  _swigc__p_freeling__splitter,
  _swigc__p_freeling__tagset,
  _swigc__p_freeling__tokenizer,
  _swigc__p_freeling__traces,
  _swigc__p_freeling__treeT_freeling__depnode_t,
  _swigc__p_freeling__treeT_freeling__node_t,
  _swigc__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t,
  _swigc__p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t,
  _swigc__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t,
  _swigc__p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t,
  _swigc__p_freeling__ukb_wrap,
  _swigc__p_freeling__util,
  _swigc__p_freeling__word,
  _swigc__p_freeling__word__const_iterator,
  _swigc__p_freeling__word__iterator,
  _swigc__p_iterator,
  _swigc__p_long_double,
  _swigc__p_preorder_iterator,
  _swigc__p_sibling_iterator,
  _swigc__p_std__listT_freeling__analysis_t,
  _swigc__p_std__listT_freeling__paragraph_t,
  _swigc__p_std__listT_freeling__sentence_t,
  _swigc__p_std__listT_freeling__word_t,
  _swigc__p_std__listT_int_t,
  _swigc__p_std__listT_std__pairT_freeling__word_double_t_t,
  _swigc__p_std__listT_std__pairT_freeling__word_double_t_t__iterator,
  _swigc__p_std__listT_std__pairT_std__wstring_double_t_t,
  _swigc__p_std__listT_std__pairT_std__wstring_std__wstring_t_t,
  _swigc__p_std__listT_std__wstring_t,
  _swigc__p_std__out_of_range,
  _swigc__p_std__pairT_double_std__wstring_t,
  _swigc__p_std__pairT_std__wstring_std__wstring_t,
  _swigc__p_std__setT_std__wstring_t,
  _swigc__p_std__vectorT_freeling__word_t,
  _swigc__p_std__vectorT_std__listT_int_t_t,
  _swigc__p_std__vectorT_std__listT_std__wstring_t_t,
  _swigc__p_std__vectorT_std__pairT_double_std__wstring_t_t,
  _swigc__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t,
  _swigc__p_std__vectorT_std__wstring_t,
  _swigc__p_std__wstring,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "Lingua::FreeLing3::Bindingsc::traces_TraceLevel", MAGIC_CLASS _wrap_traces_TraceLevel_set, MAGIC_CLASS _wrap_traces_TraceLevel_get,0 },
    { "Lingua::FreeLing3::Bindingsc::traces_TraceModule", MAGIC_CLASS _wrap_traces_TraceModule_set, MAGIC_CLASS _wrap_traces_TraceModule_get,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"Lingua::FreeLing3::Bindingsc::new_VectorWord", _wrap_new_VectorWord},
{"Lingua::FreeLing3::Bindingsc::VectorWord_size", _wrap_VectorWord_size},
{"Lingua::FreeLing3::Bindingsc::VectorWord_empty", _wrap_VectorWord_empty},
{"Lingua::FreeLing3::Bindingsc::VectorWord_clear", _wrap_VectorWord_clear},
{"Lingua::FreeLing3::Bindingsc::VectorWord_push", _wrap_VectorWord_push},
{"Lingua::FreeLing3::Bindingsc::VectorWord_pop", _wrap_VectorWord_pop},
{"Lingua::FreeLing3::Bindingsc::VectorWord_get", _wrap_VectorWord_get},
{"Lingua::FreeLing3::Bindingsc::VectorWord_set", _wrap_VectorWord_set},
{"Lingua::FreeLing3::Bindingsc::delete_VectorWord", _wrap_delete_VectorWord},
{"Lingua::FreeLing3::Bindingsc::new_ListWord", _wrap_new_ListWord},
{"Lingua::FreeLing3::Bindingsc::ListWord_size", _wrap_ListWord_size},
{"Lingua::FreeLing3::Bindingsc::ListWord_empty", _wrap_ListWord_empty},
{"Lingua::FreeLing3::Bindingsc::ListWord_clear", _wrap_ListWord_clear},
{"Lingua::FreeLing3::Bindingsc::ListWord_push", _wrap_ListWord_push},
{"Lingua::FreeLing3::Bindingsc::ListWord_elements", _wrap_ListWord_elements},
{"Lingua::FreeLing3::Bindingsc::ListWord_get", _wrap_ListWord_get},
{"Lingua::FreeLing3::Bindingsc::delete_ListWord", _wrap_delete_ListWord},
{"Lingua::FreeLing3::Bindingsc::new_ListAnalysis", _wrap_new_ListAnalysis},
{"Lingua::FreeLing3::Bindingsc::ListAnalysis_size", _wrap_ListAnalysis_size},
{"Lingua::FreeLing3::Bindingsc::ListAnalysis_empty", _wrap_ListAnalysis_empty},
{"Lingua::FreeLing3::Bindingsc::ListAnalysis_clear", _wrap_ListAnalysis_clear},
{"Lingua::FreeLing3::Bindingsc::ListAnalysis_push", _wrap_ListAnalysis_push},
{"Lingua::FreeLing3::Bindingsc::ListAnalysis_elements", _wrap_ListAnalysis_elements},
{"Lingua::FreeLing3::Bindingsc::ListAnalysis_get", _wrap_ListAnalysis_get},
{"Lingua::FreeLing3::Bindingsc::delete_ListAnalysis", _wrap_delete_ListAnalysis},
{"Lingua::FreeLing3::Bindingsc::new_ListSentence", _wrap_new_ListSentence},
{"Lingua::FreeLing3::Bindingsc::ListSentence_size", _wrap_ListSentence_size},
{"Lingua::FreeLing3::Bindingsc::ListSentence_empty", _wrap_ListSentence_empty},
{"Lingua::FreeLing3::Bindingsc::ListSentence_clear", _wrap_ListSentence_clear},
{"Lingua::FreeLing3::Bindingsc::ListSentence_push", _wrap_ListSentence_push},
{"Lingua::FreeLing3::Bindingsc::ListSentence_elements", _wrap_ListSentence_elements},
{"Lingua::FreeLing3::Bindingsc::ListSentence_get", _wrap_ListSentence_get},
{"Lingua::FreeLing3::Bindingsc::delete_ListSentence", _wrap_delete_ListSentence},
{"Lingua::FreeLing3::Bindingsc::new_ListParagraph", _wrap_new_ListParagraph},
{"Lingua::FreeLing3::Bindingsc::ListParagraph_size", _wrap_ListParagraph_size},
{"Lingua::FreeLing3::Bindingsc::ListParagraph_empty", _wrap_ListParagraph_empty},
{"Lingua::FreeLing3::Bindingsc::ListParagraph_clear", _wrap_ListParagraph_clear},
{"Lingua::FreeLing3::Bindingsc::ListParagraph_push", _wrap_ListParagraph_push},
{"Lingua::FreeLing3::Bindingsc::ListParagraph_elements", _wrap_ListParagraph_elements},
{"Lingua::FreeLing3::Bindingsc::ListParagraph_get", _wrap_ListParagraph_get},
{"Lingua::FreeLing3::Bindingsc::delete_ListParagraph", _wrap_delete_ListParagraph},
{"Lingua::FreeLing3::Bindingsc::new_ListString", _wrap_new_ListString},
{"Lingua::FreeLing3::Bindingsc::ListString_size", _wrap_ListString_size},
{"Lingua::FreeLing3::Bindingsc::ListString_empty", _wrap_ListString_empty},
{"Lingua::FreeLing3::Bindingsc::ListString_clear", _wrap_ListString_clear},
{"Lingua::FreeLing3::Bindingsc::ListString_push", _wrap_ListString_push},
{"Lingua::FreeLing3::Bindingsc::ListString_elements", _wrap_ListString_elements},
{"Lingua::FreeLing3::Bindingsc::ListString_get", _wrap_ListString_get},
{"Lingua::FreeLing3::Bindingsc::delete_ListString", _wrap_delete_ListString},
{"Lingua::FreeLing3::Bindingsc::new_ListInt", _wrap_new_ListInt},
{"Lingua::FreeLing3::Bindingsc::ListInt_size", _wrap_ListInt_size},
{"Lingua::FreeLing3::Bindingsc::ListInt_empty", _wrap_ListInt_empty},
{"Lingua::FreeLing3::Bindingsc::ListInt_clear", _wrap_ListInt_clear},
{"Lingua::FreeLing3::Bindingsc::ListInt_push", _wrap_ListInt_push},
{"Lingua::FreeLing3::Bindingsc::ListInt_elements", _wrap_ListInt_elements},
{"Lingua::FreeLing3::Bindingsc::ListInt_get", _wrap_ListInt_get},
{"Lingua::FreeLing3::Bindingsc::delete_ListInt", _wrap_delete_ListInt},
{"Lingua::FreeLing3::Bindingsc::new_VectorListInt", _wrap_new_VectorListInt},
{"Lingua::FreeLing3::Bindingsc::VectorListInt_size", _wrap_VectorListInt_size},
{"Lingua::FreeLing3::Bindingsc::VectorListInt_empty", _wrap_VectorListInt_empty},
{"Lingua::FreeLing3::Bindingsc::VectorListInt_clear", _wrap_VectorListInt_clear},
{"Lingua::FreeLing3::Bindingsc::VectorListInt_push", _wrap_VectorListInt_push},
{"Lingua::FreeLing3::Bindingsc::VectorListInt_pop", _wrap_VectorListInt_pop},
{"Lingua::FreeLing3::Bindingsc::VectorListInt_get", _wrap_VectorListInt_get},
{"Lingua::FreeLing3::Bindingsc::VectorListInt_set", _wrap_VectorListInt_set},
{"Lingua::FreeLing3::Bindingsc::delete_VectorListInt", _wrap_delete_VectorListInt},
{"Lingua::FreeLing3::Bindingsc::new_VectorListString", _wrap_new_VectorListString},
{"Lingua::FreeLing3::Bindingsc::VectorListString_size", _wrap_VectorListString_size},
{"Lingua::FreeLing3::Bindingsc::VectorListString_empty", _wrap_VectorListString_empty},
{"Lingua::FreeLing3::Bindingsc::VectorListString_clear", _wrap_VectorListString_clear},
{"Lingua::FreeLing3::Bindingsc::VectorListString_push", _wrap_VectorListString_push},
{"Lingua::FreeLing3::Bindingsc::VectorListString_pop", _wrap_VectorListString_pop},
{"Lingua::FreeLing3::Bindingsc::VectorListString_get", _wrap_VectorListString_get},
{"Lingua::FreeLing3::Bindingsc::VectorListString_set", _wrap_VectorListString_set},
{"Lingua::FreeLing3::Bindingsc::delete_VectorListString", _wrap_delete_VectorListString},
{"Lingua::FreeLing3::Bindingsc::new_VectorString", _wrap_new_VectorString},
{"Lingua::FreeLing3::Bindingsc::VectorString_size", _wrap_VectorString_size},
{"Lingua::FreeLing3::Bindingsc::VectorString_empty", _wrap_VectorString_empty},
{"Lingua::FreeLing3::Bindingsc::VectorString_clear", _wrap_VectorString_clear},
{"Lingua::FreeLing3::Bindingsc::VectorString_push", _wrap_VectorString_push},
{"Lingua::FreeLing3::Bindingsc::VectorString_pop", _wrap_VectorString_pop},
{"Lingua::FreeLing3::Bindingsc::VectorString_get", _wrap_VectorString_get},
{"Lingua::FreeLing3::Bindingsc::VectorString_set", _wrap_VectorString_set},
{"Lingua::FreeLing3::Bindingsc::delete_VectorString", _wrap_delete_VectorString},
{"Lingua::FreeLing3::Bindingsc::new_PairDoubleString", _wrap_new_PairDoubleString},
{"Lingua::FreeLing3::Bindingsc::PairDoubleString_first_set", _wrap_PairDoubleString_first_set},
{"Lingua::FreeLing3::Bindingsc::PairDoubleString_first_get", _wrap_PairDoubleString_first_get},
{"Lingua::FreeLing3::Bindingsc::PairDoubleString_second_set", _wrap_PairDoubleString_second_set},
{"Lingua::FreeLing3::Bindingsc::PairDoubleString_second_get", _wrap_PairDoubleString_second_get},
{"Lingua::FreeLing3::Bindingsc::delete_PairDoubleString", _wrap_delete_PairDoubleString},
{"Lingua::FreeLing3::Bindingsc::new_VectorPairDoubleString", _wrap_new_VectorPairDoubleString},
{"Lingua::FreeLing3::Bindingsc::VectorPairDoubleString_size", _wrap_VectorPairDoubleString_size},
{"Lingua::FreeLing3::Bindingsc::VectorPairDoubleString_empty", _wrap_VectorPairDoubleString_empty},
{"Lingua::FreeLing3::Bindingsc::VectorPairDoubleString_clear", _wrap_VectorPairDoubleString_clear},
{"Lingua::FreeLing3::Bindingsc::VectorPairDoubleString_push", _wrap_VectorPairDoubleString_push},
{"Lingua::FreeLing3::Bindingsc::VectorPairDoubleString_pop", _wrap_VectorPairDoubleString_pop},
{"Lingua::FreeLing3::Bindingsc::VectorPairDoubleString_get", _wrap_VectorPairDoubleString_get},
{"Lingua::FreeLing3::Bindingsc::VectorPairDoubleString_set", _wrap_VectorPairDoubleString_set},
{"Lingua::FreeLing3::Bindingsc::delete_VectorPairDoubleString", _wrap_delete_VectorPairDoubleString},
{"Lingua::FreeLing3::Bindingsc::new_PairStringString", _wrap_new_PairStringString},
{"Lingua::FreeLing3::Bindingsc::PairStringString_first_set", _wrap_PairStringString_first_set},
{"Lingua::FreeLing3::Bindingsc::PairStringString_first_get", _wrap_PairStringString_first_get},
{"Lingua::FreeLing3::Bindingsc::PairStringString_second_set", _wrap_PairStringString_second_set},
{"Lingua::FreeLing3::Bindingsc::PairStringString_second_get", _wrap_PairStringString_second_get},
{"Lingua::FreeLing3::Bindingsc::delete_PairStringString", _wrap_delete_PairStringString},
{"Lingua::FreeLing3::Bindingsc::new_VectorPairStringString", _wrap_new_VectorPairStringString},
{"Lingua::FreeLing3::Bindingsc::VectorPairStringString_size", _wrap_VectorPairStringString_size},
{"Lingua::FreeLing3::Bindingsc::VectorPairStringString_empty", _wrap_VectorPairStringString_empty},
{"Lingua::FreeLing3::Bindingsc::VectorPairStringString_clear", _wrap_VectorPairStringString_clear},
{"Lingua::FreeLing3::Bindingsc::VectorPairStringString_push", _wrap_VectorPairStringString_push},
{"Lingua::FreeLing3::Bindingsc::VectorPairStringString_pop", _wrap_VectorPairStringString_pop},
{"Lingua::FreeLing3::Bindingsc::VectorPairStringString_get", _wrap_VectorPairStringString_get},
{"Lingua::FreeLing3::Bindingsc::VectorPairStringString_set", _wrap_VectorPairStringString_set},
{"Lingua::FreeLing3::Bindingsc::delete_VectorPairStringString", _wrap_delete_VectorPairStringString},
{"Lingua::FreeLing3::Bindingsc::new_TreeIteratorNode", _wrap_new_TreeIteratorNode},
{"Lingua::FreeLing3::Bindingsc::delete_TreeIteratorNode", _wrap_delete_TreeIteratorNode},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode___ref__", _wrap_TreeIteratorNode___ref__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode___deref__", _wrap_TreeIteratorNode___deref__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode___eq__", _wrap_TreeIteratorNode___eq__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode___ne__", _wrap_TreeIteratorNode___ne__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_info_get", _wrap_TreeIteratorNode_info_get},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_num_children", _wrap_TreeIteratorNode_num_children},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_nth_child", _wrap_TreeIteratorNode_nth_child},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_get_parent", _wrap_TreeIteratorNode_get_parent},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_nth_child_ref", _wrap_TreeIteratorNode_nth_child_ref},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_empty", _wrap_TreeIteratorNode_empty},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_sibling_begin", _wrap_TreeIteratorNode_sibling_begin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_sibling_end", _wrap_TreeIteratorNode_sibling_end},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_sibling_rbegin", _wrap_TreeIteratorNode_sibling_rbegin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_sibling_rend", _wrap_TreeIteratorNode_sibling_rend},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_begin", _wrap_TreeIteratorNode_begin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNode_end", _wrap_TreeIteratorNode_end},
{"Lingua::FreeLing3::Bindingsc::new_GenericIteratorNode", _wrap_new_GenericIteratorNode},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode___ref__", _wrap_GenericIteratorNode___ref__},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode___deref__", _wrap_GenericIteratorNode___deref__},
{"Lingua::FreeLing3::Bindingsc::delete_GenericIteratorNode", _wrap_delete_GenericIteratorNode},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_info_set", _wrap_GenericIteratorNode_info_set},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_info_get", _wrap_GenericIteratorNode_info_get},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_operator_assignment", _wrap_GenericIteratorNode_operator_assignment},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_num_children", _wrap_GenericIteratorNode_num_children},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_nth_child", _wrap_GenericIteratorNode_nth_child},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_get_parent", _wrap_GenericIteratorNode_get_parent},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_nth_child_ref", _wrap_GenericIteratorNode_nth_child_ref},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_get_info", _wrap_GenericIteratorNode_get_info},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_append_child", _wrap_GenericIteratorNode_append_child},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_hang_child", _wrap_GenericIteratorNode_hang_child},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_clear", _wrap_GenericIteratorNode_clear},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_empty", _wrap_GenericIteratorNode_empty},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_sibling_begin", _wrap_GenericIteratorNode_sibling_begin},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_sibling_end", _wrap_GenericIteratorNode_sibling_end},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_sibling_rbegin", _wrap_GenericIteratorNode_sibling_rbegin},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_sibling_rend", _wrap_GenericIteratorNode_sibling_rend},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_begin", _wrap_GenericIteratorNode_begin},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorNode_end", _wrap_GenericIteratorNode_end},
{"Lingua::FreeLing3::Bindingsc::new_PreorderIteratorNode", _wrap_new_PreorderIteratorNode},
{"Lingua::FreeLing3::Bindingsc::delete_PreorderIteratorNode", _wrap_delete_PreorderIteratorNode},
{"Lingua::FreeLing3::Bindingsc::PreorderIteratorNode___plusplus__", _wrap_PreorderIteratorNode___plusplus__},
{"Lingua::FreeLing3::Bindingsc::PreorderIteratorNode___minmin__", _wrap_PreorderIteratorNode___minmin__},
{"Lingua::FreeLing3::Bindingsc::new_SiblingIteratorNode", _wrap_new_SiblingIteratorNode},
{"Lingua::FreeLing3::Bindingsc::delete_SiblingIteratorNode", _wrap_delete_SiblingIteratorNode},
{"Lingua::FreeLing3::Bindingsc::SiblingIteratorNode___plusplus__", _wrap_SiblingIteratorNode___plusplus__},
{"Lingua::FreeLing3::Bindingsc::SiblingIteratorNode___minmin__", _wrap_SiblingIteratorNode___minmin__},
{"Lingua::FreeLing3::Bindingsc::new_TreeIteratorDepnode", _wrap_new_TreeIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::delete_TreeIteratorDepnode", _wrap_delete_TreeIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode___ref__", _wrap_TreeIteratorDepnode___ref__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode___deref__", _wrap_TreeIteratorDepnode___deref__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode___eq__", _wrap_TreeIteratorDepnode___eq__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode___ne__", _wrap_TreeIteratorDepnode___ne__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_info_get", _wrap_TreeIteratorDepnode_info_get},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_num_children", _wrap_TreeIteratorDepnode_num_children},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_nth_child", _wrap_TreeIteratorDepnode_nth_child},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_get_parent", _wrap_TreeIteratorDepnode_get_parent},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_nth_child_ref", _wrap_TreeIteratorDepnode_nth_child_ref},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_empty", _wrap_TreeIteratorDepnode_empty},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_sibling_begin", _wrap_TreeIteratorDepnode_sibling_begin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_sibling_end", _wrap_TreeIteratorDepnode_sibling_end},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_sibling_rbegin", _wrap_TreeIteratorDepnode_sibling_rbegin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_sibling_rend", _wrap_TreeIteratorDepnode_sibling_rend},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_begin", _wrap_TreeIteratorDepnode_begin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnode_end", _wrap_TreeIteratorDepnode_end},
{"Lingua::FreeLing3::Bindingsc::new_GenericIteratorDepnode", _wrap_new_GenericIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode___ref__", _wrap_GenericIteratorDepnode___ref__},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode___deref__", _wrap_GenericIteratorDepnode___deref__},
{"Lingua::FreeLing3::Bindingsc::delete_GenericIteratorDepnode", _wrap_delete_GenericIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_info_set", _wrap_GenericIteratorDepnode_info_set},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_info_get", _wrap_GenericIteratorDepnode_info_get},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_operator_assignment", _wrap_GenericIteratorDepnode_operator_assignment},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_num_children", _wrap_GenericIteratorDepnode_num_children},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_nth_child", _wrap_GenericIteratorDepnode_nth_child},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_get_parent", _wrap_GenericIteratorDepnode_get_parent},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_nth_child_ref", _wrap_GenericIteratorDepnode_nth_child_ref},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_get_info", _wrap_GenericIteratorDepnode_get_info},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_append_child", _wrap_GenericIteratorDepnode_append_child},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_hang_child", _wrap_GenericIteratorDepnode_hang_child},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_clear", _wrap_GenericIteratorDepnode_clear},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_empty", _wrap_GenericIteratorDepnode_empty},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_sibling_begin", _wrap_GenericIteratorDepnode_sibling_begin},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_sibling_end", _wrap_GenericIteratorDepnode_sibling_end},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_sibling_rbegin", _wrap_GenericIteratorDepnode_sibling_rbegin},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_sibling_rend", _wrap_GenericIteratorDepnode_sibling_rend},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_begin", _wrap_GenericIteratorDepnode_begin},
{"Lingua::FreeLing3::Bindingsc::GenericIteratorDepnode_end", _wrap_GenericIteratorDepnode_end},
{"Lingua::FreeLing3::Bindingsc::new_PreorderIteratorDepnode", _wrap_new_PreorderIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::delete_PreorderIteratorDepnode", _wrap_delete_PreorderIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::PreorderIteratorDepnode___plusplus__", _wrap_PreorderIteratorDepnode___plusplus__},
{"Lingua::FreeLing3::Bindingsc::PreorderIteratorDepnode___minmin__", _wrap_PreorderIteratorDepnode___minmin__},
{"Lingua::FreeLing3::Bindingsc::new_SiblingIteratorDepnode", _wrap_new_SiblingIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::delete_SiblingIteratorDepnode", _wrap_delete_SiblingIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::SiblingIteratorDepnode___plusplus__", _wrap_SiblingIteratorDepnode___plusplus__},
{"Lingua::FreeLing3::Bindingsc::SiblingIteratorDepnode___minmin__", _wrap_SiblingIteratorDepnode___minmin__},
{"Lingua::FreeLing3::Bindingsc::new_TreeIteratorNodeConst", _wrap_new_TreeIteratorNodeConst},
{"Lingua::FreeLing3::Bindingsc::delete_TreeIteratorNodeConst", _wrap_delete_TreeIteratorNodeConst},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst___ref__", _wrap_TreeIteratorNodeConst___ref__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst___deref__", _wrap_TreeIteratorNodeConst___deref__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst___eq__", _wrap_TreeIteratorNodeConst___eq__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst___ne__", _wrap_TreeIteratorNodeConst___ne__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_info_get", _wrap_TreeIteratorNodeConst_info_get},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_num_children", _wrap_TreeIteratorNodeConst_num_children},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_nth_child", _wrap_TreeIteratorNodeConst_nth_child},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_get_parent", _wrap_TreeIteratorNodeConst_get_parent},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_nth_child_ref", _wrap_TreeIteratorNodeConst_nth_child_ref},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_empty", _wrap_TreeIteratorNodeConst_empty},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_sibling_begin", _wrap_TreeIteratorNodeConst_sibling_begin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_sibling_end", _wrap_TreeIteratorNodeConst_sibling_end},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_sibling_rbegin", _wrap_TreeIteratorNodeConst_sibling_rbegin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_sibling_rend", _wrap_TreeIteratorNodeConst_sibling_rend},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_begin", _wrap_TreeIteratorNodeConst_begin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorNodeConst_end", _wrap_TreeIteratorNodeConst_end},
{"Lingua::FreeLing3::Bindingsc::new_GenericConstIteratorNode", _wrap_new_GenericConstIteratorNode},
{"Lingua::FreeLing3::Bindingsc::delete_GenericConstIteratorNode", _wrap_delete_GenericConstIteratorNode},
{"Lingua::FreeLing3::Bindingsc::new_ConstPreorderIteratorNode", _wrap_new_ConstPreorderIteratorNode},
{"Lingua::FreeLing3::Bindingsc::delete_ConstPreorderIteratorNode", _wrap_delete_ConstPreorderIteratorNode},
{"Lingua::FreeLing3::Bindingsc::ConstPreorderIteratorNode___plusplus__", _wrap_ConstPreorderIteratorNode___plusplus__},
{"Lingua::FreeLing3::Bindingsc::ConstPreorderIteratorNode___minmin__", _wrap_ConstPreorderIteratorNode___minmin__},
{"Lingua::FreeLing3::Bindingsc::new_ConstSiblingIteratorNode", _wrap_new_ConstSiblingIteratorNode},
{"Lingua::FreeLing3::Bindingsc::delete_ConstSiblingIteratorNode", _wrap_delete_ConstSiblingIteratorNode},
{"Lingua::FreeLing3::Bindingsc::ConstSiblingIteratorNode___plusplus__", _wrap_ConstSiblingIteratorNode___plusplus__},
{"Lingua::FreeLing3::Bindingsc::ConstSiblingIteratorNode___minmin__", _wrap_ConstSiblingIteratorNode___minmin__},
{"Lingua::FreeLing3::Bindingsc::new_TreeIteratorDepnodeConst", _wrap_new_TreeIteratorDepnodeConst},
{"Lingua::FreeLing3::Bindingsc::delete_TreeIteratorDepnodeConst", _wrap_delete_TreeIteratorDepnodeConst},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst___ref__", _wrap_TreeIteratorDepnodeConst___ref__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst___deref__", _wrap_TreeIteratorDepnodeConst___deref__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst___eq__", _wrap_TreeIteratorDepnodeConst___eq__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst___ne__", _wrap_TreeIteratorDepnodeConst___ne__},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_info_get", _wrap_TreeIteratorDepnodeConst_info_get},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_num_children", _wrap_TreeIteratorDepnodeConst_num_children},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_nth_child", _wrap_TreeIteratorDepnodeConst_nth_child},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_get_parent", _wrap_TreeIteratorDepnodeConst_get_parent},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_nth_child_ref", _wrap_TreeIteratorDepnodeConst_nth_child_ref},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_empty", _wrap_TreeIteratorDepnodeConst_empty},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_sibling_begin", _wrap_TreeIteratorDepnodeConst_sibling_begin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_sibling_end", _wrap_TreeIteratorDepnodeConst_sibling_end},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_sibling_rbegin", _wrap_TreeIteratorDepnodeConst_sibling_rbegin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_sibling_rend", _wrap_TreeIteratorDepnodeConst_sibling_rend},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_begin", _wrap_TreeIteratorDepnodeConst_begin},
{"Lingua::FreeLing3::Bindingsc::TreeIteratorDepnodeConst_end", _wrap_TreeIteratorDepnodeConst_end},
{"Lingua::FreeLing3::Bindingsc::new_GenericConstIteratorDepnode", _wrap_new_GenericConstIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::delete_GenericConstIteratorDepnode", _wrap_delete_GenericConstIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::new_ConstPreorderIteratorDepnode", _wrap_new_ConstPreorderIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::delete_ConstPreorderIteratorDepnode", _wrap_delete_ConstPreorderIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::ConstPreorderIteratorDepnode___plusplus__", _wrap_ConstPreorderIteratorDepnode___plusplus__},
{"Lingua::FreeLing3::Bindingsc::ConstPreorderIteratorDepnode___minmin__", _wrap_ConstPreorderIteratorDepnode___minmin__},
{"Lingua::FreeLing3::Bindingsc::new_ConstSiblingIteratorDepnode", _wrap_new_ConstSiblingIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::delete_ConstSiblingIteratorDepnode", _wrap_delete_ConstSiblingIteratorDepnode},
{"Lingua::FreeLing3::Bindingsc::ConstSiblingIteratorDepnode___plusplus__", _wrap_ConstSiblingIteratorDepnode___plusplus__},
{"Lingua::FreeLing3::Bindingsc::ConstSiblingIteratorDepnode___minmin__", _wrap_ConstSiblingIteratorDepnode___minmin__},
{"Lingua::FreeLing3::Bindingsc::TreeNode_info_set", _wrap_TreeNode_info_set},
{"Lingua::FreeLing3::Bindingsc::TreeNode_info_get", _wrap_TreeNode_info_get},
{"Lingua::FreeLing3::Bindingsc::new_TreeNode", _wrap_new_TreeNode},
{"Lingua::FreeLing3::Bindingsc::delete_TreeNode", _wrap_delete_TreeNode},
{"Lingua::FreeLing3::Bindingsc::TreeNode_operator_assignment", _wrap_TreeNode_operator_assignment},
{"Lingua::FreeLing3::Bindingsc::TreeNode_num_children", _wrap_TreeNode_num_children},
{"Lingua::FreeLing3::Bindingsc::TreeNode_nth_child", _wrap_TreeNode_nth_child},
{"Lingua::FreeLing3::Bindingsc::TreeNode_get_parent", _wrap_TreeNode_get_parent},
{"Lingua::FreeLing3::Bindingsc::TreeNode_nth_child_ref", _wrap_TreeNode_nth_child_ref},
{"Lingua::FreeLing3::Bindingsc::TreeNode_get_info", _wrap_TreeNode_get_info},
{"Lingua::FreeLing3::Bindingsc::TreeNode_append_child", _wrap_TreeNode_append_child},
{"Lingua::FreeLing3::Bindingsc::TreeNode_hang_child", _wrap_TreeNode_hang_child},
{"Lingua::FreeLing3::Bindingsc::TreeNode_clear", _wrap_TreeNode_clear},
{"Lingua::FreeLing3::Bindingsc::TreeNode_empty", _wrap_TreeNode_empty},
{"Lingua::FreeLing3::Bindingsc::TreeNode_sibling_begin", _wrap_TreeNode_sibling_begin},
{"Lingua::FreeLing3::Bindingsc::TreeNode_sibling_end", _wrap_TreeNode_sibling_end},
{"Lingua::FreeLing3::Bindingsc::TreeNode_sibling_rbegin", _wrap_TreeNode_sibling_rbegin},
{"Lingua::FreeLing3::Bindingsc::TreeNode_sibling_rend", _wrap_TreeNode_sibling_rend},
{"Lingua::FreeLing3::Bindingsc::TreeNode_begin", _wrap_TreeNode_begin},
{"Lingua::FreeLing3::Bindingsc::TreeNode_end", _wrap_TreeNode_end},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_info_set", _wrap_TreeDepnode_info_set},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_info_get", _wrap_TreeDepnode_info_get},
{"Lingua::FreeLing3::Bindingsc::new_TreeDepnode", _wrap_new_TreeDepnode},
{"Lingua::FreeLing3::Bindingsc::delete_TreeDepnode", _wrap_delete_TreeDepnode},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_operator_assignment", _wrap_TreeDepnode_operator_assignment},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_num_children", _wrap_TreeDepnode_num_children},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_nth_child", _wrap_TreeDepnode_nth_child},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_get_parent", _wrap_TreeDepnode_get_parent},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_nth_child_ref", _wrap_TreeDepnode_nth_child_ref},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_get_info", _wrap_TreeDepnode_get_info},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_append_child", _wrap_TreeDepnode_append_child},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_hang_child", _wrap_TreeDepnode_hang_child},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_clear", _wrap_TreeDepnode_clear},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_empty", _wrap_TreeDepnode_empty},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_sibling_begin", _wrap_TreeDepnode_sibling_begin},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_sibling_end", _wrap_TreeDepnode_sibling_end},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_sibling_rbegin", _wrap_TreeDepnode_sibling_rbegin},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_sibling_rend", _wrap_TreeDepnode_sibling_rend},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_begin", _wrap_TreeDepnode_begin},
{"Lingua::FreeLing3::Bindingsc::TreeDepnode_end", _wrap_TreeDepnode_end},
{"Lingua::FreeLing3::Bindingsc::analysis_user_set", _wrap_analysis_user_set},
{"Lingua::FreeLing3::Bindingsc::analysis_user_get", _wrap_analysis_user_get},
{"Lingua::FreeLing3::Bindingsc::new_analysis", _wrap_new_analysis},
{"Lingua::FreeLing3::Bindingsc::analysis_operator_assignment", _wrap_analysis_operator_assignment},
{"Lingua::FreeLing3::Bindingsc::delete_analysis", _wrap_delete_analysis},
{"Lingua::FreeLing3::Bindingsc::analysis_set_lemma", _wrap_analysis_set_lemma},
{"Lingua::FreeLing3::Bindingsc::analysis_set_tag", _wrap_analysis_set_tag},
{"Lingua::FreeLing3::Bindingsc::analysis_set_prob", _wrap_analysis_set_prob},
{"Lingua::FreeLing3::Bindingsc::analysis_set_distance", _wrap_analysis_set_distance},
{"Lingua::FreeLing3::Bindingsc::analysis_set_retokenizable", _wrap_analysis_set_retokenizable},
{"Lingua::FreeLing3::Bindingsc::analysis_has_prob", _wrap_analysis_has_prob},
{"Lingua::FreeLing3::Bindingsc::analysis_has_distance", _wrap_analysis_has_distance},
{"Lingua::FreeLing3::Bindingsc::analysis_get_lemma", _wrap_analysis_get_lemma},
{"Lingua::FreeLing3::Bindingsc::analysis_get_tag", _wrap_analysis_get_tag},
{"Lingua::FreeLing3::Bindingsc::analysis_get_prob", _wrap_analysis_get_prob},
{"Lingua::FreeLing3::Bindingsc::analysis_get_distance", _wrap_analysis_get_distance},
{"Lingua::FreeLing3::Bindingsc::analysis_is_retokenizable", _wrap_analysis_is_retokenizable},
{"Lingua::FreeLing3::Bindingsc::analysis_get_retokenizable", _wrap_analysis_get_retokenizable},
{"Lingua::FreeLing3::Bindingsc::analysis_get_senses", _wrap_analysis_get_senses},
{"Lingua::FreeLing3::Bindingsc::analysis_set_senses", _wrap_analysis_set_senses},
{"Lingua::FreeLing3::Bindingsc::analysis_get_senses_string", _wrap_analysis_get_senses_string},
{"Lingua::FreeLing3::Bindingsc::analysis___lt__", _wrap_analysis___lt__},
{"Lingua::FreeLing3::Bindingsc::analysis___eq__", _wrap_analysis___eq__},
{"Lingua::FreeLing3::Bindingsc::analysis_is_selected", _wrap_analysis_is_selected},
{"Lingua::FreeLing3::Bindingsc::analysis_mark_selected", _wrap_analysis_mark_selected},
{"Lingua::FreeLing3::Bindingsc::analysis_unmark_selected", _wrap_analysis_unmark_selected},
{"Lingua::FreeLing3::Bindingsc::word_user_set", _wrap_word_user_set},
{"Lingua::FreeLing3::Bindingsc::word_user_get", _wrap_word_user_get},
{"Lingua::FreeLing3::Bindingsc::new_word", _wrap_new_word},
{"Lingua::FreeLing3::Bindingsc::word_operator_assignment", _wrap_word_operator_assignment},
{"Lingua::FreeLing3::Bindingsc::delete_word", _wrap_delete_word},
{"Lingua::FreeLing3::Bindingsc::word_copy_analysis", _wrap_word_copy_analysis},
{"Lingua::FreeLing3::Bindingsc::word_get_n_selected", _wrap_word_get_n_selected},
{"Lingua::FreeLing3::Bindingsc::word_get_n_unselected", _wrap_word_get_n_unselected},
{"Lingua::FreeLing3::Bindingsc::word_is_multiword", _wrap_word_is_multiword},
{"Lingua::FreeLing3::Bindingsc::word_get_n_words_mw", _wrap_word_get_n_words_mw},
{"Lingua::FreeLing3::Bindingsc::word_get_words_mw", _wrap_word_get_words_mw},
{"Lingua::FreeLing3::Bindingsc::word_get_form", _wrap_word_get_form},
{"Lingua::FreeLing3::Bindingsc::word_get_lc_form", _wrap_word_get_lc_form},
{"Lingua::FreeLing3::Bindingsc::word_selected_begin", _wrap_word_selected_begin},
{"Lingua::FreeLing3::Bindingsc::word_selected_end", _wrap_word_selected_end},
{"Lingua::FreeLing3::Bindingsc::word_unselected_begin", _wrap_word_unselected_begin},
{"Lingua::FreeLing3::Bindingsc::word_unselected_end", _wrap_word_unselected_end},
{"Lingua::FreeLing3::Bindingsc::word_get_lemma", _wrap_word_get_lemma},
{"Lingua::FreeLing3::Bindingsc::word_get_tag", _wrap_word_get_tag},
{"Lingua::FreeLing3::Bindingsc::word_get_senses", _wrap_word_get_senses},
{"Lingua::FreeLing3::Bindingsc::word_get_senses_string", _wrap_word_get_senses_string},
{"Lingua::FreeLing3::Bindingsc::word_set_senses", _wrap_word_set_senses},
{"Lingua::FreeLing3::Bindingsc::word_get_span_start", _wrap_word_get_span_start},
{"Lingua::FreeLing3::Bindingsc::word_get_span_finish", _wrap_word_get_span_finish},
{"Lingua::FreeLing3::Bindingsc::word_found_in_dict", _wrap_word_found_in_dict},
{"Lingua::FreeLing3::Bindingsc::word_set_found_in_dict", _wrap_word_set_found_in_dict},
{"Lingua::FreeLing3::Bindingsc::word_has_retokenizable", _wrap_word_has_retokenizable},
{"Lingua::FreeLing3::Bindingsc::word_lock_analysis", _wrap_word_lock_analysis},
{"Lingua::FreeLing3::Bindingsc::word_is_locked", _wrap_word_is_locked},
{"Lingua::FreeLing3::Bindingsc::word_add_alternative", _wrap_word_add_alternative},
{"Lingua::FreeLing3::Bindingsc::word_set_alternatives", _wrap_word_set_alternatives},
{"Lingua::FreeLing3::Bindingsc::word_has_alternatives", _wrap_word_has_alternatives},
{"Lingua::FreeLing3::Bindingsc::word_get_alternatives", _wrap_word_get_alternatives},
{"Lingua::FreeLing3::Bindingsc::word_alternatives_begin", _wrap_word_alternatives_begin},
{"Lingua::FreeLing3::Bindingsc::word_alternatives_end", _wrap_word_alternatives_end},
{"Lingua::FreeLing3::Bindingsc::word_add_analysis", _wrap_word_add_analysis},
{"Lingua::FreeLing3::Bindingsc::word_set_analysis", _wrap_word_set_analysis},
{"Lingua::FreeLing3::Bindingsc::word_set_form", _wrap_word_set_form},
{"Lingua::FreeLing3::Bindingsc::word_set_span", _wrap_word_set_span},
{"Lingua::FreeLing3::Bindingsc::word_find_tag_match", _wrap_word_find_tag_match},
{"Lingua::FreeLing3::Bindingsc::word_get_n_analysis", _wrap_word_get_n_analysis},
{"Lingua::FreeLing3::Bindingsc::word_unselect_all_analysis", _wrap_word_unselect_all_analysis},
{"Lingua::FreeLing3::Bindingsc::word_select_all_analysis", _wrap_word_select_all_analysis},
{"Lingua::FreeLing3::Bindingsc::word_select_analysis", _wrap_word_select_analysis},
{"Lingua::FreeLing3::Bindingsc::word_unselect_analysis", _wrap_word_unselect_analysis},
{"Lingua::FreeLing3::Bindingsc::word_get_analysis", _wrap_word_get_analysis},
{"Lingua::FreeLing3::Bindingsc::word_analysis_begin", _wrap_word_analysis_begin},
{"Lingua::FreeLing3::Bindingsc::word_analysis_end", _wrap_word_analysis_end},
{"Lingua::FreeLing3::Bindingsc::new_node", _wrap_new_node},
{"Lingua::FreeLing3::Bindingsc::delete_node", _wrap_delete_node},
{"Lingua::FreeLing3::Bindingsc::node_get_node_id", _wrap_node_get_node_id},
{"Lingua::FreeLing3::Bindingsc::node_set_node_id", _wrap_node_set_node_id},
{"Lingua::FreeLing3::Bindingsc::node_get_label", _wrap_node_get_label},
{"Lingua::FreeLing3::Bindingsc::node_get_word", _wrap_node_get_word},
{"Lingua::FreeLing3::Bindingsc::node_set_label", _wrap_node_set_label},
{"Lingua::FreeLing3::Bindingsc::node_set_word", _wrap_node_set_word},
{"Lingua::FreeLing3::Bindingsc::node_is_head", _wrap_node_is_head},
{"Lingua::FreeLing3::Bindingsc::node_set_head", _wrap_node_set_head},
{"Lingua::FreeLing3::Bindingsc::node_is_chunk", _wrap_node_is_chunk},
{"Lingua::FreeLing3::Bindingsc::node_set_chunk", _wrap_node_set_chunk},
{"Lingua::FreeLing3::Bindingsc::node_get_chunk_ord", _wrap_node_get_chunk_ord},
{"Lingua::FreeLing3::Bindingsc::new_parse_tree", _wrap_new_parse_tree},
{"Lingua::FreeLing3::Bindingsc::delete_parse_tree", _wrap_delete_parse_tree},
{"Lingua::FreeLing3::Bindingsc::new_depnode", _wrap_new_depnode},
{"Lingua::FreeLing3::Bindingsc::delete_depnode", _wrap_delete_depnode},
{"Lingua::FreeLing3::Bindingsc::depnode_set_link", _wrap_depnode_set_link},
{"Lingua::FreeLing3::Bindingsc::depnode_get_link", _wrap_depnode_get_link},
{"Lingua::FreeLing3::Bindingsc::depnode_get_link_ref", _wrap_depnode_get_link_ref},
{"Lingua::FreeLing3::Bindingsc::depnode_set_label", _wrap_depnode_set_label},
{"Lingua::FreeLing3::Bindingsc::new_dep_tree", _wrap_new_dep_tree},
{"Lingua::FreeLing3::Bindingsc::delete_dep_tree", _wrap_delete_dep_tree},
{"Lingua::FreeLing3::Bindingsc::new_sentence", _wrap_new_sentence},
{"Lingua::FreeLing3::Bindingsc::sentence_operator_assignment", _wrap_sentence_operator_assignment},
{"Lingua::FreeLing3::Bindingsc::delete_sentence", _wrap_delete_sentence},
{"Lingua::FreeLing3::Bindingsc::sentence_num_kbest", _wrap_sentence_num_kbest},
{"Lingua::FreeLing3::Bindingsc::sentence_set_parse_tree", _wrap_sentence_set_parse_tree},
{"Lingua::FreeLing3::Bindingsc::sentence_get_parse_tree", _wrap_sentence_get_parse_tree},
{"Lingua::FreeLing3::Bindingsc::sentence_is_parsed", _wrap_sentence_is_parsed},
{"Lingua::FreeLing3::Bindingsc::sentence_get_dep_tree", _wrap_sentence_get_dep_tree},
{"Lingua::FreeLing3::Bindingsc::sentence_set_dep_tree", _wrap_sentence_set_dep_tree},
{"Lingua::FreeLing3::Bindingsc::sentence_is_dep_parsed", _wrap_sentence_is_dep_parsed},
{"Lingua::FreeLing3::Bindingsc::sentence_get_words", _wrap_sentence_get_words},
{"Lingua::FreeLing3::Bindingsc::sentence_words_begin", _wrap_sentence_words_begin},
{"Lingua::FreeLing3::Bindingsc::sentence_words_end", _wrap_sentence_words_end},
{"Lingua::FreeLing3::Bindingsc::new_paragraph", _wrap_new_paragraph},
{"Lingua::FreeLing3::Bindingsc::delete_paragraph", _wrap_delete_paragraph},
{"Lingua::FreeLing3::Bindingsc::new_document", _wrap_new_document},
{"Lingua::FreeLing3::Bindingsc::delete_document", _wrap_delete_document},
{"Lingua::FreeLing3::Bindingsc::document_add_positive", _wrap_document_add_positive},
{"Lingua::FreeLing3::Bindingsc::document_get_coref_group", _wrap_document_get_coref_group},
{"Lingua::FreeLing3::Bindingsc::document_get_coref_nodes", _wrap_document_get_coref_nodes},
{"Lingua::FreeLing3::Bindingsc::document_is_coref", _wrap_document_is_coref},
{"Lingua::FreeLing3::Bindingsc::new_traces", _wrap_new_traces},
{"Lingua::FreeLing3::Bindingsc::delete_traces", _wrap_delete_traces},
{"Lingua::FreeLing3::Bindingsc::new_lang_ident", _wrap_new_lang_ident},
{"Lingua::FreeLing3::Bindingsc::delete_lang_ident", _wrap_delete_lang_ident},
{"Lingua::FreeLing3::Bindingsc::lang_ident_identify_language", _wrap_lang_ident_identify_language},
{"Lingua::FreeLing3::Bindingsc::lang_ident_rank_languages", _wrap_lang_ident_rank_languages},
{"Lingua::FreeLing3::Bindingsc::new_tokenizer", _wrap_new_tokenizer},
{"Lingua::FreeLing3::Bindingsc::delete_tokenizer", _wrap_delete_tokenizer},
{"Lingua::FreeLing3::Bindingsc::tokenizer_tokenize", _wrap_tokenizer_tokenize},
{"Lingua::FreeLing3::Bindingsc::new_splitter", _wrap_new_splitter},
{"Lingua::FreeLing3::Bindingsc::delete_splitter", _wrap_delete_splitter},
{"Lingua::FreeLing3::Bindingsc::splitter_split", _wrap_splitter_split},
{"Lingua::FreeLing3::Bindingsc::maco_options_Lang_set", _wrap_maco_options_Lang_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_Lang_get", _wrap_maco_options_Lang_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_AffixAnalysis_set", _wrap_maco_options_AffixAnalysis_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_AffixAnalysis_get", _wrap_maco_options_AffixAnalysis_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_MultiwordsDetection_set", _wrap_maco_options_MultiwordsDetection_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_MultiwordsDetection_get", _wrap_maco_options_MultiwordsDetection_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_NumbersDetection_set", _wrap_maco_options_NumbersDetection_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_NumbersDetection_get", _wrap_maco_options_NumbersDetection_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_PunctuationDetection_set", _wrap_maco_options_PunctuationDetection_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_PunctuationDetection_get", _wrap_maco_options_PunctuationDetection_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_DatesDetection_set", _wrap_maco_options_DatesDetection_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_DatesDetection_get", _wrap_maco_options_DatesDetection_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_QuantitiesDetection_set", _wrap_maco_options_QuantitiesDetection_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_QuantitiesDetection_get", _wrap_maco_options_QuantitiesDetection_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_DictionarySearch_set", _wrap_maco_options_DictionarySearch_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_DictionarySearch_get", _wrap_maco_options_DictionarySearch_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_ProbabilityAssignment_set", _wrap_maco_options_ProbabilityAssignment_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_ProbabilityAssignment_get", _wrap_maco_options_ProbabilityAssignment_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_OrthographicCorrection_set", _wrap_maco_options_OrthographicCorrection_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_OrthographicCorrection_get", _wrap_maco_options_OrthographicCorrection_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_UserMap_set", _wrap_maco_options_UserMap_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_UserMap_get", _wrap_maco_options_UserMap_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_NERecognition_set", _wrap_maco_options_NERecognition_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_NERecognition_get", _wrap_maco_options_NERecognition_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_LocutionsFile_set", _wrap_maco_options_LocutionsFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_LocutionsFile_get", _wrap_maco_options_LocutionsFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_QuantitiesFile_set", _wrap_maco_options_QuantitiesFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_QuantitiesFile_get", _wrap_maco_options_QuantitiesFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_AffixFile_set", _wrap_maco_options_AffixFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_AffixFile_get", _wrap_maco_options_AffixFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_ProbabilityFile_set", _wrap_maco_options_ProbabilityFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_ProbabilityFile_get", _wrap_maco_options_ProbabilityFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_DictionaryFile_set", _wrap_maco_options_DictionaryFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_DictionaryFile_get", _wrap_maco_options_DictionaryFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_NPdataFile_set", _wrap_maco_options_NPdataFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_NPdataFile_get", _wrap_maco_options_NPdataFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_PunctuationFile_set", _wrap_maco_options_PunctuationFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_PunctuationFile_get", _wrap_maco_options_PunctuationFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_CorrectorFile_set", _wrap_maco_options_CorrectorFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_CorrectorFile_get", _wrap_maco_options_CorrectorFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_UserMapFile_set", _wrap_maco_options_UserMapFile_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_UserMapFile_get", _wrap_maco_options_UserMapFile_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_Decimal_set", _wrap_maco_options_Decimal_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_Decimal_get", _wrap_maco_options_Decimal_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_Thousand_set", _wrap_maco_options_Thousand_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_Thousand_get", _wrap_maco_options_Thousand_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_ProbabilityThreshold_set", _wrap_maco_options_ProbabilityThreshold_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_ProbabilityThreshold_get", _wrap_maco_options_ProbabilityThreshold_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_InverseDict_set", _wrap_maco_options_InverseDict_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_InverseDict_get", _wrap_maco_options_InverseDict_get},
{"Lingua::FreeLing3::Bindingsc::maco_options_RetokContractions_set", _wrap_maco_options_RetokContractions_set},
{"Lingua::FreeLing3::Bindingsc::maco_options_RetokContractions_get", _wrap_maco_options_RetokContractions_get},
{"Lingua::FreeLing3::Bindingsc::new_maco_options", _wrap_new_maco_options},
{"Lingua::FreeLing3::Bindingsc::delete_maco_options", _wrap_delete_maco_options},
{"Lingua::FreeLing3::Bindingsc::maco_options_set_active_modules", _wrap_maco_options_set_active_modules},
{"Lingua::FreeLing3::Bindingsc::maco_options_set_data_files", _wrap_maco_options_set_data_files},
{"Lingua::FreeLing3::Bindingsc::maco_options_set_nummerical_points", _wrap_maco_options_set_nummerical_points},
{"Lingua::FreeLing3::Bindingsc::maco_options_set_threshold", _wrap_maco_options_set_threshold},
{"Lingua::FreeLing3::Bindingsc::maco_options_set_inverse_dict", _wrap_maco_options_set_inverse_dict},
{"Lingua::FreeLing3::Bindingsc::maco_options_set_retok_contractions", _wrap_maco_options_set_retok_contractions},
{"Lingua::FreeLing3::Bindingsc::new_maco", _wrap_new_maco},
{"Lingua::FreeLing3::Bindingsc::delete_maco", _wrap_delete_maco},
{"Lingua::FreeLing3::Bindingsc::maco_analyze", _wrap_maco_analyze},
{"Lingua::FreeLing3::Bindingsc::new_RE_map", _wrap_new_RE_map},
{"Lingua::FreeLing3::Bindingsc::delete_RE_map", _wrap_delete_RE_map},
{"Lingua::FreeLing3::Bindingsc::RE_map_analyze", _wrap_RE_map_analyze},
{"Lingua::FreeLing3::Bindingsc::new_numbers", _wrap_new_numbers},
{"Lingua::FreeLing3::Bindingsc::delete_numbers", _wrap_delete_numbers},
{"Lingua::FreeLing3::Bindingsc::numbers_analyze", _wrap_numbers_analyze},
{"Lingua::FreeLing3::Bindingsc::new_punts", _wrap_new_punts},
{"Lingua::FreeLing3::Bindingsc::delete_punts", _wrap_delete_punts},
{"Lingua::FreeLing3::Bindingsc::punts_analyze", _wrap_punts_analyze},
{"Lingua::FreeLing3::Bindingsc::new_dates", _wrap_new_dates},
{"Lingua::FreeLing3::Bindingsc::delete_dates", _wrap_delete_dates},
{"Lingua::FreeLing3::Bindingsc::dates_analyze", _wrap_dates_analyze},
{"Lingua::FreeLing3::Bindingsc::new_dictionary", _wrap_new_dictionary},
{"Lingua::FreeLing3::Bindingsc::delete_dictionary", _wrap_delete_dictionary},
{"Lingua::FreeLing3::Bindingsc::dictionary_search_form", _wrap_dictionary_search_form},
{"Lingua::FreeLing3::Bindingsc::dictionary_annotate_word", _wrap_dictionary_annotate_word},
{"Lingua::FreeLing3::Bindingsc::dictionary_get_forms", _wrap_dictionary_get_forms},
{"Lingua::FreeLing3::Bindingsc::dictionary_analyze", _wrap_dictionary_analyze},
{"Lingua::FreeLing3::Bindingsc::new_locutions", _wrap_new_locutions},
{"Lingua::FreeLing3::Bindingsc::delete_locutions", _wrap_delete_locutions},
{"Lingua::FreeLing3::Bindingsc::locutions_add_locution", _wrap_locutions_add_locution},
{"Lingua::FreeLing3::Bindingsc::locutions_analyze", _wrap_locutions_analyze},
{"Lingua::FreeLing3::Bindingsc::new_ner", _wrap_new_ner},
{"Lingua::FreeLing3::Bindingsc::delete_ner", _wrap_delete_ner},
{"Lingua::FreeLing3::Bindingsc::ner_analyze", _wrap_ner_analyze},
{"Lingua::FreeLing3::Bindingsc::new_quantities", _wrap_new_quantities},
{"Lingua::FreeLing3::Bindingsc::delete_quantities", _wrap_delete_quantities},
{"Lingua::FreeLing3::Bindingsc::quantities_analyze", _wrap_quantities_analyze},
{"Lingua::FreeLing3::Bindingsc::new_probabilities", _wrap_new_probabilities},
{"Lingua::FreeLing3::Bindingsc::delete_probabilities", _wrap_delete_probabilities},
{"Lingua::FreeLing3::Bindingsc::probabilities_annotate_word", _wrap_probabilities_annotate_word},
{"Lingua::FreeLing3::Bindingsc::probabilities_set_activate_guesser", _wrap_probabilities_set_activate_guesser},
{"Lingua::FreeLing3::Bindingsc::probabilities_analyze", _wrap_probabilities_analyze},
{"Lingua::FreeLing3::Bindingsc::new_hmm_tagger", _wrap_new_hmm_tagger},
{"Lingua::FreeLing3::Bindingsc::delete_hmm_tagger", _wrap_delete_hmm_tagger},
{"Lingua::FreeLing3::Bindingsc::hmm_tagger_analyze", _wrap_hmm_tagger_analyze},
{"Lingua::FreeLing3::Bindingsc::new_relax_tagger", _wrap_new_relax_tagger},
{"Lingua::FreeLing3::Bindingsc::delete_relax_tagger", _wrap_delete_relax_tagger},
{"Lingua::FreeLing3::Bindingsc::relax_tagger_analyze", _wrap_relax_tagger_analyze},
{"Lingua::FreeLing3::Bindingsc::new_phonetics", _wrap_new_phonetics},
{"Lingua::FreeLing3::Bindingsc::delete_phonetics", _wrap_delete_phonetics},
{"Lingua::FreeLing3::Bindingsc::phonetics_get_sound", _wrap_phonetics_get_sound},
{"Lingua::FreeLing3::Bindingsc::phonetics_analyze", _wrap_phonetics_analyze},
{"Lingua::FreeLing3::Bindingsc::new_nec", _wrap_new_nec},
{"Lingua::FreeLing3::Bindingsc::delete_nec", _wrap_delete_nec},
{"Lingua::FreeLing3::Bindingsc::nec_analyze", _wrap_nec_analyze},
{"Lingua::FreeLing3::Bindingsc::new_chart_parser", _wrap_new_chart_parser},
{"Lingua::FreeLing3::Bindingsc::delete_chart_parser", _wrap_delete_chart_parser},
{"Lingua::FreeLing3::Bindingsc::chart_parser_get_start_symbol", _wrap_chart_parser_get_start_symbol},
{"Lingua::FreeLing3::Bindingsc::chart_parser_analyze", _wrap_chart_parser_analyze},
{"Lingua::FreeLing3::Bindingsc::new_dep_txala", _wrap_new_dep_txala},
{"Lingua::FreeLing3::Bindingsc::delete_dep_txala", _wrap_delete_dep_txala},
{"Lingua::FreeLing3::Bindingsc::dep_txala_analyze", _wrap_dep_txala_analyze},
{"Lingua::FreeLing3::Bindingsc::new_senses", _wrap_new_senses},
{"Lingua::FreeLing3::Bindingsc::delete_senses", _wrap_delete_senses},
{"Lingua::FreeLing3::Bindingsc::senses_analyze", _wrap_senses_analyze},
{"Lingua::FreeLing3::Bindingsc::new_ukb_wrap", _wrap_new_ukb_wrap},
{"Lingua::FreeLing3::Bindingsc::delete_ukb_wrap", _wrap_delete_ukb_wrap},
{"Lingua::FreeLing3::Bindingsc::ukb_wrap_analyze", _wrap_ukb_wrap_analyze},
{"Lingua::FreeLing3::Bindingsc::sense_info_sense_set", _wrap_sense_info_sense_set},
{"Lingua::FreeLing3::Bindingsc::sense_info_sense_get", _wrap_sense_info_sense_get},
{"Lingua::FreeLing3::Bindingsc::sense_info_parents_set", _wrap_sense_info_parents_set},
{"Lingua::FreeLing3::Bindingsc::sense_info_parents_get", _wrap_sense_info_parents_get},
{"Lingua::FreeLing3::Bindingsc::sense_info_semfile_set", _wrap_sense_info_semfile_set},
{"Lingua::FreeLing3::Bindingsc::sense_info_semfile_get", _wrap_sense_info_semfile_get},
{"Lingua::FreeLing3::Bindingsc::sense_info_words_set", _wrap_sense_info_words_set},
{"Lingua::FreeLing3::Bindingsc::sense_info_words_get", _wrap_sense_info_words_get},
{"Lingua::FreeLing3::Bindingsc::sense_info_tonto_set", _wrap_sense_info_tonto_set},
{"Lingua::FreeLing3::Bindingsc::sense_info_tonto_get", _wrap_sense_info_tonto_get},
{"Lingua::FreeLing3::Bindingsc::new_sense_info", _wrap_new_sense_info},
{"Lingua::FreeLing3::Bindingsc::sense_info_get_parents_string", _wrap_sense_info_get_parents_string},
{"Lingua::FreeLing3::Bindingsc::delete_sense_info", _wrap_delete_sense_info},
{"Lingua::FreeLing3::Bindingsc::new_semanticDB", _wrap_new_semanticDB},
{"Lingua::FreeLing3::Bindingsc::delete_semanticDB", _wrap_delete_semanticDB},
{"Lingua::FreeLing3::Bindingsc::semanticDB_get_WN_keys", _wrap_semanticDB_get_WN_keys},
{"Lingua::FreeLing3::Bindingsc::semanticDB_get_sense_words", _wrap_semanticDB_get_sense_words},
{"Lingua::FreeLing3::Bindingsc::semanticDB_get_word_senses", _wrap_semanticDB_get_word_senses},
{"Lingua::FreeLing3::Bindingsc::semanticDB_get_sense_info", _wrap_semanticDB_get_sense_info},
{"Lingua::FreeLing3::Bindingsc::new_tagset", _wrap_new_tagset},
{"Lingua::FreeLing3::Bindingsc::delete_tagset", _wrap_delete_tagset},
{"Lingua::FreeLing3::Bindingsc::tagset_get_short_tag", _wrap_tagset_get_short_tag},
{"Lingua::FreeLing3::Bindingsc::tagset_get_msf_features", _wrap_tagset_get_msf_features},
{"Lingua::FreeLing3::Bindingsc::tagset_get_msf_string", _wrap_tagset_get_msf_string},
{"Lingua::FreeLing3::Bindingsc::util_init_locale", _wrap_util_init_locale},
{"Lingua::FreeLing3::Bindingsc::util_wstring2int", _wrap_util_wstring2int},
{"Lingua::FreeLing3::Bindingsc::util_int2wstring", _wrap_util_int2wstring},
{"Lingua::FreeLing3::Bindingsc::util_wstring2double", _wrap_util_wstring2double},
{"Lingua::FreeLing3::Bindingsc::util_double2wstring", _wrap_util_double2wstring},
{"Lingua::FreeLing3::Bindingsc::util_wstring2longdouble", _wrap_util_wstring2longdouble},
{"Lingua::FreeLing3::Bindingsc::util_longdouble2wstring", _wrap_util_longdouble2wstring},
{"Lingua::FreeLing3::Bindingsc::util_vector2wstring", _wrap_util_vector2wstring},
{"Lingua::FreeLing3::Bindingsc::util_list2wstring", _wrap_util_list2wstring},
{"Lingua::FreeLing3::Bindingsc::util_pairlist2wstring", _wrap_util_pairlist2wstring},
{"Lingua::FreeLing3::Bindingsc::util_wstring2list", _wrap_util_wstring2list},
{"Lingua::FreeLing3::Bindingsc::util_wstring2vector", _wrap_util_wstring2vector},
{"Lingua::FreeLing3::Bindingsc::new_util", _wrap_new_util},
{"Lingua::FreeLing3::Bindingsc::delete_util", _wrap_delete_util},
{0,0}
};
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
  dXSARGS;
  int i;
  
  SWIG_InitializeModule(0);
  
  /* Install commands */
  for (i = 0; swig_commands[i].name; i++) {
    /* Casts only needed for Perl < 5.10. */
#ifdef __cplusplus
    newXS(const_cast<char*>(swig_commands[i].name), swig_commands[i].wrapper, const_cast<char*>(__FILE__));
#else
    newXS((char*)swig_commands[i].name, swig_commands[i].wrapper, (char*)__FILE__);
#endif
  }
  
  /* Install variables */
  for (i = 0; swig_variables[i].name; i++) {
    SV *sv;
    sv = get_sv(swig_variables[i].name, TRUE | 0x2 | GV_ADDMULTI);
    if (swig_variables[i].type) {
      SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
    } else {
      sv_setiv(sv,(IV) 0);
    }
    swig_create_magic(sv, swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
  }
  
  /* Install constant */
  for (i = 0; swig_constants[i].type; i++) {
    SV *sv;
    sv = get_sv(swig_constants[i].name, TRUE | 0x2 | GV_ADDMULTI);
    switch(swig_constants[i].type) {
    case SWIG_INT:
      sv_setiv(sv, (IV) swig_constants[i].lvalue);
      break;
    case SWIG_FLOAT:
      sv_setnv(sv, (double) swig_constants[i].dvalue);
      break;
    case SWIG_STRING:
      sv_setpv(sv, (const char *) swig_constants[i].pvalue);
      break;
    case SWIG_POINTER:
      SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
      break;
    case SWIG_BINARY:
      SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
      break;
    default:
      break;
    }
    SvREADONLY_on(sv);
  }
  
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_freeling__word_t, (void*) "Lingua::FreeLing3::Bindings::VectorWord");
  SWIG_TypeClientData(SWIGTYPE_p_std__listT_freeling__word_t, (void*) "Lingua::FreeLing3::Bindings::ListWord");
  SWIG_TypeClientData(SWIGTYPE_p_std__listT_freeling__analysis_t, (void*) "Lingua::FreeLing3::Bindings::ListAnalysis");
  SWIG_TypeClientData(SWIGTYPE_p_std__listT_freeling__sentence_t, (void*) "Lingua::FreeLing3::Bindings::ListSentence");
  SWIG_TypeClientData(SWIGTYPE_p_std__listT_freeling__paragraph_t, (void*) "Lingua::FreeLing3::Bindings::ListParagraph");
  SWIG_TypeClientData(SWIGTYPE_p_std__listT_std__wstring_t, (void*) "Lingua::FreeLing3::Bindings::ListString");
  SWIG_TypeClientData(SWIGTYPE_p_std__listT_int_t, (void*) "Lingua::FreeLing3::Bindings::ListInt");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__listT_int_t_t, (void*) "Lingua::FreeLing3::Bindings::VectorListInt");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__listT_std__wstring_t_t, (void*) "Lingua::FreeLing3::Bindings::VectorListString");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__wstring_t, (void*) "Lingua::FreeLing3::Bindings::VectorString");
  SWIG_TypeClientData(SWIGTYPE_p_std__pairT_double_std__wstring_t, (void*) "Lingua::FreeLing3::Bindings::PairDoubleString");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_t, (void*) "Lingua::FreeLing3::Bindings::VectorPairDoubleString");
  SWIG_TypeClientData(SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, (void*) "Lingua::FreeLing3::Bindings::PairStringString");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_t, (void*) "Lingua::FreeLing3::Bindings::VectorPairStringString");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_t, (void*) "Lingua::FreeLing3::Bindings::TreeIteratorNode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__generic_iteratorT_freeling__node_t, (void*) "Lingua::FreeLing3::Bindings::GenericIteratorNode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__preorder_iteratorT_freeling__node_t, (void*) "Lingua::FreeLing3::Bindings::PreorderIteratorNode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__sibling_iteratorT_freeling__node_t, (void*) "Lingua::FreeLing3::Bindings::SiblingIteratorNode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_t, (void*) "Lingua::FreeLing3::Bindings::TreeIteratorDepnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__generic_iteratorT_freeling__depnode_t, (void*) "Lingua::FreeLing3::Bindings::GenericIteratorDepnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__preorder_iteratorT_freeling__depnode_t, (void*) "Lingua::FreeLing3::Bindings::PreorderIteratorDepnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__sibling_iteratorT_freeling__depnode_t, (void*) "Lingua::FreeLing3::Bindings::SiblingIteratorDepnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__tree_iteratorT_freeling__node_freeling__treeT_freeling__node_t_const_t, (void*) "Lingua::FreeLing3::Bindings::TreeIteratorNodeConst");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__node_t, (void*) "Lingua::FreeLing3::Bindings::GenericConstIteratorNode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__node_t, (void*) "Lingua::FreeLing3::Bindings::ConstPreorderIteratorNode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__node_t, (void*) "Lingua::FreeLing3::Bindings::ConstSiblingIteratorNode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__tree_iteratorT_freeling__depnode_freeling__treeT_freeling__depnode_t_const_t, (void*) "Lingua::FreeLing3::Bindings::TreeIteratorDepnodeConst");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__generic_const_iteratorT_freeling__depnode_t, (void*) "Lingua::FreeLing3::Bindings::GenericConstIteratorDepnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__const_preorder_iteratorT_freeling__depnode_t, (void*) "Lingua::FreeLing3::Bindings::ConstPreorderIteratorDepnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__const_sibling_iteratorT_freeling__depnode_t, (void*) "Lingua::FreeLing3::Bindings::ConstSiblingIteratorDepnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__treeT_freeling__node_t, (void*) "Lingua::FreeLing3::Bindings::TreeNode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__treeT_freeling__depnode_t, (void*) "Lingua::FreeLing3::Bindings::TreeDepnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__analysis, (void*) "Lingua::FreeLing3::Bindings::analysis");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__word, (void*) "Lingua::FreeLing3::Bindings::word");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__node, (void*) "Lingua::FreeLing3::Bindings::node");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__parse_tree, (void*) "Lingua::FreeLing3::Bindings::parse_tree");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__depnode, (void*) "Lingua::FreeLing3::Bindings::depnode");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__dep_tree, (void*) "Lingua::FreeLing3::Bindings::dep_tree");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__sentence, (void*) "Lingua::FreeLing3::Bindings::sentence");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__paragraph, (void*) "Lingua::FreeLing3::Bindings::paragraph");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__document, (void*) "Lingua::FreeLing3::Bindings::document");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__traces, (void*) "Lingua::FreeLing3::Bindings::traces");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__lang_ident, (void*) "Lingua::FreeLing3::Bindings::lang_ident");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__tokenizer, (void*) "Lingua::FreeLing3::Bindings::tokenizer");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__splitter, (void*) "Lingua::FreeLing3::Bindings::splitter");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__maco_options, (void*) "Lingua::FreeLing3::Bindings::maco_options");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__maco, (void*) "Lingua::FreeLing3::Bindings::maco");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__RE_map, (void*) "Lingua::FreeLing3::Bindings::RE_map");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__numbers, (void*) "Lingua::FreeLing3::Bindings::numbers");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__punts, (void*) "Lingua::FreeLing3::Bindings::punts");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__dates, (void*) "Lingua::FreeLing3::Bindings::dates");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__dictionary, (void*) "Lingua::FreeLing3::Bindings::dictionary");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__locutions, (void*) "Lingua::FreeLing3::Bindings::locutions");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__ner, (void*) "Lingua::FreeLing3::Bindings::ner");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__quantities, (void*) "Lingua::FreeLing3::Bindings::quantities");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__probabilities, (void*) "Lingua::FreeLing3::Bindings::probabilities");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__hmm_tagger, (void*) "Lingua::FreeLing3::Bindings::hmm_tagger");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__relax_tagger, (void*) "Lingua::FreeLing3::Bindings::relax_tagger");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__phonetics, (void*) "Lingua::FreeLing3::Bindings::phonetics");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__nec, (void*) "Lingua::FreeLing3::Bindings::nec");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__chart_parser, (void*) "Lingua::FreeLing3::Bindings::chart_parser");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__dep_txala, (void*) "Lingua::FreeLing3::Bindings::dep_txala");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__senses, (void*) "Lingua::FreeLing3::Bindings::senses");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__ukb_wrap, (void*) "Lingua::FreeLing3::Bindings::ukb_wrap");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__sense_info, (void*) "Lingua::FreeLing3::Bindings::sense_info");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__semanticDB, (void*) "Lingua::FreeLing3::Bindings::semanticDB");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__tagset, (void*) "Lingua::FreeLing3::Bindings::tagset");
  SWIG_TypeClientData(SWIGTYPE_p_freeling__util, (void*) "Lingua::FreeLing3::Bindings::util");
  ST(0) = &PL_sv_yes;
  XSRETURN(1);
}

